[
 {
  "count": 1,
  "code": [
   "  ublic boolean equals ( Object obj ) { f ( ! ( obj instanceof ShapeList ) ) { eturn false ;",
   "- ShapeList that =",
   "+ return super . equals",
   "  (",
   "- ShapeList",
   "+ obj",
   "  )",
   "- obj",
   "  ; ShapeList that = ( ShapeList ) obj ; int listSize = size ( ) ;",
   "- int listSize = size ( ) ; for ( int i = 0 ; i < listSize ; i ++ ) {",
   "  for ( int i = 0 ; i < listSize ; i ++ ) { if ( ! ShapeUtilities . equal ( ( Shape ) get ( i ) , ( Shape ) that . get ( i ) ) ) {",
   "- if ( ! ShapeUtilities . equal ( ( Shape ) get ( i ) , ( Shape ) that . get ( i ) ) ) { return false ;",
   "  return false ; } }",
   "- } }",
   "  return true ;",
   "- return true ;"
  ],
  "trigger": [
   "ublic",
   "boolean",
   "equals",
   "(",
   "Object",
   "obj",
   ")",
   "{",
   "f",
   "(",
   "!",
   "(",
   "obj",
   "instanceof",
   "ShapeList",
   ")",
   ")",
   "{",
   "eturn",
   "false",
   ";",
   "ShapeList",
   "that",
   "=",
   "(",
   "ShapeList",
   ")",
   "obj",
   ";",
   "ShapeList",
   "that",
   "=",
   "(",
   "ShapeList",
   ")",
   "obj",
   ";",
   "int",
   "listSize",
   "=",
   "size",
   "(",
   ")",
   ";",
   "int",
   "listSize",
   "=",
   "size",
   "(",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "listSize",
   ";",
   "i",
   "++",
   ")",
   "{",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "listSize",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "!",
   "ShapeUtilities",
   ".",
   "equal",
   "(",
   "(",
   "Shape",
   ")",
   "get",
   "(",
   "i",
   ")",
   ",",
   "(",
   "Shape",
   ")",
   "that",
   ".",
   "get",
   "(",
   "i",
   ")",
   ")",
   ")",
   "{",
   "if",
   "(",
   "!",
   "ShapeUtilities",
   ".",
   "equal",
   "(",
   "(",
   "Shape",
   ")",
   "get",
   "(",
   "i",
   ")",
   ",",
   "(",
   "Shape",
   ")",
   "that",
   ".",
   "get",
   "(",
   "i",
   ")",
   ")",
   ")",
   "{",
   "return",
   "false",
   ";",
   "return",
   "false",
   ";",
   "}",
   "}",
   "}",
   "}",
   "return",
   "true",
   ";",
   "return",
   "true",
   ";"
  ]
 },
 {
  "count": 1,
  "code": [
   "  ublic XYDataItem addOrUpdate ( Number x , Number y ) { f ( x == null ) { hrow new IllegalArgumentException ( \"Null 'x' argument.\" ) ; if ( this . allowDuplicateXValues ) {",
   "- if ( this . allowDuplicateXValues ) { add ( x , y ) ;",
   "  add ( x , y ) ; return null ;",
   "- return null ; }",
   "  } / if we get to here , we know that duplicate X values are not permittedYDataItem overwritten = null ; nt index = indexOf ( x ) ; if ( index >= 0",
   "+ && ! this . allowDuplicateXValues",
   "  ) { if ( index >= 0 ) { YDataItem existing = ( XYDataItem ) this . data . get ( index ) ; ry { verwritten = ( XYDataItem ) existing . clone ( ) ;"
  ],
  "trigger": [
   "ublic",
   "XYDataItem",
   "addOrUpdate",
   "(",
   "Number",
   "x",
   ",",
   "Number",
   "y",
   ")",
   "{",
   "f",
   "(",
   "x",
   "==",
   "null",
   ")",
   "{",
   "hrow",
   "new",
   "IllegalArgumentException",
   "(",
   "\"Null",
   "'x'",
   "argument.\"",
   ")",
   ";",
   "if",
   "(",
   "this",
   ".",
   "allowDuplicateXValues",
   ")",
   "{",
   "if",
   "(",
   "this",
   ".",
   "allowDuplicateXValues",
   ")",
   "{",
   "add",
   "(",
   "x",
   ",",
   "y",
   ")",
   ";",
   "add",
   "(",
   "x",
   ",",
   "y",
   ")",
   ";",
   "return",
   "null",
   ";",
   "return",
   "null",
   ";",
   "}",
   "}",
   "/",
   "if",
   "we",
   "get",
   "to",
   "here",
   ",",
   "we",
   "know",
   "that",
   "duplicate",
   "X",
   "values",
   "are",
   "not",
   "permittedYDataItem",
   "overwritten",
   "=",
   "null",
   ";",
   "nt",
   "index",
   "=",
   "indexOf",
   "(",
   "x",
   ")",
   ";",
   "if",
   "(",
   "index",
   ">=",
   "0",
   ")",
   "{",
   "if",
   "(",
   "index",
   ">=",
   "0",
   ")",
   "{",
   "YDataItem",
   "existing",
   "=",
   "(",
   "XYDataItem",
   ")",
   "this",
   ".",
   "data",
   ".",
   "get",
   "(",
   "index",
   ")",
   ";",
   "ry",
   "{",
   "verwritten",
   "=",
   "(",
   "XYDataItem",
   ")",
   "existing",
   ".",
   "clone",
   "(",
   ")",
   ";"
  ]
 },
 {
  "count": 1,
  "code": [
   "  ublic Week ( Date time ) { / ublic Week ( Date time , TimeZone zone ) { / defer argument checking ... this ( time ,",
   "- zone",
   "+ RegularTimePeriod . DEFAULT_TIME_ZONE",
   "  , Locale . getDefault ( ) ) ; this ( time , zone , Locale . getDefault ( ) ) ; * *"
  ],
  "trigger": [
   "ublic",
   "Week",
   "(",
   "Date",
   "time",
   ")",
   "{",
   "/",
   "ublic",
   "Week",
   "(",
   "Date",
   "time",
   ",",
   "TimeZone",
   "zone",
   ")",
   "{",
   "/",
   "defer",
   "argument",
   "checking",
   "...",
   "this",
   "(",
   "time",
   ",",
   "zone",
   ",",
   "Locale",
   ".",
   "getDefault",
   "(",
   ")",
   ")",
   ";",
   "this",
   "(",
   "time",
   ",",
   "zone",
   ",",
   "Locale",
   ".",
   "getDefault",
   "(",
   ")",
   ")",
   ";",
   "*",
   "*"
  ]
 },
 {
  "count": 1,
  "code": [
   "  rivate void updateBounds ( TimePeriod period , int index ) { f ( this . maxMiddleIndex >= 0 ) { long s = getDataItem ( this .",
   "- maxMiddleIndex",
   "+ minMiddleIndex",
   "  ) . getPeriod ( ) . getStart ( ) long s = getDataItem ( this . maxMiddleIndex ) . getPeriod ( ) . getStart ( ) getTime ( ) ; long e = getDataItem ( this .",
   "- maxMiddleIndex",
   "+ minMiddleIndex",
   "  ) . getPeriod ( ) . getEnd ( ) long e = getDataItem ( this . maxMiddleIndex ) . getPeriod ( ) . getEnd ( ) getTime ( ) ; ong maxMiddle = s + ( e - s ) / 2 ; f ( middle > maxMiddle ) {"
  ],
  "trigger": [
   "rivate",
   "void",
   "updateBounds",
   "(",
   "TimePeriod",
   "period",
   ",",
   "int",
   "index",
   ")",
   "{",
   "f",
   "(",
   "this",
   ".",
   "maxMiddleIndex",
   ">=",
   "0",
   ")",
   "{",
   "long",
   "s",
   "=",
   "getDataItem",
   "(",
   "this",
   ".",
   "maxMiddleIndex",
   ")",
   ".",
   "getPeriod",
   "(",
   ")",
   ".",
   "getStart",
   "(",
   ")",
   "long",
   "s",
   "=",
   "getDataItem",
   "(",
   "this",
   ".",
   "maxMiddleIndex",
   ")",
   ".",
   "getPeriod",
   "(",
   ")",
   ".",
   "getStart",
   "(",
   ")",
   "getTime",
   "(",
   ")",
   ";",
   "long",
   "e",
   "=",
   "getDataItem",
   "(",
   "this",
   ".",
   "maxMiddleIndex",
   ")",
   ".",
   "getPeriod",
   "(",
   ")",
   ".",
   "getEnd",
   "(",
   ")",
   "long",
   "e",
   "=",
   "getDataItem",
   "(",
   "this",
   ".",
   "maxMiddleIndex",
   ")",
   ".",
   "getPeriod",
   "(",
   ")",
   ".",
   "getEnd",
   "(",
   ")",
   "getTime",
   "(",
   ")",
   ";",
   "ong",
   "maxMiddle",
   "=",
   "s",
   "+",
   "(",
   "e",
   "-",
   "s",
   ")",
   "/",
   "2",
   ";",
   "f",
   "(",
   "middle",
   ">",
   "maxMiddle",
   ")",
   "{"
  ]
 },
 {
  "count": 1,
  "code": [
   "  eturn The formatted HTML area tag attribute ( s ) . / ublic String generateToolTipFragment ( String toolTipText ) { return \" title=\\\"\" +",
   "- ImageMapUtilities . htmlEscape ( toolTipText",
   "+ toolTipTextreturn",
   "- ) return",
   "  \" title=\\\"\" + ImageMapUtilities . htmlEscape ( toolTipText ) \"\\\" alt=\\\"\\\"\" ;",
   "- \"\\\" alt=\\\"\\\"\" ;"
  ],
  "trigger": [
   "eturn",
   "The",
   "formatted",
   "HTML",
   "area",
   "tag",
   "attribute",
   "(",
   "s",
   ")",
   ".",
   "/",
   "ublic",
   "String",
   "generateToolTipFragment",
   "(",
   "String",
   "toolTipText",
   ")",
   "{",
   "return",
   "\"",
   "title=\\\"\"",
   "+",
   "ImageMapUtilities",
   ".",
   "htmlEscape",
   "(",
   "toolTipText",
   ")",
   "return",
   "\"",
   "title=\\\"\"",
   "+",
   "ImageMapUtilities",
   ".",
   "htmlEscape",
   "(",
   "toolTipText",
   ")",
   "\"\\\"",
   "alt=\\\"\\\"\"",
   ";",
   "\"\\\"",
   "alt=\\\"\\\"\"",
   ";"
  ]
 }
]