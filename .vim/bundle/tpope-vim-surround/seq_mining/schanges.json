[
 {
  "number": 6,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  equals",
   "  (",
   "  Object",
   "  obj",
   "  )",
   "  {",
   "  f",
   "  (",
   "  !",
   "  (",
   "  obj",
   "  instanceof",
   "  ShapeList",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;",
   "- ShapeList",
   "- that",
   "- =",
   "+ return",
   "+ super",
   "+ .",
   "+ equals",
   "  (",
   "- ShapeList",
   "+ obj",
   "  )",
   "- obj",
   "  ;",
   "  ShapeList",
   "  that",
   "  =",
   "  (",
   "  ShapeList",
   "  )",
   "  obj",
   "  ;",
   "  int",
   "  listSize",
   "  =",
   "  size",
   "  (",
   "  )",
   "  ;",
   "- int",
   "- listSize",
   "- =",
   "- size",
   "- (",
   "- )",
   "- ;",
   "- for",
   "- (",
   "- int",
   "- i",
   "- =",
   "- 0",
   "- ;",
   "- i",
   "- <",
   "- listSize",
   "- ;",
   "- i",
   "- ++",
   "- )",
   "- {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  listSize",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  if",
   "  (",
   "  !",
   "  ShapeUtilities",
   "  .",
   "  equal",
   "  (",
   "  (",
   "  Shape",
   "  )",
   "  get",
   "  (",
   "  i",
   "  )",
   "  ,",
   "  (",
   "  Shape",
   "  )",
   "  that",
   "  .",
   "  get",
   "  (",
   "  i",
   "  )",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- !",
   "- ShapeUtilities",
   "- .",
   "- equal",
   "- (",
   "- (",
   "- Shape",
   "- )",
   "- get",
   "- (",
   "- i",
   "- )",
   "- ,",
   "- (",
   "- Shape",
   "- )",
   "- that",
   "- .",
   "- get",
   "- (",
   "- i",
   "- )",
   "- )",
   "- )",
   "- {",
   "- return",
   "- false",
   "- ;",
   "  return",
   "  false",
   "  ;",
   "  }",
   "  }",
   "- }",
   "- }",
   "  return",
   "  true",
   "  ;",
   "- return",
   "- true",
   "- ;"
  ]
 },
 {
  "number": 10,
  "changes_set": [
   "  eturn",
   "  The",
   "  formatted",
   "  HTML",
   "  area",
   "  tag",
   "  attribute",
   "  (",
   "  s",
   "  )",
   "  .",
   "  /",
   "  ublic",
   "  String",
   "  generateToolTipFragment",
   "  (",
   "  String",
   "  toolTipText",
   "  )",
   "  {",
   "  return",
   "  \" title=\\\"\"",
   "  +",
   "- ImageMapUtilities",
   "- .",
   "- htmlEscape",
   "- (",
   "- toolTipText",
   "+ toolTipTextreturn",
   "- )",
   "- return",
   "  \" title=\\\"\"",
   "  +",
   "  ImageMapUtilities",
   "  .",
   "  htmlEscape",
   "  (",
   "  toolTipText",
   "  )",
   "  \"\\\" alt=\\\"\\\"\"",
   "  ;",
   "- \"\\\" alt=\\\"\\\"\"",
   "- ;"
  ]
 },
 {
  "number": 8,
  "changes_set": [
   "  ublic",
   "  Week",
   "  (",
   "  Date",
   "  time",
   "  )",
   "  {",
   "  /",
   "  ublic",
   "  Week",
   "  (",
   "  Date",
   "  time",
   "  ,",
   "  TimeZone",
   "  zone",
   "  )",
   "  {",
   "  /",
   "  defer",
   "  argument",
   "  checking",
   "  ...",
   "  this",
   "  (",
   "  time",
   "  ,",
   "- zone",
   "+ RegularTimePeriod",
   "+ .",
   "+ DEFAULT_TIME_ZONE",
   "  ,",
   "  Locale",
   "  .",
   "  getDefault",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  this",
   "  (",
   "  time",
   "  ,",
   "  zone",
   "  ,",
   "  Locale",
   "  .",
   "  getDefault",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 7,
  "changes_set": [
   "  rivate",
   "  void",
   "  updateBounds",
   "  (",
   "  TimePeriod",
   "  period",
   "  ,",
   "  int",
   "  index",
   "  )",
   "  {",
   "  f",
   "  (",
   "  this",
   "  .",
   "  maxMiddleIndex",
   "  >=",
   "  0",
   "  )",
   "  {",
   "  long",
   "  s",
   "  =",
   "  getDataItem",
   "  (",
   "  this",
   "  .",
   "- maxMiddleIndex",
   "+ minMiddleIndex",
   "  )",
   "  .",
   "  getPeriod",
   "  (",
   "  )",
   "  .",
   "  getStart",
   "  (",
   "  )",
   "  long",
   "  s",
   "  =",
   "  getDataItem",
   "  (",
   "  this",
   "  .",
   "  maxMiddleIndex",
   "  )",
   "  .",
   "  getPeriod",
   "  (",
   "  )",
   "  .",
   "  getStart",
   "  (",
   "  )",
   "  getTime",
   "  (",
   "  )",
   "  ;",
   "  long",
   "  e",
   "  =",
   "  getDataItem",
   "  (",
   "  this",
   "  .",
   "- maxMiddleIndex",
   "+ minMiddleIndex",
   "  )",
   "  .",
   "  getPeriod",
   "  (",
   "  )",
   "  .",
   "  getEnd",
   "  (",
   "  )",
   "  long",
   "  e",
   "  =",
   "  getDataItem",
   "  (",
   "  this",
   "  .",
   "  maxMiddleIndex",
   "  )",
   "  .",
   "  getPeriod",
   "  (",
   "  )",
   "  .",
   "  getEnd",
   "  (",
   "  )",
   "  getTime",
   "  (",
   "  )",
   "  ;",
   "  ong",
   "  maxMiddle",
   "  =",
   "  s",
   "  +",
   "  (",
   "  e",
   "  -",
   "  s",
   "  )",
   "  /",
   "  2",
   "  ;",
   "  f",
   "  (",
   "  middle",
   "  >",
   "  maxMiddle",
   "  )",
   "  {"
  ]
 },
 {
  "number": 5,
  "changes_set": [
   "  ublic",
   "  XYDataItem",
   "  addOrUpdate",
   "  (",
   "  Number",
   "  x",
   "  ,",
   "  Number",
   "  y",
   "  )",
   "  {",
   "  f",
   "  (",
   "  x",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Null 'x' argument.\"",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  this",
   "  .",
   "  allowDuplicateXValues",
   "  )",
   "  {",
   "- if",
   "- (",
   "- this",
   "- .",
   "- allowDuplicateXValues",
   "- )",
   "- {",
   "- add",
   "- (",
   "- x",
   "- ,",
   "- y",
   "- )",
   "- ;",
   "  add",
   "  (",
   "  x",
   "  ,",
   "  y",
   "  )",
   "  ;",
   "  return",
   "  null",
   "  ;",
   "- return",
   "- null",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  if",
   "  we",
   "  get",
   "  to",
   "  here",
   "  ,",
   "  we",
   "  know",
   "  that",
   "  duplicate",
   "  X",
   "  values",
   "  are",
   "  not",
   "  permittedYDataItem",
   "  overwritten",
   "  =",
   "  null",
   "  ;",
   "  nt",
   "  index",
   "  =",
   "  indexOf",
   "  (",
   "  x",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  index",
   "  >=",
   "  0",
   "+ &&",
   "+ !",
   "+ this",
   "+ .",
   "+ allowDuplicateXValues",
   "  )",
   "  {",
   "  if",
   "  (",
   "  index",
   "  >=",
   "  0",
   "  )",
   "  {",
   "  YDataItem",
   "  existing",
   "  =",
   "  (",
   "  XYDataItem",
   "  )",
   "  this",
   "  .",
   "  data",
   "  .",
   "  get",
   "  (",
   "  index",
   "  )",
   "  ;",
   "  ry",
   "  {",
   "  verwritten",
   "  =",
   "  (",
   "  XYDataItem",
   "  )",
   "  existing",
   "  .",
   "  clone",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 3,
  "changes_set": [
   "  ublic",
   "  TimeSeries",
   "  createCopy",
   "  (",
   "  int",
   "  start",
   "  ,",
   "  int",
   "  end",
   "  )",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Requires start <= end.\"",
   "  )",
   "  ;",
   "  imeSeries",
   "  copy",
   "  =",
   "  (",
   "  TimeSeries",
   "  )",
   "  super",
   "  .",
   "  clone",
   "  (",
   "  )",
   "  ;",
   "  copy",
   "  .",
   "  minY",
   "- =",
   "- Double",
   "- .",
   "- NaN",
   "- ;",
   "- copy",
   "- .",
   "- minY",
   "- =",
   "- Double",
   "- .",
   "- NaN",
   "- ;",
   "- copy",
   "- .",
   "- maxY",
   "  =",
   "  Double",
   "  .",
   "  NaN",
   "  ;",
   "  copy",
   "  .",
   "  maxY",
   "  =",
   "  Double",
   "  .",
   "  NaN",
   "  ;",
   "  opy",
   "  .",
   "  data",
   "  =",
   "  new",
   "  java",
   "  .",
   "  util",
   "  .",
   "  ArrayList",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  this",
   "  .",
   "  data",
   "  .",
   "  size",
   "  (",
   "  )",
   "  >",
   "  0",
   "  )",
   "  {",
   "  or",
   "  (",
   "  int",
   "  index",
   "  =",
   "  start",
   "  ;",
   "  index",
   "  <=",
   "  end",
   "  ;",
   "  index",
   "  ++",
   "  )",
   "  {"
  ]
 },
 {
  "number": 4,
  "changes_set": [
   "  ublic",
   "  Range",
   "  getDataRange",
   "  (",
   "  ValueAxis",
   "  axis",
   "- )",
   "- {",
   "- if",
   "- (",
   "- r",
   "- !=",
   "- null",
   "  )",
   "  {",
   "  if",
   "  (",
   "  r",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  ollection",
   "  c",
   "  =",
   "  r",
   "  .",
   "  getAnnotations",
   "  (",
   "  )",
   "  ;",
   "  terator",
   "  i",
   "  =",
   "  c",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  ;",
   "  hile",
   "  (",
   "  i",
   "  .",
   "  hasNext",
   "  (",
   "  )",
   "  )",
   "  {"
  ]
 },
 {
  "number": 4,
  "changes_set": [
   "  ublic",
   "  Range",
   "  getDataRange",
   "  (",
   "  ValueAxis",
   "  axis",
   "  )",
   "  {",
   "  ncludedAnnotations",
   "  .",
   "  add",
   "  (",
   "  a",
   "  )",
   "  ;",
   "  }",
   "- }"
  ]
 },
 {
  "number": 2,
  "changes_set": [
   "  ublic",
   "  static",
   "  Range",
   "  iterateDomainBounds",
   "  (",
   "  XYDataset",
   "  dataset",
   "  ,",
   "  or",
   "  (",
   "  int",
   "  series",
   "  =",
   "  0",
   "  ;",
   "  series",
   "  <",
   "  seriesCount",
   "  ;",
   "  series",
   "  ++",
   "  )",
   "  {",
   "  nt",
   "  itemCount",
   "  =",
   "  dataset",
   "  .",
   "  getItemCount",
   "  (",
   "  series",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  item",
   "  =",
   "  0",
   "  ;",
   "  item",
   "  <",
   "  itemCount",
   "  ;",
   "  item",
   "  ++",
   "  )",
   "  {",
   "  double",
   "  value",
   "  =",
   "  intervalXYData",
   "  .",
   "  getXValue",
   "  (",
   "  series",
   "  ,",
   "  item",
   "  )",
   "  ;",
   "- double",
   "- value",
   "- =",
   "- intervalXYData",
   "- .",
   "- getXValue",
   "- (",
   "- series",
   "- ,",
   "- item",
   "- )",
   "- ;",
   "  value",
   "  =",
   "  intervalXYData",
   "  .",
   "  getStartXValue",
   "  (",
   "  series",
   "  ,",
   "  item",
   "  )",
   "  ;",
   "  value",
   "  =",
   "  intervalXYData",
   "  .",
   "  getEndXValue",
   "  (",
   "  series",
   "  ,",
   "  item",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  !",
   "  Double",
   "  .",
   "  isNaN",
   "  (",
   "  value",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- !",
   "- Double",
   "- .",
   "- isNaN",
   "- (",
   "- value",
   "- )",
   "- )",
   "- {",
   "- minimum",
   "- =",
   "- Math",
   "- .",
   "- min",
   "- (",
   "- minimum",
   "- ,",
   "- value",
   "- )",
   "- ;",
   "  minimum",
   "  =",
   "  Math",
   "  .",
   "  min",
   "  (",
   "  minimum",
   "  ,",
   "  value",
   "  )",
   "  ;",
   "  maximum",
   "  =",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  maximum",
   "  ,",
   "  value",
   "  )",
   "  ;",
   "- maximum",
   "- =",
   "- Math",
   "- .",
   "- max",
   "- (",
   "- maximum",
   "- ,",
   "- value",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  f",
   "  (",
   "  !",
   "  Double",
   "  .",
   "  isNaN",
   "  (",
   "  lvalue",
   "  )",
   "  )",
   "  {",
   "  inimum",
   "  =",
   "  Math",
   "  .",
   "  min",
   "  (",
   "  minimum",
   "- ,",
   "- lvalue",
   "- )",
   "- ;",
   "- maximum",
   "- =",
   "- Math",
   "- .",
   "- max",
   "- (",
   "- maximum",
   "  ,",
   "  lvalue",
   "  )",
   "  ;",
   "  maximum",
   "  =",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  maximum",
   "  ,",
   "  lvalue",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  !",
   "  Double",
   "  .",
   "  isNaN",
   "  (",
   "  uvalue",
   "  )",
   "  )",
   "  {",
   "  minimum",
   "  =",
   "  Math",
   "  .",
   "  min",
   "  (",
   "  minimum",
   "  ,",
   "  uvalue",
   "  )",
   "  ;",
   "- minimum",
   "- =",
   "- Math",
   "- .",
   "- min",
   "- (",
   "- minimum",
   "- ,",
   "- uvalue",
   "- )",
   "- ;",
   "  aximum",
   "  =",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  maximum",
   "  ,",
   "  uvalue",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 2,
  "changes_set": [
   "  ublic",
   "  static",
   "  Range",
   "  iterateRangeBounds",
   "  (",
   "  XYDataset",
   "  dataset",
   "  ,",
   "  or",
   "  (",
   "  int",
   "  series",
   "  =",
   "  0",
   "  ;",
   "  series",
   "  <",
   "  seriesCount",
   "  ;",
   "  series",
   "  ++",
   "  )",
   "  {",
   "  nt",
   "  itemCount",
   "  =",
   "  dataset",
   "  .",
   "  getItemCount",
   "  (",
   "  series",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  item",
   "  =",
   "  0",
   "  ;",
   "  item",
   "  <",
   "  itemCount",
   "  ;",
   "  item",
   "  ++",
   "  )",
   "  {",
   "  double",
   "  value",
   "  =",
   "  ixyd",
   "  .",
   "  getYValue",
   "  (",
   "  series",
   "  ,",
   "  item",
   "  )",
   "  ;",
   "- double",
   "- value",
   "- =",
   "- ixyd",
   "- .",
   "- getYValue",
   "- (",
   "- series",
   "- ,",
   "- item",
   "- )",
   "- ;",
   "  ouble",
   "  lvalue",
   "  =",
   "  ixyd",
   "  .",
   "  getStartYValue",
   "  (",
   "  series",
   "  ,",
   "  item",
   "  )",
   "  ;",
   "  ouble",
   "  uvalue",
   "  =",
   "  ixyd",
   "  .",
   "  getEndYValue",
   "  (",
   "  series",
   "  ,",
   "  item",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  !",
   "  Double",
   "  .",
   "  isNaN",
   "  (",
   "  value",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- !",
   "- Double",
   "- .",
   "- isNaN",
   "- (",
   "- value",
   "- )",
   "- )",
   "- {",
   "- minimum",
   "- =",
   "- Math",
   "- .",
   "- min",
   "- (",
   "- minimum",
   "- ,",
   "- value",
   "- )",
   "- ;",
   "  minimum",
   "  =",
   "  Math",
   "  .",
   "  min",
   "  (",
   "  minimum",
   "  ,",
   "  value",
   "  )",
   "  ;",
   "  maximum",
   "  =",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  maximum",
   "  ,",
   "  value",
   "  )",
   "  ;",
   "- maximum",
   "- =",
   "- Math",
   "- .",
   "- max",
   "- (",
   "- maximum",
   "- ,",
   "- value",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  f",
   "  (",
   "  !",
   "  Double",
   "  .",
   "  isNaN",
   "  (",
   "  lvalue",
   "  )",
   "  )",
   "  {",
   "  inimum",
   "  =",
   "  Math",
   "  .",
   "  min",
   "  (",
   "  minimum",
   "- ,",
   "- lvalue",
   "- )",
   "- ;",
   "- maximum",
   "- =",
   "- Math",
   "- .",
   "- max",
   "- (",
   "- maximum",
   "  ,",
   "  lvalue",
   "  )",
   "  ;",
   "  maximum",
   "  =",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  maximum",
   "  ,",
   "  lvalue",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  !",
   "  Double",
   "  .",
   "  isNaN",
   "  (",
   "  uvalue",
   "  )",
   "  )",
   "  {",
   "  minimum",
   "  =",
   "  Math",
   "  .",
   "  min",
   "  (",
   "  minimum",
   "  ,",
   "  uvalue",
   "  )",
   "  ;",
   "- minimum",
   "- =",
   "- Math",
   "- .",
   "- min",
   "- (",
   "- minimum",
   "- ,",
   "- uvalue",
   "- )",
   "- ;",
   "  aximum",
   "  =",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  maximum",
   "  ,",
   "  uvalue",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 1,
  "changes_set": [
   "  ublic",
   "  LegendItemCollection",
   "  getLegendItems",
   "  (",
   "  )",
   "  {",
   "  nt",
   "  index",
   "  =",
   "  this",
   "  .",
   "  plot",
   "  .",
   "  getIndexOf",
   "  (",
   "  this",
   "  )",
   "  ;",
   "  ategoryDataset",
   "  dataset",
   "  =",
   "  this",
   "  .",
   "  plot",
   "  .",
   "  getDataset",
   "  (",
   "  index",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  dataset",
   "- ==",
   "+ !=",
   "  null",
   "  )",
   "  {",
   "  if",
   "  (",
   "  dataset",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  eturn",
   "  result",
   "  ;",
   "  nt",
   "  seriesCount",
   "  =",
   "  dataset",
   "  .",
   "  getRowCount",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 12,
  "changes_set": [
   "  ublic",
   "  MultiplePiePlot",
   "  (",
   "  )",
   "  {",
   "  /",
   "  ublic",
   "  MultiplePiePlot",
   "  (",
   "  CategoryDataset",
   "  dataset",
   "  )",
   "  {",
   "  uper",
   "  (",
   "  )",
   "  ;",
   "- setDataset",
   "- (",
   "+ this",
   "+ .",
   "  dataset",
   "- )",
   "+ =",
   "+ dataset",
   "  ;",
   "  setDataset",
   "  (",
   "  dataset",
   "  )",
   "  ;",
   "  iePlot",
   "  piePlot",
   "  =",
   "  new",
   "  PiePlot",
   "  (",
   "  null",
   "  )",
   "  ;",
   "  his",
   "  .",
   "  pieChart",
   "  =",
   "  new",
   "  JFreeChart",
   "  (",
   "  piePlot",
   "  )",
   "  ;",
   "  his",
   "  .",
   "  pieChart",
   "  .",
   "  removeLegend",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 11,
  "changes_set": [
   "  ublic",
   "  static",
   "  boolean",
   "  equal",
   "  (",
   "  GeneralPath",
   "  p1",
   "  ,",
   "  GeneralPath",
   "  p2",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;",
   "  athIterator",
   "  iterator1",
   "  =",
   "  p1",
   "  .",
   "  getPathIterator",
   "  (",
   "  null",
   "  )",
   "  ;",
   "  PathIterator",
   "  iterator2",
   "  =",
   "- p2",
   "+ p1",
   "  .",
   "  getPathIterator",
   "  (",
   "  null",
   "  )",
   "  ;",
   "  PathIterator",
   "  iterator2",
   "  =",
   "  p2",
   "  .",
   "  getPathIterator",
   "  (",
   "  null",
   "  )",
   "  ;",
   "  ouble",
   "  [",
   "  ]",
   "  d1",
   "  =",
   "  new",
   "  double",
   "  [",
   "  6",
   "  ]",
   "  ;",
   "  ouble",
   "  [",
   "  ]",
   "  d2",
   "  =",
   "  new",
   "  double",
   "  [",
   "  6",
   "  ]",
   "  ;",
   "  oolean",
   "  done",
   "  =",
   "  iterator1",
   "  .",
   "  isDone",
   "  (",
   "  )",
   "  &&",
   "  iterator2",
   "  .",
   "  isDone",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 13,
  "changes_set": [
   "  rotected",
   "  Size2D",
   "  arrangeFF",
   "  (",
   "  BlockContainer",
   "  container",
   "  ,",
   "  Graphics2D",
   "  g2",
   "  ,",
   "  [",
   "  3",
   "  ]",
   "  =",
   "  h",
   "  [",
   "  2",
   "  ]",
   "  ;",
   "  f",
   "  (",
   "  this",
   "  .",
   "  rightBlock",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  ectangleConstraint",
   "  c4",
   "  =",
   "  new",
   "  RectangleConstraint",
   "  (",
   "  0.0",
   "  ,",
   "  new",
   "  Range",
   "  (",
   "  0.0",
   "  ,",
   "- Math",
   "- .",
   "- max",
   "- (",
   "  constraint",
   "  .",
   "  getWidth",
   "  (",
   "  )",
   "  -",
   "  w",
   "  [",
   "  2",
   "  ]",
   "- ,",
   "- 0.0",
   "- )",
   "  )",
   "  ,",
   "  new",
   "  Range",
   "  (",
   "  0.0",
   "  ,",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  constraint",
   "  .",
   "  getWidth",
   "  (",
   "  )",
   "  -",
   "  w",
   "  [",
   "  2",
   "  ]",
   "  ,",
   "  0.0",
   "  )",
   "  )",
   "  ,",
   "  engthConstraintType",
   "  .",
   "  RANGE",
   "  ,",
   "  h",
   "  [",
   "  2",
   "  ]",
   "  ,",
   "  null",
   "  ,",
   "  engthConstraintType",
   "  .",
   "  FIXED",
   "  )",
   "  ;",
   "  ize2D",
   "  size",
   "  =",
   "  this",
   "  .",
   "  rightBlock",
   "  .",
   "  arrange",
   "  (",
   "  g2",
   "  ,",
   "  c4",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 18,
  "changes_set": [
   "  rivate",
   "  void",
   "  rebuildIndex",
   "  (",
   "  )",
   "  {",
   "  ublic",
   "  void",
   "  removeValue",
   "  (",
   "  int",
   "  index",
   "  )",
   "  {",
   "  his",
   "  .",
   "  keys",
   "  .",
   "  remove",
   "  (",
   "  index",
   "  )",
   "  ;",
   "  his",
   "  .",
   "  values",
   "  .",
   "  remove",
   "  (",
   "  index",
   "  )",
   "  ;",
   "+ if",
   "+ (",
   "+ index",
   "+ <",
   "+ this",
   "+ .",
   "+ keys",
   "+ .",
   "+ size",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "  ebuildIndex",
   "  (",
   "  )",
   "  ;",
   "+ }",
   "  *",
   "  *",
   "  Removes",
   "  a",
   "  value",
   "  from",
   "  the",
   "  collection",
   "  ."
  ]
 },
 {
  "number": 18,
  "changes_set": [
   "  hrows",
   "  UnknownKeyException",
   "  if",
   "  <",
   "  code",
   "  >",
   "  key",
   "  <",
   "  /",
   "  code",
   "  >",
   "  is",
   "  not",
   "  recognised",
   "  .",
   "  /",
   "  ublic",
   "  void",
   "  removeValue",
   "  (",
   "  Comparable",
   "  key",
   "  )",
   "  {",
   "  nt",
   "  index",
   "  =",
   "  getIndex",
   "  (",
   "  key",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  index",
   "  <",
   "  0",
   "  )",
   "  {",
   "+ return",
   "+ ;",
   "  throw",
   "  new",
   "  UnknownKeyException",
   "  (",
   "  \"The key (\"",
   "  +",
   "- keythrow",
   "- new",
   "- UnknownKeyException",
   "- (",
   "- \"The key (\"",
   "- +",
   "  key",
   "- +",
   "- \") is not recognised.\"",
   "- )",
   "- ;",
   "  +",
   "  \") is not recognised.\"",
   "  )",
   "  ;",
   "  emoveValue",
   "  (",
   "  index",
   "  )",
   "  ;",
   "  *",
   "  *",
   "  Clears",
   "  all",
   "  values",
   "  from",
   "  the",
   "  collection",
   "  ."
  ]
 },
 {
  "number": 18,
  "changes_set": [
   "  ublic",
   "  void",
   "  removeColumn",
   "  (",
   "  int",
   "  columnIndex",
   "  )",
   "  {",
   "  ublic",
   "  void",
   "  removeColumn",
   "  (",
   "  Comparable",
   "  columnKey",
   "  )",
   "  {",
   "  if",
   "  (",
   "  columnKey",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- columnKey",
   "- ==",
   "- null",
   "- )",
   "- {",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"Null 'columnKey' argument.\"",
   "- )",
   "- ;",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Null 'columnKey' argument.\"",
   "  )",
   "  ;",
   "  }",
   "- }",
   "- if",
   "- (",
   "- !",
   "- this",
   "- .",
   "- columnKeys",
   "- .",
   "- contains",
   "- (",
   "- columnKey",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  !",
   "  this",
   "  .",
   "  columnKeys",
   "  .",
   "  contains",
   "  (",
   "  columnKey",
   "  )",
   "  )",
   "  {",
   "  throw",
   "  new",
   "  UnknownKeyException",
   "  (",
   "  \"Unknown key: \"",
   "  +",
   "  columnKey",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- UnknownKeyException",
   "- (",
   "- \"Unknown key: \"",
   "- +",
   "- columnKey",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  terator",
   "  iterator",
   "  =",
   "  this",
   "  .",
   "  rows",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  ;",
   "  hile",
   "  (",
   "  iterator",
   "  .",
   "  hasNext",
   "  (",
   "  )",
   "  )",
   "  {",
   "  efaultKeyedValues",
   "  rowData",
   "  =",
   "  (",
   "  DefaultKeyedValues",
   "  )",
   "  iterator",
   "  .",
   "  next",
   "  (",
   "  )",
   "  ;",
   "  int",
   "  index",
   "  =",
   "  rowData",
   "  .",
   "  getIndex",
   "  (",
   "  columnKey",
   "  )",
   "  ;",
   "- int",
   "- index",
   "- =",
   "- rowData",
   "- .",
   "- getIndex",
   "- (",
   "- columnKey",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- index",
   "- >=",
   "- 0",
   "- )",
   "- {",
   "  if",
   "  (",
   "  index",
   "  >=",
   "  0",
   "  )",
   "  {",
   "  owData",
   "  .",
   "  removeValue",
   "  (",
   "  columnKey",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  his",
   "  .",
   "  columnKeys",
   "  .",
   "  remove",
   "  (",
   "  columnKey",
   "  )",
   "  ;",
   "  *",
   "  *",
   "  Clears",
   "  all",
   "  the",
   "  data",
   "  and",
   "  associated",
   "  keys",
   "  .",
   "  /"
  ]
 },
 {
  "number": 14,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  removeDomainMarker",
   "  (",
   "  int",
   "  index",
   "  ,",
   "  Marker",
   "  marker",
   "  ,",
   "  Layer",
   "  layer",
   "  ,",
   "  arkers",
   "  =",
   "  (",
   "  ArrayList",
   "  )",
   "  this",
   "  .",
   "  backgroundDomainMarkers",
   "  .",
   "  get",
   "  (",
   "  new",
   "  Integer",
   "  (",
   "  ndex",
   "  )",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  markers",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- markers",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "- }",
   "  }",
   "  oolean",
   "  removed",
   "  =",
   "  markers",
   "  .",
   "  remove",
   "  (",
   "  marker",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  removed",
   "  &&",
   "  notify",
   "  )",
   "  {",
   "  ireChangeEvent",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 14,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  removeRangeMarker",
   "  (",
   "  int",
   "  index",
   "  ,",
   "  Marker",
   "  marker",
   "  ,",
   "  Layer",
   "  layer",
   "  ,",
   "  arkers",
   "  =",
   "  (",
   "  ArrayList",
   "  )",
   "  this",
   "  .",
   "  backgroundRangeMarkers",
   "  .",
   "  get",
   "  (",
   "  new",
   "  Integer",
   "  (",
   "  ndex",
   "  )",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  markers",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- markers",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "- }",
   "  }",
   "  oolean",
   "  removed",
   "  =",
   "  markers",
   "  .",
   "  remove",
   "  (",
   "  marker",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  removed",
   "  &&",
   "  notify",
   "  )",
   "  {",
   "  ireChangeEvent",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 14,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  removeDomainMarker",
   "  (",
   "  int",
   "  index",
   "  ,",
   "  Marker",
   "  marker",
   "  ,",
   "  Layer",
   "  layer",
   "  ,",
   "  arkers",
   "  =",
   "  (",
   "  ArrayList",
   "  )",
   "  this",
   "  .",
   "  backgroundDomainMarkers",
   "  .",
   "  get",
   "  (",
   "  new",
   "  Integer",
   "  (",
   "  ndex",
   "  )",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  markers",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- markers",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "- }",
   "  }",
   "  oolean",
   "  removed",
   "  =",
   "  markers",
   "  .",
   "  remove",
   "  (",
   "  marker",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  removed",
   "  &&",
   "  notify",
   "  )",
   "  {",
   "  ireChangeEvent",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 14,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  removeRangeMarker",
   "  (",
   "  int",
   "  index",
   "  ,",
   "  Marker",
   "  marker",
   "  ,",
   "  Layer",
   "  layer",
   "  ,",
   "  arkers",
   "  =",
   "  (",
   "  ArrayList",
   "  )",
   "  this",
   "  .",
   "  backgroundRangeMarkers",
   "  .",
   "  get",
   "  (",
   "  new",
   "  Integer",
   "  (",
   "  ndex",
   "  )",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  markers",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- markers",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "- }",
   "  }",
   "  oolean",
   "  removed",
   "  =",
   "  markers",
   "  .",
   "  remove",
   "  (",
   "  marker",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  removed",
   "  &&",
   "  notify",
   "  )",
   "  {",
   "  ireChangeEvent",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 21,
  "changes_set": [
   "  ublic",
   "  void",
   "  add",
   "  (",
   "  BoxAndWhiskerItem",
   "  item",
   "  ,",
   "  Comparable",
   "  rowKey",
   "  ,",
   "  &",
   "  this",
   "  .",
   "  minimumRangeValueColumn",
   "  ==",
   "  c",
   "  )",
   "  )",
   "  {",
   "  pdateBounds",
   "  (",
   "  )",
   "  ;",
   "  else",
   "  {",
   "- else",
   "- {",
   "  ouble",
   "  minval",
   "  =",
   "  Double",
   "  .",
   "  NaN",
   "  ;",
   "  f",
   "  (",
   "  item",
   "  .",
   "  getMinOutlier",
   "  (",
   "  )",
   "  !=",
   "  null",
   "  )",
   "  {"
  ]
 },
 {
  "number": 21,
  "changes_set": [
   "  lse",
   "  if",
   "  (",
   "  minval",
   "  <",
   "  this",
   "  .",
   "  minimumRangeValue",
   "  )",
   "  {",
   "  his",
   "  .",
   "  minimumRangeValueRow",
   "  =",
   "  r",
   "  ;",
   "  his",
   "  .",
   "  minimumRangeValueColumn",
   "  =",
   "  c",
   "  ;",
   "  }",
   "- }",
   "  his",
   "  .",
   "  rangeBounds",
   "  =",
   "  new",
   "  Range",
   "  (",
   "  this",
   "  .",
   "  minimumRangeValue",
   "  ,",
   "  his",
   "  .",
   "  maximumRangeValue",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 21,
  "changes_set": [
   "  ublic",
   "  List",
   "  getOutliers",
   "  (",
   "  Comparable",
   "  rowKey",
   "  ,",
   "  Comparable",
   "  columnKey",
   "  )",
   "  {",
   "  /",
   "  rivate",
   "  void",
   "  updateBounds",
   "  (",
   "  )",
   "  {",
   "  his",
   "  .",
   "  minimumRangeValue",
   "  =",
   "  Double",
   "  .",
   "  NaN",
   "  ;",
   "  this",
   "  .",
   "  minimumRangeValueRow",
   "  =",
   "  -",
   "  1",
   "  ;",
   "  this",
   "  .",
   "- minimumRangeValueRow",
   "- =",
   "- -",
   "- 1",
   "- ;",
   "- this",
   "- .",
   "  minimumRangeValueColumn",
   "  =",
   "  -",
   "  1",
   "  ;",
   "- this",
   "- .",
   "- minimumRangeValueColumn",
   "- =",
   "- -",
   "- 1",
   "- ;",
   "  his",
   "  .",
   "  maximumRangeValue",
   "  =",
   "  Double",
   "  .",
   "  NaN",
   "  ;",
   "  this",
   "  .",
   "  maximumRangeValueRow",
   "  =",
   "  -",
   "  1",
   "  ;",
   "  this",
   "  .",
   "- maximumRangeValueRow",
   "- =",
   "- -",
   "- 1",
   "- ;",
   "- this",
   "- .",
   "  maximumRangeValueColumn",
   "  =",
   "  -",
   "  1",
   "  ;",
   "- this",
   "- .",
   "- maximumRangeValueColumn",
   "- =",
   "- -",
   "- 1",
   "- ;",
   "  int",
   "  rowCount",
   "  =",
   "  getRowCount",
   "- (",
   "- )",
   "- ;",
   "- int",
   "- rowCount",
   "- =",
   "- getRowCount",
   "- (",
   "- )",
   "- ;",
   "- int",
   "- columnCount",
   "- =",
   "- getColumnCount",
   "  (",
   "  )",
   "  ;",
   "  int",
   "  columnCount",
   "  =",
   "  getColumnCount",
   "  (",
   "  )",
   "  ;",
   "  for",
   "  (",
   "  int",
   "  r",
   "  =",
   "  0",
   "  ;",
   "  r",
   "  <",
   "  rowCount",
   "  ;",
   "  r",
   "  ++",
   "  )",
   "  {",
   "  for",
   "  (",
   "  int",
   "- r",
   "- =",
   "- 0",
   "- ;",
   "- r",
   "- <",
   "- rowCount",
   "- ;",
   "- r",
   "- ++",
   "- )",
   "- {",
   "- for",
   "- (",
   "- int",
   "  c",
   "  =",
   "  0",
   "  ;",
   "  c",
   "  <",
   "  columnCount",
   "  ;",
   "  c",
   "  ++",
   "  )",
   "  {",
   "- for",
   "- (",
   "- int",
   "- c",
   "- =",
   "- 0",
   "- ;",
   "- c",
   "- <",
   "- columnCount",
   "- ;",
   "- c",
   "- ++",
   "- )",
   "- {",
   "- BoxAndWhiskerItem",
   "- item",
   "- =",
   "- getItem",
   "- (",
   "- r",
   "- ,",
   "- c",
   "- )",
   "- ;",
   "  BoxAndWhiskerItem",
   "  item",
   "  =",
   "  getItem",
   "  (",
   "  r",
   "  ,",
   "  c",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  item",
   "  !=",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- item",
   "- !=",
   "- null",
   "- )",
   "- {",
   "- Number",
   "- min",
   "- =",
   "- item",
   "- .",
   "- getMinOutlier",
   "- (",
   "- )",
   "- ;",
   "  Number",
   "  min",
   "  =",
   "  item",
   "  .",
   "  getMinOutlier",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  min",
   "  !=",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "+ double",
   "+ minv",
   "+ =",
   "  min",
   "- !=",
   "- null",
   "- )",
   "- {",
   "- double",
   "- minv",
   "- =",
   "- min",
   "  .",
   "  doubleValue",
   "  (",
   "  )",
   "  ;",
   "- double",
   "- minv",
   "- =",
   "- min",
   "- .",
   "- doubleValue",
   "- (",
   "- )",
   "- ;",
   "  if",
   "  (",
   "  !",
   "  Double",
   "  .",
   "  isNaN",
   "  (",
   "  minv",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "- !",
   "- Double",
   "- .",
   "- isNaN",
   "- (",
   "- minv",
   "- )",
   "- )",
   "- {",
   "- if",
   "- (",
   "  minv",
   "  <",
   "  this",
   "  .",
   "  minimumRangeValue",
   "  ||",
   "  Double",
   "  .",
   "  isNaN",
   "  (",
   "- if",
   "- (",
   "- minv",
   "- <",
   "  this",
   "  .",
   "  minimumRangeValue",
   "- ||",
   "- Double",
   "- .",
   "- isNaN",
   "- (",
   "- this",
   "- .",
   "- minimumRangeValue",
   "  )",
   "  )",
   "  {",
   "- this",
   "- .",
   "- minimumRangeValue",
   "- )",
   "- )",
   "- {",
   "- this",
   "- .",
   "- minimumRangeValue",
   "- =",
   "- minv",
   "- ;",
   "  this",
   "  .",
   "  minimumRangeValue",
   "  =",
   "  minv",
   "  ;",
   "  this",
   "  .",
   "  minimumRangeValueRow",
   "  =",
   "  r",
   "  ;",
   "  this",
   "  .",
   "- minimumRangeValueRow",
   "- =",
   "- r",
   "- ;",
   "- this",
   "- .",
   "  minimumRangeValueColumn",
   "  =",
   "  c",
   "  ;",
   "- this",
   "- .",
   "- minimumRangeValueColumn",
   "- =",
   "- c",
   "- ;",
   "  }",
   "  }",
   "  }",
   "- }",
   "- }",
   "- }",
   "- Number",
   "- max",
   "- =",
   "- item",
   "- .",
   "- getMaxOutlier",
   "- (",
   "- )",
   "- ;",
   "  Number",
   "  max",
   "  =",
   "  item",
   "  .",
   "  getMaxOutlier",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  max",
   "  !=",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "+ double",
   "+ maxv",
   "+ =",
   "  max",
   "- !=",
   "- null",
   "- )",
   "- {",
   "- double",
   "- maxv",
   "- =",
   "- max",
   "  .",
   "  doubleValue",
   "  (",
   "  )",
   "  ;",
   "- double",
   "- maxv",
   "- =",
   "- max",
   "- .",
   "- doubleValue",
   "- (",
   "- )",
   "- ;",
   "  if",
   "  (",
   "  !",
   "  Double",
   "  .",
   "  isNaN",
   "  (",
   "  maxv",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "- !",
   "- Double",
   "- .",
   "- isNaN",
   "- (",
   "- maxv",
   "- )",
   "- )",
   "- {",
   "- if",
   "- (",
   "  maxv",
   "  >",
   "  this",
   "  .",
   "  maximumRangeValue",
   "  ||",
   "  Double",
   "  .",
   "  isNaN",
   "  (",
   "- if",
   "- (",
   "- maxv",
   "- >",
   "  this",
   "  .",
   "  maximumRangeValue",
   "- ||",
   "- Double",
   "- .",
   "- isNaN",
   "- (",
   "- this",
   "- .",
   "- maximumRangeValue",
   "  )",
   "  )",
   "  {",
   "- this",
   "- .",
   "- maximumRangeValue",
   "- )",
   "- )",
   "- {",
   "- this",
   "- .",
   "- maximumRangeValue",
   "- =",
   "- maxv",
   "- ;",
   "  this",
   "  .",
   "  maximumRangeValue",
   "  =",
   "  maxv",
   "  ;",
   "  this",
   "  .",
   "  maximumRangeValueRow",
   "  =",
   "  r",
   "  ;",
   "  this",
   "  .",
   "- maximumRangeValueRow",
   "- =",
   "- r",
   "- ;",
   "- this",
   "- .",
   "  maximumRangeValueColumn",
   "  =",
   "  c",
   "  ;",
   "- this",
   "- .",
   "- maximumRangeValueColumn",
   "- =",
   "- c",
   "- ;",
   "- }",
   "- }",
   "- }",
   "- }",
   "- }",
   "- }",
   "  }",
   "  }",
   "  }",
   "  }",
   "  }",
   "  }",
   "  *",
   "  *"
  ]
 },
 {
  "number": 15,
  "changes_set": [
   "  eturn",
   "  The",
   "  percent",
   "  .",
   "  /",
   "  ublic",
   "  double",
   "  getMaximumExplodePercent",
   "  (",
   "  )",
   "  {",
   "  if",
   "  (",
   "  this",
   "  .",
   "  dataset",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- this",
   "- .",
   "- dataset",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  return",
   "  0.0",
   "  ;",
   "- return",
   "- 0.0",
   "- ;",
   "- }",
   "  }",
   "  ouble",
   "  result",
   "  =",
   "  0.0",
   "  ;",
   "  terator",
   "  iterator",
   "  =",
   "  this",
   "  .",
   "  dataset",
   "  .",
   "  getKeys",
   "  (",
   "  )",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  ;",
   "  hile",
   "  (",
   "  iterator",
   "  .",
   "  hasNext",
   "  (",
   "  )",
   "  )",
   "  {"
  ]
 },
 {
  "number": 15,
  "changes_set": [
   "  ublic",
   "  PiePlotState",
   "  initialise",
   "  (",
   "  Graphics2D",
   "  g2",
   "  ,",
   "  Rectangle2D",
   "  plotArea",
   "  ,",
   "  iePlotState",
   "  state",
   "  =",
   "  new",
   "  PiePlotState",
   "  (",
   "  info",
   "  )",
   "  ;",
   "  tate",
   "  .",
   "  setPassesRequired",
   "  (",
   "  2",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  this",
   "  .",
   "  dataset",
   "  !=",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- this",
   "- .",
   "- dataset",
   "- !=",
   "- null",
   "- )",
   "- {",
   "  tate",
   "  .",
   "  setTotal",
   "  (",
   "  DatasetUtilities",
   "  .",
   "  calculatePieDatasetTotal",
   "  (",
   "  lot",
   "  .",
   "  getDataset",
   "  (",
   "  )",
   "  )",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  tate",
   "  .",
   "  setLatestAngle",
   "  (",
   "  plot",
   "  .",
   "  getStartAngle",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  eturn",
   "  state",
   "  ;"
  ]
 },
 {
  "number": 16,
  "changes_set": [
   "  ublic",
   "  DefaultIntervalCategoryDataset",
   "  (",
   "  Comparable",
   "  [",
   "  ]",
   "  seriesKeys",
   "  ,",
   "  lse",
   "  {",
   "  this",
   "  .",
   "  seriesKeys",
   "  =",
   "- new",
   "- Comparable",
   "- [",
   "- 0",
   "- ]",
   "+ null",
   "+ ;",
   "+ this",
   "+ .",
   "+ categoryKeys",
   "+ =",
   "+ null",
   "  ;",
   "  this",
   "  .",
   "  seriesKeys",
   "  =",
   "  new",
   "  Comparable",
   "  [",
   "  0",
   "  ]",
   "  ;",
   "  this",
   "  .",
   "  categoryKeys",
   "  =",
   "  new",
   "  Comparable",
   "  [",
   "  0",
   "  ]",
   "  ;",
   "- this",
   "- .",
   "- categoryKeys",
   "- =",
   "- new",
   "- Comparable",
   "- [",
   "- 0",
   "- ]",
   "- ;"
  ]
 },
 {
  "number": 16,
  "changes_set": [
   "  ublic",
   "  void",
   "  setCategoryKeys",
   "  (",
   "  Comparable",
   "  [",
   "  ]",
   "  categoryKeys",
   "  )",
   "  {",
   "  f",
   "  (",
   "  categoryKeys",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Null 'categoryKeys' argument.\"",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  categoryKeys",
   "  .",
   "  length",
   "  !=",
   "- getCategoryCount",
   "- (",
   "- )",
   "+ this",
   "+ .",
   "+ startData",
   "+ [",
   "+ 0",
   "+ ]",
   "+ .",
   "+ length",
   "  )",
   "  {",
   "  if",
   "  (",
   "  categoryKeys",
   "  .",
   "  length",
   "  !=",
   "  getCategoryCount",
   "  (",
   "  )",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  The",
   "  number",
   "  of",
   "  categories",
   "  does",
   "  not",
   "  match",
   "  the",
   "  data",
   "  ."
  ]
 },
 {
  "number": 17,
  "changes_set": [
   "  ublic",
   "  void",
   "  delete",
   "  (",
   "  int",
   "  start",
   "  ,",
   "  int",
   "  end",
   "  )",
   "  {",
   "  subclasses",
   "  may",
   "  differ",
   "  .",
   "  /",
   "  ublic",
   "  Object",
   "  clone",
   "  (",
   "  )",
   "  throws",
   "  CloneNotSupportedException",
   "  {",
   "- TimeSeries",
   "+ Object",
   "  clone",
   "  =",
   "+ createCopy",
   "  (",
   "- TimeSeries",
   "+ 0",
   "+ ,",
   "+ getItemCount",
   "+ (",
   "  )",
   "+ -",
   "+ 1",
   "- super",
   "- .",
   "- clone",
   "- (",
   "  )",
   "  ;",
   "  TimeSeries",
   "  clone",
   "  =",
   "  (",
   "  TimeSeries",
   "  )",
   "  super",
   "  .",
   "  clone",
   "  (",
   "  )",
   "  ;",
   "  clone",
   "  .",
   "  data",
   "  =",
   "  (",
   "  List",
   "  )",
   "  ObjectUtilities",
   "  .",
   "  deepClone",
   "  (",
   "  this",
   "  .",
   "  data",
   "  )",
   "  ;",
   "- clone",
   "- .",
   "- data",
   "- =",
   "- (",
   "- List",
   "- )",
   "- ObjectUtilities",
   "- .",
   "- deepClone",
   "- (",
   "- this",
   "- .",
   "- data",
   "- )",
   "- ;",
   "  eturn",
   "  clone",
   "  ;"
  ]
 },
 {
  "number": 20,
  "changes_set": [
   "  ublic",
   "  ValueMarker",
   "  (",
   "  double",
   "  value",
   "  ,",
   "  Paint",
   "  paint",
   "  ,",
   "  Stroke",
   "  stroke",
   "  )",
   "  {",
   "  /",
   "  ublic",
   "  ValueMarker",
   "  (",
   "  double",
   "  value",
   "  ,",
   "  Paint",
   "  paint",
   "  ,",
   "  Stroke",
   "  stroke",
   "  ,",
   "  aint",
   "  outlinePaint",
   "  ,",
   "  Stroke",
   "  outlineStroke",
   "  ,",
   "  float",
   "  alpha",
   "  )",
   "  {",
   "  super",
   "  (",
   "  paint",
   "  ,",
   "  stroke",
   "  ,",
   "- outlinePaint",
   "+ paint",
   "  ,",
   "- outlineStroke",
   "+ stroke",
   "  ,",
   "  alpha",
   "  )",
   "  ;",
   "  super",
   "  (",
   "  paint",
   "  ,",
   "  stroke",
   "  ,",
   "  outlinePaint",
   "  ,",
   "  outlineStroke",
   "  ,",
   "  alpha",
   "  )",
   "  ;",
   "  his",
   "  .",
   "  value",
   "  =",
   "  value",
   "  ;"
  ]
 },
 {
  "number": 19,
  "changes_set": [
   "  ince",
   "  1.0",
   "  .3",
   "  /",
   "  ublic",
   "  int",
   "  getDomainAxisIndex",
   "  (",
   "  CategoryAxis",
   "  axis",
   "  )",
   "  {",
   "  if",
   "  (",
   "  axis",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- axis",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Null 'axis' argument.\"",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"Null 'axis' argument.\"",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  this",
   "  .",
   "  domainAxes",
   "  .",
   "  indexOf",
   "  (",
   "  axis",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 19,
  "changes_set": [
   "  ince",
   "  1.0",
   "  .7",
   "  /",
   "  ublic",
   "  int",
   "  getRangeAxisIndex",
   "  (",
   "  ValueAxis",
   "  axis",
   "  )",
   "  {",
   "  if",
   "  (",
   "  axis",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- axis",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Null 'axis' argument.\"",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"Null 'axis' argument.\"",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  nt",
   "  result",
   "  =",
   "  this",
   "  .",
   "  rangeAxes",
   "  .",
   "  indexOf",
   "  (",
   "  axis",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  result",
   "  <",
   "  0",
   "  )",
   "  {"
  ]
 },
 {
  "number": 22,
  "changes_set": [
   "  ublic",
   "  Object",
   "  getObject",
   "  (",
   "  Comparable",
   "  rowKey",
   "  ,",
   "  Comparable",
   "  columnKey",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  UnknownKeyException",
   "  (",
   "  \"Column key (\"",
   "  +",
   "  columnKey",
   "  \") not recognised.\"",
   "  )",
   "  ;",
   "- \") not recognised.\"",
   "+ if",
   "+ (",
   "+ row",
   "+ >=",
   "+ 0",
   "  )",
   "- ;",
   "+ {",
   "  eyedObjects",
   "  rowData",
   "  =",
   "  (",
   "  KeyedObjects",
   "  )",
   "  this",
   "  .",
   "  rows",
   "  .",
   "  get",
   "  (",
   "  row",
   "  )",
   "  ;",
   "+ return",
   "- int",
   "- index",
   "- =",
   "  rowData",
   "  .",
   "- getIndex",
   "+ getObject",
   "  (",
   "  columnKey",
   "  )",
   "  ;",
   "  int",
   "  index",
   "  =",
   "  rowData",
   "  .",
   "  getIndex",
   "  (",
   "  columnKey",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  index",
   "  >=",
   "  0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- index",
   "- >=",
   "- 0",
   "- )",
   "- {",
   "- return",
   "- rowData",
   "- .",
   "- getObject",
   "- (",
   "- index",
   "- )",
   "- ;",
   "  return",
   "  rowData",
   "  .",
   "  getObject",
   "  (",
   "  index",
   "  )",
   "  ;",
   "  lse",
   "  {",
   "  eturn",
   "  null",
   "  ;"
  ]
 },
 {
  "number": 22,
  "changes_set": [
   "  ublic",
   "  void",
   "  removeObject",
   "  (",
   "  Comparable",
   "  rowKey",
   "  ,",
   "  Comparable",
   "  columnKey",
   "  )",
   "  {",
   "  /",
   "  2.",
   "  check",
   "  whether",
   "  the",
   "  column",
   "  is",
   "  now",
   "  empty",
   "  .",
   "  allNull",
   "  =",
   "  true",
   "- ;",
   "- allNull",
   "- =",
   "- true",
   "- ;",
   "- for",
   "- (",
   "- int",
   "- item",
   "- =",
   "- 0",
   "- ,",
   "- itemCount",
   "- =",
   "- this",
   "- .",
   "- rows",
   "- .",
   "- size",
   "- (",
   "- )",
   "- ;",
   "- item",
   "- <",
   "- itemCount",
   "  ;",
   "  for",
   "  (",
   "  int",
   "  item",
   "  =",
   "  0",
   "  ,",
   "  itemCount",
   "  =",
   "  this",
   "  .",
   "  rows",
   "  .",
   "  size",
   "  (",
   "  )",
   "  ;",
   "  item",
   "  <",
   "  itemCount",
   "  ;",
   "  item",
   "  ++",
   "  )",
   "  {",
   "- item",
   "- ++",
   "- )",
   "- {",
   "  row",
   "  =",
   "  (",
   "  KeyedObjects",
   "  )",
   "  this",
   "  .",
   "  rows",
   "  .",
   "  get",
   "  (",
   "  item",
   "- )",
   "- ;",
   "- row",
   "- =",
   "- (",
   "- KeyedObjects",
   "- )",
   "- this",
   "- .",
   "- rows",
   "- .",
   "- get",
   "- (",
   "- item",
   "- )",
   "- ;",
   "- int",
   "- columnIndex",
   "- =",
   "- row",
   "- .",
   "- getIndex",
   "- (",
   "- columnKey",
   "  )",
   "  ;",
   "  int",
   "  columnIndex",
   "  =",
   "  row",
   "  .",
   "  getIndex",
   "  (",
   "  columnKey",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  columnIndex",
   "  >=",
   "  0",
   "  &&",
   "  row",
   "  .",
   "  getObject",
   "  (",
   "  columnIndex",
   "  )",
   "  !=",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- columnIndex",
   "- >=",
   "- 0",
   "- &&",
   "- row",
   "- .",
   "- getObject",
   "- (",
   "- columnIndex",
   "- )",
   "- !=",
   "- null",
   "- )",
   "- {",
   "- allNull",
   "- =",
   "- false",
   "- ;",
   "  allNull",
   "  =",
   "  false",
   "  ;",
   "  break",
   "  ;",
   "- break",
   "- ;",
   "  }",
   "  }",
   "- }",
   "- }",
   "- if",
   "- (",
   "- allNull",
   "- )",
   "- {",
   "  if",
   "  (",
   "  allNull",
   "  )",
   "  {",
   "  for",
   "  (",
   "  int",
   "  item",
   "  =",
   "  0",
   "  ,",
   "  itemCount",
   "  =",
   "  this",
   "  .",
   "  rows",
   "  .",
   "  size",
   "  (",
   "  )",
   "  ;",
   "  item",
   "  <",
   "  itemCount",
   "  ;",
   "- for",
   "- (",
   "- int",
   "- item",
   "- =",
   "- 0",
   "- ,",
   "- itemCount",
   "- =",
   "- this",
   "- .",
   "- rows",
   "- .",
   "- size",
   "- (",
   "- )",
   "- ;",
   "- item",
   "- <",
   "- itemCount",
   "- ;",
   "  item",
   "  ++",
   "  )",
   "  {",
   "- item",
   "- ++",
   "- )",
   "- {",
   "- row",
   "- =",
   "- (",
   "- KeyedObjects",
   "- )",
   "- this",
   "- .",
   "- rows",
   "- .",
   "- get",
   "- (",
   "- item",
   "- )",
   "- ;",
   "  row",
   "  =",
   "  (",
   "  KeyedObjects",
   "  )",
   "  this",
   "  .",
   "  rows",
   "  .",
   "  get",
   "  (",
   "  item",
   "  )",
   "  ;",
   "  int",
   "  columnIndex",
   "  =",
   "  row",
   "  .",
   "  getIndex",
   "  (",
   "  columnKey",
   "  )",
   "  ;",
   "- int",
   "- columnIndex",
   "- =",
   "- row",
   "- .",
   "- getIndex",
   "- (",
   "- columnKey",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- columnIndex",
   "- >=",
   "- 0",
   "- )",
   "- {",
   "  if",
   "  (",
   "  columnIndex",
   "  >=",
   "  0",
   "  )",
   "  {",
   "  row",
   "  .",
   "  removeValue",
   "  (",
   "  columnIndex",
   "  )",
   "  ;",
   "- row",
   "- .",
   "- removeValue",
   "- (",
   "- columnIndex",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  this",
   "  .",
   "  columnKeys",
   "  .",
   "  remove",
   "  (",
   "  columnKey",
   "  )",
   "  ;",
   "- this",
   "- .",
   "- columnKeys",
   "- .",
   "- remove",
   "- (",
   "- columnKey",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  *",
   "  *"
  ]
 },
 {
  "number": 22,
  "changes_set": [
   "  ublic",
   "  void",
   "  removeRow",
   "  (",
   "  int",
   "  rowIndex",
   "  )",
   "  {",
   "  /",
   "  ublic",
   "  void",
   "  removeRow",
   "  (",
   "  Comparable",
   "  rowKey",
   "  )",
   "  {",
   "  nt",
   "  index",
   "  =",
   "  getRowIndex",
   "  (",
   "  rowKey",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  index",
   "  <",
   "  0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- index",
   "- <",
   "- 0",
   "- )",
   "- {",
   "  throw",
   "- new",
   "- UnknownKeyException",
   "- (",
   "- \"Row key (\"",
   "- +",
   "- rowKeythrow",
   "  new",
   "  UnknownKeyException",
   "  (",
   "  \"Row key (\"",
   "  +",
   "  rowKey",
   "  +",
   "  \") not recognised.\"",
   "  )",
   "  ;",
   "- +",
   "- \") not recognised.\"",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  emoveRow",
   "  (",
   "  index",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 22,
  "changes_set": [
   "  ublic",
   "  void",
   "  removeColumn",
   "  (",
   "  Comparable",
   "  columnKey",
   "  )",
   "  {",
   "  terator",
   "  iterator",
   "  =",
   "  this",
   "  .",
   "  rows",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  ;",
   "  hile",
   "  (",
   "  iterator",
   "  .",
   "  hasNext",
   "  (",
   "  )",
   "  )",
   "  {",
   "  eyedObjects",
   "  rowData",
   "  =",
   "  (",
   "  KeyedObjects",
   "  )",
   "  iterator",
   "  .",
   "  next",
   "  (",
   "  )",
   "  ;",
   "- int",
   "- i",
   "- =",
   "  rowData",
   "  .",
   "- getIndex",
   "+ removeValue",
   "  (",
   "  columnKey",
   "  )",
   "  ;",
   "  int",
   "  i",
   "  =",
   "  rowData",
   "  .",
   "  getIndex",
   "  (",
   "  columnKey",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  i",
   "  >=",
   "  0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- i",
   "- >=",
   "- 0",
   "- )",
   "- {",
   "  rowData",
   "  .",
   "  removeValue",
   "  (",
   "  i",
   "  )",
   "  ;",
   "- rowData",
   "- .",
   "- removeValue",
   "- (",
   "- i",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  his",
   "  .",
   "  columnKeys",
   "  .",
   "  remove",
   "  (",
   "  columnKey",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 26,
  "changes_set": [
   "  lse",
   "  if",
   "  (",
   "  edge",
   "  ==",
   "  RectangleEdge",
   "  .",
   "  RIGHT",
   "  )",
   "  {",
   "  f",
   "  (",
   "  plotState",
   "  !=",
   "  null",
   "  &&",
   "  hotspot",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  hartRenderingInfo",
   "  owner",
   "  =",
   "  plotState",
   "  .",
   "  getOwner",
   "  (",
   "  )",
   "  ;",
   "- if",
   "- (",
   "- owner",
   "- !=",
   "- null",
   "- )",
   "- {",
   "  if",
   "  (",
   "  owner",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  ntityCollection",
   "  entities",
   "  =",
   "  owner",
   "  .",
   "  getEntityCollection",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  entities",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  ntities",
   "  .",
   "  add",
   "  (",
   "  new",
   "  AxisLabelEntity",
   "  (",
   "  this",
   "  ,",
   "  hotspot",
   "  ,",
   "  his",
   "  .",
   "  labelToolTip",
   "  ,",
   "  this",
   "  .",
   "  labelURL",
   "  )",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  eturn",
   "  state",
   "  ;"
  ]
 },
 {
  "number": 25,
  "changes_set": [
   "  rotected",
   "  void",
   "  drawHorizontalItem",
   "  (",
   "  Graphics2D",
   "  g2",
   "  ,",
   "  /",
   "  BAR",
   "  Xumber",
   "  meanValue",
   "  =",
   "  dataset",
   "  .",
   "  getMeanValue",
   "  (",
   "  row",
   "  ,",
   "  column",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  meanValue",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- meanValue",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  return",
   "  ;",
   "- return",
   "- ;",
   "- }",
   "  }",
   "  ouble",
   "  value",
   "  =",
   "  meanValue",
   "  .",
   "  doubleValue",
   "  (",
   "  )",
   "  ;",
   "  ouble",
   "  base",
   "  =",
   "  0.0",
   "  ;"
  ]
 },
 {
  "number": 25,
  "changes_set": [
   "  rotected",
   "  void",
   "  drawVerticalItem",
   "  (",
   "  Graphics2D",
   "  g2",
   "  ,",
   "  /",
   "  BAR",
   "  Yumber",
   "  meanValue",
   "  =",
   "  dataset",
   "  .",
   "  getMeanValue",
   "  (",
   "  row",
   "  ,",
   "  column",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  meanValue",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- meanValue",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  return",
   "  ;",
   "- return",
   "- ;",
   "- }",
   "  }",
   "  ouble",
   "  value",
   "  =",
   "  meanValue",
   "  .",
   "  doubleValue",
   "  (",
   "  )",
   "  ;",
   "  ouble",
   "  base",
   "  =",
   "  0.0",
   "  ;"
  ]
 },
 {
  "number": 23,
  "changes_set": [
   "  ince",
   "  1.0",
   "  .7",
   "  /",
   "- public",
   "- boolean",
   "- equals",
   "- (",
   "- Object",
   "- obj",
   "- )",
   "- {",
   "  public",
   "  boolean",
   "  equals",
   "  (",
   "  Object",
   "  obj",
   "  )",
   "  {",
   "  if",
   "  (",
   "  obj",
   "  ==",
   "  this",
   "  )",
   "  {",
   "- if",
   "- (",
   "- obj",
   "- ==",
   "- this",
   "- )",
   "- {",
   "- return",
   "- true",
   "- ;",
   "  return",
   "  true",
   "  ;",
   "  }",
   "- }",
   "- if",
   "- (",
   "- !",
   "- (",
   "- obj",
   "- instanceof",
   "- MinMaxCategoryRenderer",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  !",
   "  (",
   "  obj",
   "  instanceof",
   "  MinMaxCategoryRenderer",
   "  )",
   "  )",
   "  {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "  }",
   "- }",
   "- MinMaxCategoryRenderer",
   "- that",
   "- =",
   "- (",
   "- MinMaxCategoryRenderer",
   "- )",
   "- obj",
   "- ;",
   "  MinMaxCategoryRenderer",
   "  that",
   "  =",
   "  (",
   "  MinMaxCategoryRenderer",
   "  )",
   "  obj",
   "  ;",
   "  if",
   "  (",
   "  this",
   "  .",
   "  plotLines",
   "  !=",
   "  that",
   "  .",
   "  plotLines",
   "  )",
   "  {",
   "- if",
   "- (",
   "- this",
   "- .",
   "- plotLines",
   "- !=",
   "- that",
   "- .",
   "- plotLines",
   "- )",
   "- {",
   "- return",
   "- false",
   "- ;",
   "  return",
   "  false",
   "  ;",
   "  }",
   "- }",
   "- if",
   "- (",
   "- !",
   "- PaintUtilities",
   "- .",
   "- equal",
   "- (",
   "- this",
   "- .",
   "- groupPaint",
   "- ,",
   "- that",
   "- .",
   "- groupPaint",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  !",
   "  PaintUtilities",
   "  .",
   "  equal",
   "  (",
   "  this",
   "  .",
   "  groupPaint",
   "  ,",
   "  that",
   "  .",
   "  groupPaint",
   "  )",
   "  )",
   "  {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "  }",
   "- }",
   "- if",
   "- (",
   "- !",
   "- this",
   "- .",
   "- groupStroke",
   "- .",
   "- equals",
   "- (",
   "- that",
   "- .",
   "- groupStroke",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  !",
   "  this",
   "  .",
   "  groupStroke",
   "  .",
   "  equals",
   "  (",
   "  that",
   "  .",
   "  groupStroke",
   "  )",
   "  )",
   "  {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "- }",
   "  }",
   "  return",
   "  super",
   "  .",
   "  equals",
   "  (",
   "  obj",
   "  )",
   "  ;",
   "- return",
   "- super",
   "- .",
   "- equals",
   "- (",
   "- obj",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  *",
   "  *",
   "  Returns",
   "  an",
   "  icon",
   "  ."
  ]
 },
 {
  "number": 24,
  "changes_set": [
   "  ublic",
   "  double",
   "  getUpperBound",
   "  (",
   "  )",
   "  {",
   "  ublic",
   "  Paint",
   "  getPaint",
   "  (",
   "  double",
   "  value",
   "  )",
   "  {",
   "  ouble",
   "  v",
   "  =",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  value",
   "  ,",
   "  this",
   "  .",
   "  lowerBound",
   "  )",
   "  ;",
   "  =",
   "  Math",
   "  .",
   "  min",
   "  (",
   "  v",
   "  ,",
   "  this",
   "  .",
   "  upperBound",
   "  )",
   "  ;",
   "  int",
   "  g",
   "  =",
   "  (",
   "  int",
   "  )",
   "  (",
   "  (",
   "- v",
   "+ value",
   "  -",
   "  this",
   "  .",
   "  lowerBound",
   "  )",
   "  /",
   "  (",
   "  this",
   "  .",
   "  upperBoundint",
   "  g",
   "  =",
   "  (",
   "  int",
   "  )",
   "  (",
   "  (",
   "  v",
   "  -",
   "  this",
   "  .",
   "  lowerBound",
   "  )",
   "  /",
   "  (",
   "  this",
   "  .",
   "- upperBoundeturn",
   "+ upperBoundthis",
   "+ .",
   "+ lowerBound",
   "+ )",
   "+ *",
   "+ 255.0",
   "+ )",
   "+ ;",
   "+ eturn",
   "  new",
   "  Color",
   "  (",
   "  g",
   "  ,",
   "  g",
   "  ,",
   "  g",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 3,
  "changes_set": [
   "  ublic",
   "  void",
   "  enterScope",
   "  (",
   "  NodeTraversal",
   "  t",
   "  )",
   "  {",
   "  eachingUses",
   "  =",
   "  new",
   "  MaybeReachingVariableUse",
   "  (",
   "  cfg",
   "  ,",
   "  t",
   "  .",
   "  getScope",
   "  (",
   "  )",
   "  ,",
   "  compiler",
   "  )",
   "  ;",
   "  eachingUses",
   "  .",
   "  analyze",
   "  (",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  Candidate",
   "  c",
   "  :",
   "  candidates",
   "  )",
   "  {",
   "  if",
   "  (",
   "  c",
   "  .",
   "  canInline",
   "  (",
   "- t",
   "- .",
   "- getScope",
   "- (",
   "- )",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  c",
   "  .",
   "  canInline",
   "  (",
   "  t",
   "  .",
   "  getScope",
   "  (",
   "  )",
   "  )",
   "  )",
   "  {",
   "  .",
   "  inlineVariable",
   "  (",
   "  )",
   "  ;",
   "  /",
   "  If",
   "  definition",
   "  c",
   "  has",
   "  dependencies",
   "  ,",
   "  then",
   "  inlining",
   "  it",
   "  may",
   "  have"
  ]
 },
 {
  "number": 3,
  "changes_set": [
   "  rivate",
   "  Node",
   "  getDefCfgNode",
   "  (",
   "  )",
   "  {",
   "  eturn",
   "  defMetadata",
   "  .",
   "  node",
   "  ;",
   "  private",
   "  boolean",
   "  canInline",
   "  (",
   "- final",
   "- Scope",
   "- scope",
   "  )",
   "  {",
   "  private",
   "  boolean",
   "  canInline",
   "  (",
   "  final",
   "  Scope",
   "  scope",
   "  )",
   "  {",
   "  /",
   "  Cannot",
   "  inline",
   "  a",
   "  parameter",
   "  .",
   "  f",
   "  (",
   "  getDefCfgNode",
   "  (",
   "  )",
   "  .",
   "  isFunction",
   "  (",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;"
  ]
 },
 {
  "number": 3,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  apply",
   "  (",
   "  Node",
   "  input",
   "  )",
   "  {",
   "  ase",
   "  Token",
   "  .",
   "  REGEXP",
   "  :",
   "  ase",
   "  Token",
   "  .",
   "  NEW",
   "  :",
   "  eturn",
   "  true",
   "  ;",
   "  case",
   "  Token",
   "  .",
   "  NAME",
   "  :",
   "- case",
   "- Token",
   "- .",
   "- NAME",
   "- :",
   "- Var",
   "- var",
   "- =",
   "- scope",
   "- .",
   "- getOwnSlot",
   "- (",
   "- input",
   "- .",
   "- getString",
   "- (",
   "- )",
   "- )",
   "- ;",
   "  Var",
   "  var",
   "  =",
   "  scope",
   "  .",
   "  getOwnSlot",
   "  (",
   "  input",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  var",
   "  !=",
   "- nullif",
   "- (",
   "- var",
   "- !=",
   "  null",
   "- &&",
   "- var",
   "- .",
   "- getParentNode",
   "- (",
   "- )",
   "- .",
   "- isCatch",
   "- (",
   "- )",
   "- )",
   "- {",
   "  &&",
   "  var",
   "  .",
   "  getParentNode",
   "  (",
   "  )",
   "  .",
   "  isCatch",
   "  (",
   "  )",
   "  )",
   "  {",
   "  return",
   "  true",
   "  ;",
   "- return",
   "- true",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  false",
   "  ;"
  ]
 },
 {
  "number": 7,
  "changes_set": [
   "  ublic",
   "  JSType",
   "  caseNumberType",
   "  (",
   "  )",
   "  {",
   "  ublic",
   "  JSType",
   "  caseObjectType",
   "  (",
   "  ObjectType",
   "  type",
   "  )",
   "  {",
   "  f",
   "  (",
   "  value",
   "  .",
   "  equals",
   "  (",
   "  \"function\"",
   "  )",
   "  )",
   "  {",
   "  SType",
   "  ctorType",
   "  =",
   "  getNativeType",
   "  (",
   "  U2U_CONSTRUCTOR_TYPE",
   "  )",
   "  ;",
   "- if",
   "+ return",
   "+ resultEqualsValue",
   "+ &&",
   "+ ctorType",
   "+ .",
   "+ isSubtype",
   "  (",
   "- resultEqualsValue",
   "+ type",
   "  )",
   "- {",
   "+ ?",
   "+ ctorType",
   "+ :",
   "+ null",
   "+ ;",
   "  if",
   "  (",
   "  resultEqualsValue",
   "  )",
   "  {",
   "  /",
   "  Objects",
   "  are",
   "  restricted",
   "  to",
   "  \"Function\"",
   "  ,",
   "  subtypes",
   "  are",
   "  leftreturn",
   "  ctorType",
   "  .",
   "  getGreatestSubtype",
   "  (",
   "  type",
   "  )",
   "  ;",
   "- return",
   "- ctorType",
   "- .",
   "- getGreatestSubtype",
   "- (",
   "- type",
   "- )",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  /",
   "  Only",
   "  filter",
   "  out",
   "  subtypes",
   "  of",
   "  \"function\"",
   "  return",
   "  type",
   "  .",
   "  isSubtype",
   "  (",
   "  ctorType",
   "  )",
   "  ?",
   "  null",
   "  :",
   "  type",
   "  ;",
   "- return",
   "- type",
   "- .",
   "- isSubtype",
   "- (",
   "- ctorType",
   "- )",
   "- ?",
   "- null",
   "- :",
   "- type",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  matchesExpectation",
   "  (",
   "  \"object\"",
   "  )",
   "  ?",
   "  type",
   "  :",
   "  null",
   "  ;"
  ]
 },
 {
  "number": 5,
  "changes_set": [
   "  rivate",
   "  boolean",
   "  isInlinableObject",
   "  (",
   "  List",
   "  <",
   "  Reference",
   "  >",
   "  refs",
   "  )",
   "  {",
   "  /",
   "  Deleting",
   "  a",
   "  property",
   "  has",
   "  different",
   "  semantics",
   "  from",
   "  deleting",
   "  /",
   "  a",
   "  variable",
   "  ,",
   "  so",
   "  deleted",
   "  properties",
   "  should",
   "  not",
   "  be",
   "  inlined",
   "  .",
   "  if",
   "  (",
   "  gramps",
   "  .",
   "  isDelProp",
   "  (",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- gramps",
   "- .",
   "- isDelProp",
   "- (",
   "- )",
   "- )",
   "- {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  NOTE",
   "  (",
   "  nicksantos",
   "  )",
   "  :",
   "  This",
   "  pass",
   "  object",
   "  -",
   "  splitting",
   "  algorithm",
   "  has",
   "  /",
   "  a",
   "  blind",
   "  spot",
   "  .",
   "  It",
   "  assumes",
   "  that",
   "  if",
   "  a",
   "  property",
   "  isn",
   "  defined",
   "  on",
   "  an"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  oolean",
   "  expectCanAssignToPropertyOf",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  JSType",
   "  rightType",
   "  ,",
   "  SType",
   "  leftType",
   "  ,",
   "  Node",
   "  owner",
   "  ,",
   "  String",
   "  propName",
   "  )",
   "  {",
   "  /",
   "  The",
   "  NoType",
   "  check",
   "  is",
   "  a",
   "  hack",
   "  to",
   "  make",
   "  typedefs",
   "  work",
   "  OK",
   "  .",
   "  f",
   "  (",
   "  !",
   "  leftType",
   "  .",
   "  isNoType",
   "  (",
   "  )",
   "  &&",
   "  !",
   "  rightType",
   "  .",
   "  canAssignTo",
   "  (",
   "  leftType",
   "  )",
   "  )",
   "  {",
   "+ if",
   "+ (",
   "+ (",
   "+ leftType",
   "+ .",
   "+ isConstructor",
   "+ (",
   "+ )",
   "+ ||",
   "+ leftType",
   "+ .",
   "+ isEnumType",
   "+ (",
   "+ )",
   "+ )",
   "+ &&",
   "+ (",
   "+ rightType",
   "+ .",
   "+ isConstructor",
   "+ (",
   "+ )",
   "+ ||",
   "+ rightType",
   "+ .",
   "+ isEnumType",
   "+ (",
   "+ )",
   "+ )",
   "+ )",
   "+ {",
   "+ registerMismatch",
   "+ (",
   "+ rightType",
   "+ ,",
   "+ leftType",
   "+ ,",
   "+ null",
   "+ )",
   "+ ;",
   "+ }",
   "+ else",
   "+ {",
   "  /",
   "  Do",
   "  not",
   "  type",
   "  -",
   "  check",
   "  interface",
   "  methods",
   "  ,",
   "  because",
   "  we",
   "  expect",
   "  that",
   "  /",
   "  they",
   "  will",
   "  have",
   "  dummy",
   "  implementations",
   "  that",
   "  do",
   "  not",
   "  match",
   "  the",
   "  type",
   "  /",
   "  annotations",
   "  ."
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  oolean",
   "  expectCanAssignToPropertyOf",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  JSType",
   "  rightType",
   "  ,",
   "  oolean",
   "  expectCanAssignTo",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  JSType",
   "  rightType",
   "  ,",
   "  SType",
   "  leftType",
   "  ,",
   "  String",
   "  msg",
   "  )",
   "  {",
   "  f",
   "  (",
   "  !",
   "  rightType",
   "  .",
   "  canAssignTo",
   "  (",
   "  leftType",
   "  )",
   "  )",
   "  {",
   "+ if",
   "+ (",
   "+ (",
   "+ leftType",
   "+ .",
   "+ isConstructor",
   "+ (",
   "+ )",
   "+ ||",
   "+ leftType",
   "+ .",
   "+ isEnumType",
   "+ (",
   "+ )",
   "+ )",
   "+ &&",
   "+ (",
   "+ rightType",
   "+ .",
   "+ isConstructor",
   "+ (",
   "+ )",
   "+ ||",
   "+ rightType",
   "+ .",
   "+ isEnumType",
   "+ (",
   "+ )",
   "+ )",
   "+ )",
   "+ {",
   "+ registerMismatch",
   "+ (",
   "+ rightType",
   "+ ,",
   "+ leftType",
   "+ ,",
   "+ null",
   "+ )",
   "+ ;",
   "+ }",
   "+ else",
   "+ {",
   "  ismatch",
   "  (",
   "  t",
   "  ,",
   "  n",
   "  ,",
   "  msg",
   "  ,",
   "  rightType",
   "  ,",
   "  leftType",
   "  )",
   "  ;",
   "+ }",
   "  eturn",
   "  false",
   "  ;",
   "  eturn",
   "  true",
   "  ;"
  ]
 },
 {
  "number": 2,
  "changes_set": [
   "  rivate",
   "  void",
   "  checkInterfaceConflictProperties",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  bjectType",
   "  interfaceType",
   "  )",
   "  {",
   "  bjectType",
   "  implicitProto",
   "  =",
   "  interfaceType",
   "  .",
   "  getImplicitPrototype",
   "  (",
   "  )",
   "  ;",
   "  et",
   "  <",
   "  String",
   "  >",
   "  currentPropertyNames",
   "  ;",
   "- if",
   "- (",
   "- implicitProto",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  if",
   "  (",
   "  implicitProto",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  /",
   "  This",
   "  can",
   "  be",
   "  the",
   "  case",
   "  if",
   "  interfaceType",
   "  is",
   "  proxy",
   "  to",
   "  a",
   "  non",
   "  -",
   "  existent",
   "  /",
   "  object",
   "  (",
   "  which",
   "  is",
   "  a",
   "  bad",
   "  type",
   "  annotation",
   "  ,",
   "  but",
   "  shouldn",
   "  crash",
   "  )",
   "  .",
   "  currentPropertyNames",
   "  =",
   "  ImmutableSet",
   "  .",
   "  of",
   "  (",
   "  )",
   "  ;",
   "- currentPropertyNames",
   "- =",
   "- ImmutableSet",
   "- .",
   "- of",
   "- (",
   "- )",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  urrentPropertyNames",
   "  =",
   "  implicitProto",
   "  .",
   "  getOwnPropertyNames",
   "  (",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  or",
   "  (",
   "  String",
   "  name",
   "  :",
   "  currentPropertyNames",
   "  )",
   "  {",
   "  bjectType",
   "  oType",
   "  =",
   "  properties",
   "  .",
   "  get",
   "  (",
   "  name",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  oType",
   "  !=",
   "  null",
   "  )",
   "  {"
  ]
 },
 {
  "number": 4,
  "changes_set": [
   "  SType",
   "  resolveInternal",
   "  (",
   "  ErrorReporter",
   "  t",
   "  ,",
   "  StaticScope",
   "  <",
   "  JSType",
   "  >",
   "  enclosing",
   "  )",
   "  {",
   "  /",
   "  makes",
   "  more",
   "  sense",
   "  .",
   "  Now",
   "  ,",
   "  resolution",
   "  via",
   "  registry",
   "  is",
   "  first",
   "  in",
   "  order",
   "  to",
   "  /",
   "  avoid",
   "  triggering",
   "  the",
   "  warnings",
   "  built",
   "  into",
   "  the",
   "  resolution",
   "  via",
   "  properties",
   "  .",
   "  oolean",
   "  resolved",
   "  =",
   "  resolveViaRegistry",
   "  (",
   "  t",
   "  ,",
   "  enclosing",
   "  )",
   "  ;",
   "  if",
   "  (",
   "- detectInheritanceCycle",
   "+ detectImplicitPrototypeCycle",
   "  (",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  detectInheritanceCycle",
   "  (",
   "  )",
   "  )",
   "  {",
   "  andleTypeCycle",
   "  (",
   "  t",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 4,
  "changes_set": [
   "  SType",
   "  resolveInternal",
   "  (",
   "  ErrorReporter",
   "  t",
   "  ,",
   "  StaticScope",
   "  <",
   "  JSType",
   "  >",
   "  enclosing",
   "  )",
   "  {",
   "  esolveViaProperties",
   "  (",
   "  t",
   "  ,",
   "  enclosing",
   "  )",
   "  ;",
   "  if",
   "  (",
   "- detectInheritanceCycle",
   "+ detectImplicitPrototypeCycle",
   "  (",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  detectInheritanceCycle",
   "  (",
   "  )",
   "  )",
   "  {",
   "  andleTypeCycle",
   "  (",
   "  t",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 8,
  "changes_set": [
   "  rivate",
   "  boolean",
   "  canBeRedeclared",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  Scope",
   "  s",
   "  )",
   "  {",
   "  ar",
   "  var",
   "  =",
   "  s",
   "  .",
   "  getVar",
   "  (",
   "  lhs",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  eturn",
   "  var",
   "  !=",
   "  null",
   "  &",
   "  var",
   "  .",
   "  getScope",
   "  (",
   "  )",
   "  ==",
   "  s",
   "  &&",
   "  !",
   "  isNamedParameter",
   "  (",
   "  var",
   "  )",
   "- &&",
   "- !",
   "- isNamedParameter",
   "- (",
   "- var",
   "- )",
   "  &",
   "  !",
   "  blacklistedVars",
   "  .",
   "  contains",
   "  (",
   "  var",
   "  )",
   "  ;",
   "- private",
   "- boolean",
   "- isNamedParameter",
   "- (",
   "- Var",
   "- v",
   "- )",
   "- {",
   "  private",
   "  boolean",
   "  isNamedParameter",
   "  (",
   "  Var",
   "  v",
   "  )",
   "  {",
   "  return",
   "  v",
   "  .",
   "  getParentNode",
   "  (",
   "  )",
   "  .",
   "  isParamList",
   "  (",
   "  )",
   "  ;",
   "- return",
   "- v",
   "- .",
   "- getParentNode",
   "- (",
   "- )",
   "- .",
   "- isParamList",
   "- (",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  rivate",
   "  void",
   "  applyCollapses",
   "  (",
   "  )",
   "  {",
   "  or",
   "  (",
   "  Collapse",
   "  collapse",
   "  :",
   "  collapses",
   "  )",
   "  {"
  ]
 },
 {
  "number": 9,
  "changes_set": [
   "  ublic",
   "  static",
   "  String",
   "  toModuleName",
   "  (",
   "  String",
   "  requiredFilename",
   "  ,",
   "  rivate",
   "  String",
   "  normalizeSourceName",
   "  (",
   "  String",
   "  filename",
   "  )",
   "  {",
   "  /",
   "  The",
   "  DOS",
   "  command",
   "  shell",
   "  will",
   "  normalize",
   "  \"/\"",
   "  to",
   "  \"\\\", so we have to/ wrestle it back.filename = filename.replace(\"",
   "  \", \"",
   "  /",
   "- \");filename = filename.replace(\"",
   "- \", \"",
   "- /"
  ]
 },
 {
  "number": 9,
  "changes_set": [
   "  rivate",
   "  void",
   "  visitScript",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  script",
   "  )",
   "  {",
   "  reconditions",
   "  .",
   "  checkArgument",
   "  (",
   "  scriptNodeCount",
   "  ==",
   "  1",
   "  ,",
   "  ProcessCommonJSModules",
   "  supports",
   "  only",
   "  one",
   "  invocation",
   "  per",
   "  \" +CompilerInput / script node\"",
   "  )",
   "  ;",
   "  String",
   "  moduleName",
   "  =",
   "  guessCJSModuleName",
   "  (",
   "+ normalizeSourceName",
   "+ (",
   "  script",
   "  .",
   "  getSourceFileName",
   "  (",
   "+ )",
   "  )",
   "  )",
   "  ;",
   "  String",
   "  moduleName",
   "  =",
   "  guessCJSModuleName",
   "  (",
   "  script",
   "  .",
   "  getSourceFileName",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  cript",
   "  .",
   "  addChildToFront",
   "  (",
   "  IR",
   "  .",
   "  var",
   "  (",
   "  IR",
   "  .",
   "  name",
   "  (",
   "  moduleName",
   "  )",
   "  ,",
   "  IR",
   "  .",
   "  objectlit",
   "  (",
   "  )",
   "  )",
   "  copyInformationFromForTree",
   "  (",
   "  script",
   "  )",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  reportDependencies",
   "  )",
   "  {"
  ]
 },
 {
  "number": 11,
  "changes_set": [
   "  rivate",
   "  void",
   "  visitGetProp",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  parent",
   "  )",
   "  {",
   "  f",
   "  (",
   "  childType",
   "  .",
   "  isDict",
   "  (",
   "  )",
   "  )",
   "  {",
   "  eport",
   "  (",
   "  t",
   "  ,",
   "  property",
   "  ,",
   "  TypeValidator",
   "  .",
   "  ILLEGAL_PROPERTY_ACCESS",
   "  ,",
   "  \"'.'\"",
   "  ,",
   "  \"dict\"",
   "  )",
   "  ;",
   "+ }",
   "+ else",
   "+ if",
   "+ (",
   "+ n",
   "+ .",
   "+ getJSType",
   "+ (",
   "+ )",
   "+ !=",
   "+ null",
   "+ &&",
   "+ parent",
   "+ .",
   "+ isAssign",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "+ return",
   "+ ;",
   "  else",
   "  if",
   "  (",
   "  validator",
   "  .",
   "  expectNotNullOrUndefined",
   "  (",
   "  t",
   "  ,",
   "  n",
   "  ,",
   "  childType",
   "  ,",
   "  No",
   "  properties",
   "  on",
   "  this",
   "  expression"
  ]
 },
 {
  "number": 12,
  "changes_set": [
   "  eachingUses",
   "  flowThrough",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  ReachingUses",
   "  input",
   "  )",
   "  {",
   "  rivate",
   "  boolean",
   "  hasExceptionHandler",
   "  (",
   "  Node",
   "  cfgNode",
   "  )",
   "  {",
   "  List",
   "  <",
   "  DiGraphEdge",
   "  <",
   "  Node",
   "  ,",
   "  Branch",
   "  >",
   "  >",
   "  branchEdges",
   "  =",
   "  getCfg",
   "  (",
   "  )",
   "  .",
   "  getOutEdges",
   "  (",
   "  cfgNode",
   "  )",
   "  ;",
   "- List",
   "- <",
   "- DiGraphEdge",
   "- <",
   "- Node",
   "- ,",
   "- Branch",
   "- >",
   "- >",
   "- branchEdges",
   "- =",
   "- getCfg",
   "- (",
   "- )",
   "- .",
   "- getOutEdges",
   "- (",
   "- cfgNode",
   "- )",
   "- ;",
   "- for",
   "- (",
   "- DiGraphEdge",
   "- <",
   "- Node",
   "- ,",
   "- Branch",
   "- >",
   "- edge",
   "- :",
   "- branchEdges",
   "- )",
   "- {",
   "  for",
   "  (",
   "  DiGraphEdge",
   "  <",
   "  Node",
   "  ,",
   "  Branch",
   "  >",
   "  edge",
   "  :",
   "  branchEdges",
   "  )",
   "  {",
   "  if",
   "  (",
   "  edge",
   "  .",
   "  getValue",
   "  (",
   "  )",
   "  ==",
   "  Branch",
   "  .",
   "  ON_EX",
   "  )",
   "  {",
   "- if",
   "- (",
   "- edge",
   "- .",
   "- getValue",
   "- (",
   "- )",
   "- ==",
   "- Branch",
   "- .",
   "- ON_EX",
   "- )",
   "- {",
   "- return",
   "- true",
   "- ;",
   "  return",
   "  true",
   "  ;",
   "  }",
   "  }",
   "- }",
   "- }",
   "  eturn",
   "  false",
   "  ;"
  ]
 },
 {
  "number": 10,
  "changes_set": [
   "  tatic",
   "  boolean",
   "  mayBeString",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  tatic",
   "  boolean",
   "  mayBeString",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  boolean",
   "  recurse",
   "  )",
   "  {",
   "  f",
   "  (",
   "  recurse",
   "  )",
   "  {",
   "  return",
   "- anyResultsMatch",
   "+ allResultsMatch",
   "  (",
   "  n",
   "  ,",
   "  MAY_BE_STRING_PREDICATE",
   "  )",
   "  ;",
   "  return",
   "  anyResultsMatch",
   "  (",
   "  n",
   "  ,",
   "  MAY_BE_STRING_PREDICATE",
   "  )",
   "  ;",
   "  else",
   "  {",
   "  eturn",
   "  mayBeStringHelper",
   "  (",
   "  n",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 14,
  "changes_set": [
   "  rivate",
   "  static",
   "  Node",
   "  computeFollowNode",
   "  (",
   "  else",
   "  if",
   "  (",
   "  parent",
   "  .",
   "  getLastChild",
   "  (",
   "  )",
   "  ==",
   "  node",
   "  )",
   "  {",
   "  f",
   "  (",
   "  cfa",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  or",
   "  (",
   "  Node",
   "  finallyNode",
   "  :",
   "  cfa",
   "  .",
   "  finallyMap",
   "  .",
   "  get",
   "  (",
   "  parent",
   "  )",
   "  )",
   "  {",
   "  cfa",
   "  .",
   "  createEdge",
   "  (",
   "  fromNode",
   "  ,",
   "  Branch",
   "  .",
   "- ON_EX",
   "+ UNCOND",
   "  ,",
   "  finallyNode",
   "  )",
   "  ;",
   "  cfa",
   "  .",
   "  createEdge",
   "  (",
   "  fromNode",
   "  ,",
   "  Branch",
   "  .",
   "  ON_EX",
   "  ,",
   "  finallyNode",
   "  )",
   "  ;",
   "  eturn",
   "  computeFollowNode",
   "  (",
   "  fromNode",
   "  ,",
   "  parent",
   "  ,",
   "  cfa",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 17,
  "changes_set": [
   "  rivate",
   "  JSType",
   "  getDeclaredType",
   "  (",
   "  String",
   "  sourceName",
   "  ,",
   "  JSDocInfo",
   "  info",
   "  ,",
   "  f",
   "  (",
   "  info",
   "  .",
   "  isConstant",
   "  (",
   "  )",
   "  )",
   "  {",
   "  SType",
   "  knownType",
   "  =",
   "  null",
   "  ;",
   "  f",
   "  (",
   "  rValue",
   "  !=",
   "  null",
   "  )",
   "  {",
   "+ if",
   "+ (",
   "+ rValue",
   "+ .",
   "+ getJSType",
   "+ (",
   "+ )",
   "+ !=",
   "+ null",
   "+ &&",
   "+ !",
   "+ rValue",
   "+ .",
   "+ getJSType",
   "+ (",
   "+ )",
   "+ .",
   "+ isUnknownType",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "  JSDocInfo",
   "  rValueInfo",
   "  =",
   "  rValue",
   "  .",
   "  getJSDocInfo",
   "  (",
   "  )",
   "  ;",
   "- JSDocInfo",
   "- rValueInfo",
   "- =",
   "- rValue",
   "- .",
   "- getJSDocInfo",
   "- (",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- rValueInfo",
   "- !=",
   "- null",
   "- &&",
   "- rValueInfo",
   "- .",
   "- hasType",
   "- (",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  rValueInfo",
   "  !=",
   "  null",
   "  &&",
   "  rValueInfo",
   "  .",
   "  hasType",
   "  (",
   "  )",
   "  )",
   "  {",
   "  /",
   "  If",
   "  rValue",
   "  has",
   "  a",
   "  type",
   "  -",
   "  cast",
   "  ,",
   "  we",
   "  use",
   "  the",
   "  type",
   "  in",
   "  the",
   "  type",
   "  -",
   "  cast",
   "  .",
   "  return",
   "  rValueInfo",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  .",
   "  evaluate",
   "  (",
   "  scope",
   "  ,",
   "  typeRegistry",
   "  )",
   "  ;",
   "- return",
   "- rValueInfo",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- .",
   "- evaluate",
   "- (",
   "- scope",
   "- ,",
   "- typeRegistry",
   "- )",
   "- ;",
   "  }",
   "  else",
   "  if",
   "  (",
   "  rValue",
   "  .",
   "  getJSType",
   "  (",
   "  )",
   "  !=",
   "  null",
   "- }",
   "- else",
   "- if",
   "- (",
   "- rValue",
   "- .",
   "- getJSType",
   "- (",
   "- )",
   "- !=",
   "- null",
   "- &&",
   "- !",
   "- rValue",
   "- .",
   "- getJSType",
   "- (",
   "- )",
   "- .",
   "- isUnknownType",
   "- (",
   "- )",
   "- )",
   "- {",
   "  &&",
   "  !",
   "  rValue",
   "  .",
   "  getJSType",
   "  (",
   "  )",
   "  .",
   "  isUnknownType",
   "  (",
   "  )",
   "  )",
   "  {",
   "  /",
   "  If",
   "  rValue",
   "  type",
   "  was",
   "  already",
   "  computed",
   "  during",
   "  scope",
   "  creation",
   "  ,",
   "  /",
   "  then",
   "  we",
   "  can",
   "  safely",
   "  use",
   "  that",
   "  .",
   "  eturn",
   "  rValue",
   "  .",
   "  getJSType",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 13,
  "changes_set": [
   "  rivate",
   "  void",
   "  traverse",
   "  (",
   "  Node",
   "  node",
   "  )",
   "  {",
   "  o",
   "  {",
   "  ode",
   "  c",
   "  =",
   "  node",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ;",
   "  hile",
   "  (",
   "  c",
   "  !=",
   "  null",
   "  )",
   "  {",
   "+ traverse",
   "+ (",
   "+ c",
   "+ )",
   "+ ;",
   "  ode",
   "  next",
   "  =",
   "  c",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  ;",
   "  traverse",
   "  (",
   "  c",
   "  )",
   "  ;",
   "- traverse",
   "- (",
   "- c",
   "- )",
   "- ;",
   "  =",
   "  next",
   "  ;"
  ]
 },
 {
  "number": 21,
  "changes_set": [
   "  ublic",
   "  void",
   "  visit",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  parent",
   "  )",
   "  {",
   "  /",
   "  Do",
   "  not",
   "  try",
   "  to",
   "  remove",
   "  a",
   "  block",
   "  or",
   "  an",
   "  expr",
   "  result",
   "  .",
   "  We",
   "  already",
   "  handle",
   "  /",
   "  these",
   "  cases",
   "  when",
   "  we",
   "  visit",
   "  the",
   "  child",
   "  ,",
   "  and",
   "  the",
   "  peephole",
   "  passes",
   "  will",
   "  /",
   "  fix",
   "  up",
   "  the",
   "  tree",
   "  in",
   "  more",
   "  clever",
   "  ways",
   "  when",
   "  these",
   "  are",
   "  removed",
   "  .",
   "  if",
   "  (",
   "  n",
   "  .",
   "  isExprResult",
   "  (",
   "  )",
   "- ||",
   "- n",
   "- .",
   "- isBlock",
   "- (",
   "- )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  n",
   "  .",
   "  isExprResult",
   "  (",
   "  )",
   "  ||",
   "  n",
   "  .",
   "  isBlock",
   "  (",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  ;"
  ]
 },
 {
  "number": 21,
  "changes_set": [
   "  ublic",
   "  void",
   "  visit",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  parent",
   "  )",
   "  {",
   "  oolean",
   "  isResultUsed",
   "  =",
   "  NodeUtil",
   "  .",
   "  isExpressionResultUsed",
   "  (",
   "  n",
   "  )",
   "  ;",
   "  oolean",
   "  isSimpleOp",
   "  =",
   "  NodeUtil",
   "  .",
   "  isSimpleOperatorType",
   "  (",
   "  n",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  if",
   "  (",
   "+ parent",
   "+ .",
   "+ getType",
   "+ (",
   "+ )",
   "+ ==",
   "+ Token",
   "+ .",
   "+ COMMA",
   "+ )",
   "+ {",
   "+ if",
   "+ (",
   "+ isResultUsed",
   "+ )",
   "+ {",
   "+ return",
   "+ ;",
   "+ }",
   "+ if",
   "+ (",
   "+ n",
   "+ ==",
   "+ parent",
   "+ .",
   "+ getLastChild",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "+ for",
   "+ (",
   "+ Node",
   "+ an",
   "+ :",
   "+ parent",
   "+ .",
   "+ getAncestors",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "+ int",
   "+ ancestorType",
   "+ =",
   "+ an",
   "+ .",
   "+ getType",
   "+ (",
   "+ )",
   "+ ;",
   "+ if",
   "+ (",
   "+ ancestorType",
   "+ ==",
   "+ Token",
   "+ .",
   "+ COMMA",
   "+ )",
   "+ continue",
   "+ ;",
   "+ if",
   "+ (",
   "+ ancestorType",
   "+ !=",
   "+ Token",
   "+ .",
   "+ EXPR_RESULT",
   "+ &&",
   "+ ancestorType",
   "+ !=",
   "+ Token",
   "+ .",
   "+ BLOCK",
   "+ )",
   "+ return",
   "+ ;",
   "+ else",
   "+ break",
   "+ ;",
   "+ }",
   "+ }",
   "+ }",
   "+ else",
   "+ if",
   "+ (",
   "+ parent",
   "+ .",
   "+ getType",
   "+ (",
   "+ )",
   "+ !=",
   "+ Token",
   "+ .",
   "+ EXPR_RESULT",
   "+ &&",
   "+ parent",
   "+ .",
   "+ getType",
   "+ (",
   "+ )",
   "+ !=",
   "+ Token",
   "+ .",
   "+ BLOCK",
   "+ )",
   "+ {",
   "+ if",
   "+ (",
   "  !",
   "- isResultUsed",
   "+ (",
   "+ parent",
   "+ .",
   "+ getType",
   "+ (",
   "+ )",
   "+ ==",
   "+ Token",
   "+ .",
   "+ FOR",
   "  &&",
   "+ parent",
   "+ .",
   "+ getChildCount",
   "+ (",
   "+ )",
   "+ ==",
   "+ 4",
   "+ &&",
   "+ (",
   "+ n",
   "+ ==",
   "+ parent",
   "+ .",
   "+ getFirstChild",
   "+ (",
   "+ )",
   "+ ||",
   "+ n",
   "+ ==",
   "+ parent",
   "+ .",
   "+ getFirstChild",
   "+ (",
   "+ )",
   "+ .",
   "+ getNext",
   "+ (",
   "+ )",
   "+ .",
   "+ getNext",
   "+ (",
   "+ )",
   "+ )",
   "+ )",
   "+ )",
   "+ {",
   "+ return",
   "+ ;",
   "+ }",
   "+ }",
   "+ if",
   "+ (",
   "  if",
   "  (",
   "  !",
   "  isResultUsed",
   "  &&",
   "  isSimpleOp",
   "  ||",
   "  !",
   "  NodeUtil",
   "  .",
   "  mayHaveSideEffects",
   "  (",
   "  n",
   "  ,",
   "  t",
   "  .",
   "  getCompiler",
   "  (",
   "  )",
   "  )",
   "  )",
   "  )",
   "  {",
   "  tring",
   "  msg",
   "  =",
   "  \"This code lacks side-effects. Is there a bug?\"",
   "  ;",
   "  f",
   "  (",
   "  n",
   "  .",
   "  isString",
   "  (",
   "  )",
   "  )",
   "  {"
  ]
 },
 {
  "number": 15,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  apply",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  eturn",
   "  true",
   "  ;",
   "  if",
   "  (",
   "  n",
   "  .",
   "  isDelProp",
   "  (",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- n",
   "- .",
   "- isDelProp",
   "- (",
   "- )",
   "- )",
   "- {",
   "  return",
   "  true",
   "  ;",
   "- return",
   "- true",
   "- ;",
   "- }",
   "  }",
   "  or",
   "  (",
   "  Node",
   "  c",
   "  =",
   "  n",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ;",
   "  c",
   "  !=",
   "  null",
   "  ;",
   "  c",
   "  =",
   "  c",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  )",
   "  {",
   "  f",
   "  (",
   "  !",
   "  ControlFlowGraph",
   "  .",
   "  isEnteringNewCfgNode",
   "  (",
   "  c",
   "  )",
   "  &&",
   "  apply",
   "  (",
   "  c",
   "  )",
   "  )",
   "  {"
  ]
 },
 {
  "number": 16,
  "changes_set": [
   "  ublic",
   "  void",
   "  applyAlias",
   "  (",
   "  )",
   "  {",
   "  rivate",
   "  class",
   "  AliasedTypeNode",
   "  implements",
   "  AliasUsage",
   "  {",
   "  rivate",
   "  final",
   "  Node",
   "  typeReference",
   "  ;",
   "  private",
   "  final",
   "  Node",
   "  aliasDefinition",
   "  ;",
   "- private",
   "- final",
   "- Node",
   "- aliasDefinition",
   "- ;",
   "  rivate",
   "  final",
   "  String",
   "  aliasName",
   "  ;",
   "  AliasedTypeNode",
   "  (",
   "  Node",
   "  typeReference",
   "- ,",
   "- Node",
   "- aliasDefinition",
   "  ,",
   "  AliasedTypeNode",
   "  (",
   "  Node",
   "  typeReference",
   "  ,",
   "  Node",
   "  aliasDefinition",
   "  ,",
   "  tring",
   "  aliasName",
   "  )",
   "  {",
   "  his",
   "  .",
   "  typeReference",
   "  =",
   "  typeReference",
   "  ;",
   "  this",
   "  .",
   "  aliasDefinition",
   "  =",
   "  aliasDefinition",
   "  ;",
   "- this",
   "- .",
   "- aliasDefinition",
   "- =",
   "- aliasDefinition",
   "- ;",
   "  his",
   "  .",
   "  aliasName",
   "  =",
   "  aliasName",
   "  ;"
  ]
 },
 {
  "number": 16,
  "changes_set": [
   "  verrideublic",
   "  void",
   "  applyAlias",
   "  (",
   "  )",
   "  {",
   "- String",
   "- typeName",
   "- =",
   "  typeReference",
   "  .",
   "- getString",
   "+ setString",
   "  (",
   "+ aliasName",
   "  )",
   "  ;",
   "  String",
   "  typeName",
   "  =",
   "  typeReference",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  ;",
   "  String",
   "  aliasExpanded",
   "  =",
   "- String",
   "- aliasExpanded",
   "- =",
   "  Preconditions",
   "  .",
   "  checkNotNull",
   "  (",
   "  aliasDefinition",
   "  .",
   "  getQualifiedName",
   "  (",
   "- )",
   "- )",
   "- ;",
   "- Preconditions",
   "- .",
   "- checkNotNull",
   "- (",
   "- aliasDefinition",
   "- .",
   "- getQualifiedName",
   "- (",
   "- )",
   "- )",
   "- ;",
   "- Preconditions",
   "- .",
   "- checkState",
   "- (",
   "- typeName",
   "- .",
   "- startsWith",
   "- (",
   "- aliasName",
   "  )",
   "  )",
   "  ;",
   "  Preconditions",
   "  .",
   "  checkState",
   "  (",
   "  typeName",
   "  .",
   "  startsWith",
   "  (",
   "  aliasName",
   "  )",
   "  )",
   "  ;",
   "  typeReference",
   "  .",
   "  setString",
   "  (",
   "  typeName",
   "  .",
   "  replaceFirst",
   "  (",
   "  aliasName",
   "  ,",
   "  aliasExpanded",
   "  )",
   "  )",
   "  ;",
   "- typeReference",
   "- .",
   "- setString",
   "- (",
   "- typeName",
   "- .",
   "- replaceFirst",
   "- (",
   "- aliasName",
   "- ,",
   "- aliasExpanded",
   "- )",
   "- )",
   "- ;"
  ]
 },
 {
  "number": 16,
  "changes_set": [
   "  rivate",
   "  void",
   "  fixTypeNode",
   "  (",
   "  Node",
   "  typeNode",
   "  )",
   "  {",
   "  ar",
   "  aliasVar",
   "  =",
   "  aliases",
   "  .",
   "  get",
   "  (",
   "  baseName",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  aliasVar",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  ode",
   "  aliasedNode",
   "  =",
   "  aliasVar",
   "  .",
   "  getInitialValue",
   "  (",
   "  )",
   "  ;",
   "  aliasUsages",
   "  .",
   "  add",
   "  (",
   "  new",
   "  AliasedTypeNode",
   "  (",
   "  typeNode",
   "  ,",
   "  aliasedNode",
   "- ,",
   "- baseName",
   "+ .",
   "+ getQualifiedName",
   "+ (",
   "+ )",
   "+ +",
   "+ name",
   "+ .",
   "+ substring",
   "+ (",
   "+ endIndex",
   "+ )",
   "  )",
   "  )",
   "  ;",
   "  aliasUsages",
   "  .",
   "  add",
   "  (",
   "  new",
   "  AliasedTypeNode",
   "  (",
   "  typeNode",
   "  ,",
   "  aliasedNode",
   "  ,",
   "  baseName",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 18,
  "changes_set": [
   "  ode",
   "  parseInputs",
   "  (",
   "  )",
   "  {",
   "  /",
   "  Check",
   "  if",
   "  the",
   "  sources",
   "  need",
   "  to",
   "  be",
   "  re",
   "  -",
   "  ordered",
   "  .",
   "  oolean",
   "  staleInputs",
   "  =",
   "  false",
   "  ;",
   "  if",
   "  (",
   "  options",
   "  .",
   "  dependencyOptions",
   "  .",
   "  needsManagement",
   "  (",
   "  )",
   "+ &&",
   "+ options",
   "+ .",
   "+ closurePass",
   "  )",
   "  {",
   "  if",
   "  (",
   "  options",
   "  .",
   "  dependencyOptions",
   "  .",
   "  needsManagement",
   "  (",
   "  )",
   "  )",
   "  {",
   "  or",
   "  (",
   "  CompilerInput",
   "  input",
   "  :",
   "  inputs",
   "  )",
   "  {",
   "  /",
   "  Forward",
   "  -",
   "  declare",
   "  all",
   "  the",
   "  provided",
   "  types",
   "  ,",
   "  so",
   "  that",
   "  they",
   "  /",
   "  are",
   "  not",
   "  flagged",
   "  even",
   "  if",
   "  they",
   "  are",
   "  dropped",
   "  from",
   "  the",
   "  process",
   "  ."
  ]
 },
 {
  "number": 19,
  "changes_set": [
   "  rotected",
   "  void",
   "  declareNameInScope",
   "  (",
   "  FlowScope",
   "  scope",
   "  ,",
   "  Node",
   "  node",
   "  ,",
   "  JSType",
   "  type",
   "  )",
   "  {",
   "  cope",
   "  .",
   "  inferQualifiedSlot",
   "  (",
   "  node",
   "  ,",
   "  qualifiedName",
   "  ,",
   "  origType",
   "  ,",
   "  type",
   "  )",
   "  ;",
   "  reak",
   "  ;",
   "  case",
   "  Token",
   "  .",
   "  THIS",
   "  :",
   "- case",
   "- Token",
   "- .",
   "- THIS",
   "- :",
   "  /",
   "  \"this\"",
   "  references",
   "  aren",
   "  currently",
   "  modeled",
   "  in",
   "  the",
   "  CFG",
   "  .",
   "  break",
   "  ;",
   "- break",
   "- ;",
   "  efault",
   "  :",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Node cannot be refined. \\n\"",
   "  +"
  ]
 },
 {
  "number": 23,
  "changes_set": [
   "  rivate",
   "  Node",
   "  tryFoldArrayAccess",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  left",
   "  ,",
   "  Node",
   "  right",
   "  )",
   "  {",
   "  ode",
   "  current",
   "  =",
   "  left",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ;",
   "  ode",
   "  elem",
   "  =",
   "  null",
   "  ;",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  current",
   "  !=",
   "  null",
   "+ &&",
   "+ i",
   "+ <",
   "+ intIndex",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  current",
   "  !=",
   "  null",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  if",
   "  (",
   "  i",
   "  !=",
   "  intIndex",
   "  )",
   "  {",
   "  if",
   "  (",
   "- i",
   "- !=",
   "- intIndex",
   "- )",
   "- {",
   "- if",
   "- (",
   "- mayHaveSideEffects",
   "- (",
   "- current",
   "- )",
   "- )",
   "- {",
   "- if",
   "- (",
   "  mayHaveSideEffects",
   "  (",
   "  current",
   "  )",
   "  )",
   "  {",
   "  return",
   "  n",
   "  ;",
   "- return",
   "- n",
   "- ;",
   "  }",
   "- }",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  lem",
   "  =",
   "  current",
   "  ;",
   "- }",
   "  }",
   "  urrent",
   "  =",
   "  current",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 24,
  "changes_set": [
   "  rivate",
   "  void",
   "  findAliases",
   "  (",
   "  NodeTraversal",
   "  t",
   "  )",
   "  {",
   "  ode",
   "  n",
   "  =",
   "  v",
   "  .",
   "  getNode",
   "  (",
   "  )",
   "  ;",
   "  nt",
   "  type",
   "  =",
   "  n",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ;",
   "  ode",
   "  parent",
   "  =",
   "  n",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  parent",
   "  .",
   "  isVar",
   "  (",
   "  )",
   "- &&",
   "+ )",
   "+ {",
   "  if",
   "  (",
   "- parent",
   "- .",
   "- isVar",
   "- (",
   "- )",
   "- &&",
   "  n",
   "  .",
   "  hasChildren",
   "  (",
   "  )",
   "  &&",
   "  n",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  .",
   "  isQualifiedName",
   "  (",
   "  )",
   "  )",
   "  {",
   "+ if",
   "+ (",
   "+ parent",
   "+ .",
   "+ isVar",
   "+ (",
   "+ )",
   "+ &&",
   "  n",
   "  .",
   "  hasChildren",
   "  (",
   "  )",
   "  &&",
   "  n",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  .",
   "  isQualifiedName",
   "  (",
   "  )",
   "  )",
   "  {",
   "  tring",
   "  name",
   "  =",
   "  n",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  ;",
   "  ar",
   "  aliasVar",
   "  =",
   "  scope",
   "  .",
   "  getVar",
   "  (",
   "  name",
   "  )",
   "  ;",
   "  liases",
   "  .",
   "  put",
   "  (",
   "  name",
   "  ,",
   "  aliasVar",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 24,
  "changes_set": [
   "  rivate",
   "  void",
   "  findAliases",
   "  (",
   "  NodeTraversal",
   "  t",
   "  )",
   "  {",
   "  tring",
   "  qualifiedName",
   "  =",
   "  liasVar",
   "  .",
   "  getInitialValue",
   "  (",
   "  )",
   "  .",
   "  getQualifiedName",
   "  (",
   "  )",
   "  ;",
   "  ransformation",
   "  .",
   "  addAlias",
   "  (",
   "  name",
   "  ,",
   "  qualifiedName",
   "  )",
   "  ;",
   "  }",
   "  else",
   "  if",
   "  (",
   "  v",
   "  .",
   "  isBleedingFunction",
   "  (",
   "  )",
   "  )",
   "  {",
   "- }",
   "- else",
   "- if",
   "- (",
   "- v",
   "- .",
   "- isBleedingFunction",
   "- (",
   "- )",
   "- )",
   "- {",
   "  /",
   "  Bleeding",
   "  functions",
   "  already",
   "  get",
   "  a",
   "  BAD_PARAMETERS",
   "  error",
   "  ,",
   "  so",
   "  just",
   "  /",
   "  do",
   "  nothing",
   "  .",
   "- }",
   "- else",
   "- if",
   "- (",
   "- parent",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- ==",
   "- Token",
   "- .",
   "- LP",
   "- )",
   "- {",
   "  }",
   "  else",
   "  if",
   "  (",
   "  parent",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  LP",
   "  )",
   "  {",
   "  /",
   "  Parameters",
   "  of",
   "  the",
   "  scope",
   "  function",
   "  also",
   "  get",
   "  a",
   "  BAD_PARAMETERS",
   "  /",
   "  error",
   "  .",
   "  else",
   "  {",
   "  /",
   "  TODO",
   "  (",
   "  robbyw",
   "  )",
   "  :",
   "  Support",
   "  using",
   "  locals",
   "  for",
   "  private",
   "  variables",
   "  .",
   "  eport",
   "  (",
   "  t",
   "  ,",
   "  n",
   "  ,",
   "  GOOG_SCOPE_NON_ALIAS_LOCAL",
   "  ,",
   "  n",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  )",
   "  ;",
   "+ }"
  ]
 },
 {
  "number": 22,
  "changes_set": [
   "  ublic",
   "  void",
   "  visit",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  parent",
   "  )",
   "  {",
   "  /",
   "  Do",
   "  not",
   "  try",
   "  to",
   "  remove",
   "  a",
   "  block",
   "  or",
   "  an",
   "  expr",
   "  result",
   "  .",
   "  We",
   "  already",
   "  handle",
   "  /",
   "  these",
   "  cases",
   "  when",
   "  we",
   "  visit",
   "  the",
   "  child",
   "  ,",
   "  and",
   "  the",
   "  peephole",
   "  passes",
   "  will",
   "  /",
   "  fix",
   "  up",
   "  the",
   "  tree",
   "  in",
   "  more",
   "  clever",
   "  ways",
   "  when",
   "  these",
   "  are",
   "  removed",
   "  .",
   "  if",
   "  (",
   "+ parent",
   "+ .",
   "+ getType",
   "+ (",
   "+ )",
   "+ ==",
   "+ Token",
   "+ .",
   "+ COMMA",
   "+ )",
   "+ {",
   "+ Node",
   "+ gramps",
   "+ =",
   "+ parent",
   "+ .",
   "+ getParent",
   "+ (",
   "+ )",
   "+ ;",
   "+ if",
   "+ (",
   "+ gramps",
   "+ .",
   "+ isCall",
   "+ (",
   "+ )",
   "+ &&",
   "+ parent",
   "+ ==",
   "+ gramps",
   "+ .",
   "+ getFirstChild",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "+ if",
   "+ (",
   "+ n",
   "+ ==",
   "+ parent",
   "+ .",
   "+ getFirstChild",
   "+ (",
   "+ )",
   "+ &&",
   "+ parent",
   "+ .",
   "+ getChildCount",
   "+ (",
   "+ )",
   "+ ==",
   "+ 2",
   "+ &&",
   "+ n",
   "+ .",
   "+ getNext",
   "+ (",
   "+ )",
   "+ .",
   "+ isName",
   "+ (",
   "+ )",
   "+ &&",
   "+ \"eval\"",
   "+ .",
   "+ equals",
   "+ (",
   "+ n",
   "+ .",
   "+ getNext",
   "+ (",
   "+ )",
   "+ .",
   "+ getString",
   "+ (",
   "+ )",
   "+ )",
   "+ )",
   "+ {",
   "+ if",
   "+ (",
   "  n",
   "  .",
   "  isExprResult",
   "  (",
   "  )",
   "  ||",
   "  n",
   "  .",
   "  isBlock",
   "  (",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- n",
   "- .",
   "- isExprResult",
   "- (",
   "- )",
   "- ||",
   "- n",
   "- .",
   "- isBlock",
   "- (",
   "- )",
   "- )",
   "- {",
   "  eturn",
   "  ;",
   "+ }",
   "  /",
   "  This",
   "  no",
   "  -",
   "  op",
   "  statement",
   "  was",
   "  there",
   "  so",
   "  that",
   "  JSDoc",
   "  information",
   "  could",
   "  /",
   "  be",
   "  attached",
   "  to",
   "  the",
   "  name",
   "  .",
   "  This",
   "  check",
   "  should",
   "  not",
   "  complain",
   "  about",
   "  it",
   "  .",
   "  if",
   "  (",
   "  n",
   "+ ==",
   "+ parent",
   "+ .",
   "+ getLastChild",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "+ for",
   "+ (",
   "+ Node",
   "+ an",
   "+ :",
   "+ parent",
   "+ .",
   "+ getAncestors",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "+ int",
   "+ ancestorType",
   "+ =",
   "+ an",
   "+ .",
   "+ getType",
   "+ (",
   "+ )",
   "+ ;",
   "+ if",
   "+ (",
   "+ ancestorType",
   "+ ==",
   "+ Token",
   "+ .",
   "+ COMMA",
   "+ )",
   "+ continue",
   "+ ;",
   "+ if",
   "+ (",
   "+ ancestorType",
   "+ !=",
   "+ Token",
   "+ .",
   "+ EXPR_RESULT",
   "+ &&",
   "+ ancestorType",
   "+ !=",
   "+ Token",
   "+ .",
   "+ BLOCK",
   "+ )",
   "+ return",
   "+ ;",
   "+ elsebreak",
   "+ ;",
   "+ }",
   "+ }",
   "+ }",
   "+ else",
   "+ if",
   "+ (",
   "+ parent",
   "+ .",
   "+ getType",
   "+ (",
   "+ )",
   "+ !=",
   "+ Token",
   "+ .",
   "+ EXPR_RESULT",
   "+ &&",
   "+ parent",
   "+ .",
   "+ getType",
   "+ (",
   "+ )",
   "+ !=",
   "+ Token",
   "+ .",
   "+ BLOCK",
   "+ )",
   "+ {",
   "+ if",
   "+ (",
   "+ parent",
   "+ .",
   "+ getType",
   "+ (",
   "+ )",
   "+ ==",
   "+ Token",
   "+ .",
   "+ FOR",
   "+ &&",
   "+ parent",
   "+ .",
   "+ getChildCount",
   "+ (",
   "+ )",
   "+ ==",
   "+ 4",
   "+ &&",
   "+ (",
   "+ n",
   "+ ==",
   "+ parent",
   "+ .",
   "+ getFirstChild",
   "+ (",
   "+ )",
   "+ ||",
   "+ n",
   "+ ==",
   "+ parent",
   "+ .",
   "+ getFirstChild",
   "+ (",
   "+ )",
   "+ .",
   "+ getNext",
   "+ (",
   "+ )",
   "+ .",
   "+ getNext",
   "+ (",
   "+ )",
   "+ )",
   "+ )",
   "+ {",
   "+ }",
   "+ else",
   "+ {",
   "+ if",
   "+ (",
   "+ n",
   "  .",
   "  isQualifiedName",
   "  (",
   "  )",
   "  &&",
   "  n",
   "  .",
   "  getJSDocInfo",
   "  (",
   "  )",
   "  !=",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- n",
   "- .",
   "- isQualifiedName",
   "- (",
   "- )",
   "- &&",
   "- n",
   "- .",
   "- getJSDocInfo",
   "- (",
   "- )",
   "- !=",
   "- null",
   "- )",
   "- {",
   "  eturn",
   "  ;",
   "+ }",
   "  oolean",
   "  isResultUsed",
   "  =",
   "  NodeUtil",
   "  .",
   "  isExpressionResultUsed",
   "  (",
   "  n",
   "  )",
   "  ;",
   "  oolean",
   "  isSimpleOp",
   "  =",
   "  NodeUtil",
   "  .",
   "  isSimpleOperatorType",
   "  (",
   "  n",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  !",
   "  isResultUsed",
   "  &&",
   "  isSimpleOp",
   "  ||",
   "  !",
   "  NodeUtil",
   "  .",
   "  mayHaveSideEffects",
   "  (",
   "  n",
   "  ,",
   "  t",
   "  .",
   "  getCompiler",
   "  (",
   "  )",
   "  )",
   "  )",
   "  )",
   "  {",
   "+ if",
   "+ (",
   "+ n",
   "+ .",
   "+ isQualifiedName",
   "+ (",
   "+ )",
   "+ &&",
   "+ n",
   "+ .",
   "+ getJSDocInfo",
   "+ (",
   "+ )",
   "+ !=",
   "+ null",
   "+ )",
   "+ {",
   "+ return",
   "+ ;",
   "+ }",
   "+ else",
   "+ if",
   "+ (",
   "+ n",
   "+ .",
   "+ isExprResult",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "+ return",
   "+ ;",
   "+ }",
   "  tring",
   "  msg",
   "  =",
   "  \"This code lacks side-effects. Is there a bug?\"",
   "  ;",
   "  f",
   "  (",
   "  n",
   "  .",
   "  isString",
   "  (",
   "  )",
   "  )",
   "  {",
   "  sg",
   "  =",
   "  \"Is there a missing '+' on the previous line?\"",
   "  ;"
  ]
 },
 {
  "number": 26,
  "changes_set": [
   "  rivate",
   "  String",
   "  normalizeSourceName",
   "  (",
   "  String",
   "  filename",
   "  )",
   "  {",
   "  bstractPostOrderCallback",
   "  {",
   "  rivate",
   "  int",
   "  scriptNodeCount",
   "  =",
   "  0",
   "  ;",
   "  private",
   "  Set",
   "  <",
   "  String",
   "  >",
   "  modulesWithExports",
   "  =",
   "  Sets",
   "  .",
   "  newHashSet",
   "  (",
   "  )",
   "  ;",
   "- private",
   "- Set",
   "- <",
   "- String",
   "- >",
   "- modulesWithExports",
   "- =",
   "- Sets",
   "- .",
   "- newHashSet",
   "- (",
   "- )",
   "- ;"
  ]
 },
 {
  "number": 26,
  "changes_set": [
   "  rivate",
   "  void",
   "  visitScript",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  script",
   "  )",
   "  {",
   "  /",
   "  rivate",
   "  void",
   "  emitOptionalModuleExportsOverride",
   "  (",
   "  Node",
   "  script",
   "  ,",
   "  tring",
   "  moduleName",
   "  )",
   "  {",
   "  if",
   "  (",
   "  !",
   "  modulesWithExports",
   "  .",
   "  contains",
   "  (",
   "  moduleName",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- !",
   "- modulesWithExports",
   "- .",
   "- contains",
   "- (",
   "- moduleName",
   "- )",
   "- )",
   "- {",
   "  return",
   "  ;",
   "- return",
   "- ;",
   "- }",
   "  }",
   "  ode",
   "  moduleExportsProp",
   "  =",
   "  IR",
   "  .",
   "  getprop",
   "  (",
   "  IR",
   "  .",
   "  name",
   "  (",
   "  moduleName",
   "  )",
   "  ,",
   "  R",
   "  .",
   "  string",
   "  (",
   "  \"module$exports\"",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 26,
  "changes_set": [
   "  rivate",
   "  void",
   "  visitModuleExports",
   "  (",
   "  Node",
   "  prop",
   "  )",
   "  {",
   "  ode",
   "  exports",
   "  =",
   "  prop",
   "  .",
   "  getChildAtIndex",
   "  (",
   "  1",
   "  )",
   "  ;",
   "  xports",
   "  .",
   "  putProp",
   "  (",
   "  Node",
   "  .",
   "  ORIGINALNAME_PROP",
   "  ,",
   "  \"exports\"",
   "  )",
   "  ;",
   "  xports",
   "  .",
   "  setString",
   "  (",
   "  \"module$exports\"",
   "  )",
   "  ;",
   "  modulesWithExports",
   "  .",
   "  add",
   "  (",
   "  moduleName",
   "  )",
   "  ;",
   "- modulesWithExports",
   "- .",
   "- add",
   "- (",
   "- moduleName",
   "- )",
   "- ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 25,
  "changes_set": [
   "  rivate",
   "  void",
   "  updateTypeOfThisOnClosure",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  FunctionType",
   "  fnType",
   "  )",
   "  {",
   "  rivate",
   "  FlowScope",
   "  traverseNew",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  FlowScope",
   "  scope",
   "  )",
   "  {",
   "  scope",
   "  =",
   "  traverseChildren",
   "  (",
   "  n",
   "  ,",
   "  scope",
   "  )",
   "  ;",
   "- scope",
   "- =",
   "- traverseChildren",
   "- (",
   "- n",
   "- ,",
   "- scope",
   "- )",
   "- ;",
   "  ode",
   "  constructor",
   "  =",
   "  n",
   "  .",
   "  getFirstChild",
   "  (",
   "+ )",
   "+ ;",
   "+ scope",
   "+ =",
   "+ traverse",
   "+ (",
   "+ constructor",
   "+ ,",
   "+ scope",
   "  )",
   "  ;",
   "  SType",
   "  constructorType",
   "  =",
   "  constructor",
   "  .",
   "  getJSType",
   "  (",
   "  )",
   "  ;",
   "  SType",
   "  type",
   "  =",
   "  null",
   "  ;",
   "  f",
   "  (",
   "  constructorType",
   "  !=",
   "  null",
   "  )",
   "  {"
  ]
 },
 {
  "number": 25,
  "changes_set": [
   "  rivate",
   "  FlowScope",
   "  traverseNew",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  FlowScope",
   "  scope",
   "  )",
   "  {",
   "  f",
   "  (",
   "  ct",
   "  !=",
   "  null",
   "  &&",
   "  ct",
   "  .",
   "  isConstructor",
   "  (",
   "  )",
   "  )",
   "  {",
   "  ype",
   "  =",
   "  ct",
   "  .",
   "  getInstanceType",
   "  (",
   "  )",
   "  ;",
   "  backwardsInferenceFromCallSite",
   "  (",
   "  n",
   "  ,",
   "  ct",
   "  )",
   "  ;",
   "- backwardsInferenceFromCallSite",
   "- (",
   "- n",
   "- ,",
   "- ct",
   "- )",
   "- ;",
   "  .",
   "  setJSType",
   "  (",
   "  type",
   "  )",
   "  ;",
   "+ for",
   "+ (",
   "+ Node",
   "+ arg",
   "+ =",
   "+ constructor",
   "+ .",
   "+ getNext",
   "+ (",
   "+ )",
   "+ ;",
   "+ arg",
   "+ !=",
   "+ null",
   "+ ;",
   "+ arg",
   "+ =",
   "+ arg",
   "+ .",
   "+ getNext",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "+ scope",
   "+ =",
   "+ traverse",
   "+ (",
   "+ arg",
   "+ ,",
   "+ scope",
   "+ )",
   "+ ;",
   "+ }",
   "  eturn",
   "  scope",
   "  ;"
  ]
 },
 {
  "number": 27,
  "changes_set": [
   "  ublic",
   "  static",
   "  Node",
   "  block",
   "  (",
   "  Node",
   "  ...",
   "  stmts",
   "  )",
   "  {",
   "  eturn",
   "  block",
   "  ;",
   "  private",
   "  static",
   "  Node",
   "  blockUnchecked",
   "  (",
   "  Node",
   "  stmt",
   "  )",
   "  {",
   "- private",
   "- static",
   "- Node",
   "- blockUnchecked",
   "- (",
   "- Node",
   "- stmt",
   "- )",
   "- {",
   "  return",
   "  new",
   "  Node",
   "  (",
   "  Token",
   "  .",
   "  BLOCK",
   "  ,",
   "  stmt",
   "  )",
   "  ;",
   "- return",
   "- new",
   "- Node",
   "- (",
   "- Token",
   "- .",
   "- BLOCK",
   "- ,",
   "- stmt",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  ublic",
   "  static",
   "  Node",
   "  script",
   "  (",
   "  Node",
   "  ...",
   "  stmts",
   "  )",
   "  {",
   "  /",
   "  TODO",
   "  (",
   "  johnlenz",
   "  )",
   "  :",
   "  finish",
   "  setting",
   "  up",
   "  the",
   "  SCRIPT",
   "  node"
  ]
 },
 {
  "number": 27,
  "changes_set": [
   "  ublic",
   "  static",
   "  Node",
   "  labelName",
   "  (",
   "  String",
   "  name",
   "  )",
   "  {",
   "  ublic",
   "  static",
   "  Node",
   "  tryFinally",
   "  (",
   "  Node",
   "  tryBody",
   "  ,",
   "  Node",
   "  finallyBody",
   "  )",
   "  {",
   "  Preconditions",
   "  .",
   "  checkState",
   "  (",
   "  tryBody",
   "  .",
   "- isBlock",
   "+ isLabelName",
   "+ (",
   "+ )",
   "+ )",
   "+ ;",
   "+ Preconditions",
   "+ .",
   "+ checkState",
   "+ (",
   "+ finallyBody",
   "+ .",
   "+ isLabelName",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  Preconditions",
   "  .",
   "  checkState",
   "  (",
   "  tryBody",
   "- .",
   "- isBlock",
   "- (",
   "- )",
   "- )",
   "- ;",
   "- Preconditions",
   "- .",
   "- checkState",
   "- (",
   "- finallyBody",
   "  .",
   "  isBlock",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  Preconditions",
   "  .",
   "  checkState",
   "  (",
   "  finallyBody",
   "  .",
   "  isBlock",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  ode",
   "  catchBody",
   "  =",
   "  block",
   "  (",
   "  )",
   "  .",
   "  copyInformationFrom",
   "  (",
   "  tryBody",
   "  )",
   "  ;",
   "  eturn",
   "  new",
   "  Node",
   "  (",
   "  Token",
   "  .",
   "  TRY",
   "  ,",
   "  tryBody",
   "  ,",
   "  catchBody",
   "  ,",
   "  finallyBody",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 27,
  "changes_set": [
   "  ublic",
   "  static",
   "  Node",
   "  tryFinally",
   "  (",
   "  Node",
   "  tryBody",
   "  ,",
   "  Node",
   "  finallyBody",
   "  )",
   "  {",
   "  ublic",
   "  static",
   "  Node",
   "  tryCatch",
   "  (",
   "  Node",
   "  tryBody",
   "  ,",
   "  Node",
   "  catchNode",
   "  )",
   "  {",
   "  reconditions",
   "  .",
   "  checkState",
   "  (",
   "  tryBody",
   "  .",
   "  isBlock",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  reconditions",
   "  .",
   "  checkState",
   "  (",
   "  catchNode",
   "  .",
   "  isCatch",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  Node",
   "  catchBody",
   "  =",
   "- blockUnchecked",
   "+ block",
   "  (",
   "  catchNode",
   "  )",
   "  .",
   "  copyInformationFrom",
   "  (",
   "  catchNode",
   "  )",
   "  ;",
   "  Node",
   "  catchBody",
   "  =",
   "  blockUnchecked",
   "  (",
   "  catchNode",
   "  )",
   "  .",
   "  copyInformationFrom",
   "  (",
   "  catchNode",
   "  )",
   "  ;",
   "  eturn",
   "  new",
   "  Node",
   "  (",
   "  Token",
   "  .",
   "  TRY",
   "  ,",
   "  tryBody",
   "  ,",
   "  catchBody",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 29,
  "changes_set": [
   "  rivate",
   "  boolean",
   "  isVarInlineForbidden",
   "  (",
   "  Var",
   "  var",
   "  )",
   "  {",
   "  /",
   "  rivate",
   "  boolean",
   "  isInlinableObject",
   "  (",
   "  List",
   "  <",
   "  Reference",
   "  >",
   "  refs",
   "  )",
   "  {",
   "  oolean",
   "  ret",
   "  =",
   "  false",
   "- ;",
   "- Set",
   "- <",
   "- String",
   "- >",
   "- validProperties",
   "- =",
   "- Sets",
   "- .",
   "- newHashSet",
   "- (",
   "- )",
   "  ;",
   "  Set",
   "  <",
   "  String",
   "  >",
   "  validProperties",
   "  =",
   "  Sets",
   "  .",
   "  newHashSet",
   "  (",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  Reference",
   "  ref",
   "  :",
   "  refs",
   "  )",
   "  {",
   "  ode",
   "  name",
   "  =",
   "  ref",
   "  .",
   "  getNode",
   "  (",
   "  )",
   "  ;",
   "  ode",
   "  parent",
   "  =",
   "  ref",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 29,
  "changes_set": [
   "  rivate",
   "  boolean",
   "  isInlinableObject",
   "  (",
   "  List",
   "  <",
   "  Reference",
   "  >",
   "  refs",
   "  )",
   "  {",
   "  /",
   "  We",
   "  short",
   "  -",
   "  circuit",
   "  this",
   "  problem",
   "  by",
   "  bailing",
   "  out",
   "  if",
   "  we",
   "  see",
   "  a",
   "  reference",
   "  /",
   "  to",
   "  a",
   "  property",
   "  that",
   "  isn",
   "  defined",
   "  on",
   "  the",
   "  object",
   "  literal",
   "  .",
   "  This",
   "  /",
   "  isn",
   "  a",
   "  perfect",
   "  algorithm",
   "  ,",
   "  but",
   "  it",
   "  should",
   "  catch",
   "  most",
   "  cases",
   "  .",
   "  String",
   "  propName",
   "  =",
   "  parent",
   "  .",
   "  getLastChild",
   "  (",
   "  )",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  ;",
   "- String",
   "- propName",
   "- =",
   "- parent",
   "- .",
   "- getLastChild",
   "- (",
   "- )",
   "- .",
   "- getString",
   "- (",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- !",
   "- validProperties",
   "- .",
   "- contains",
   "- (",
   "- propName",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  !",
   "  validProperties",
   "  .",
   "  contains",
   "  (",
   "  propName",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  NodeUtil",
   "  .",
   "  isVarOrSimpleAssignLhs",
   "  (",
   "  parent",
   "  ,",
   "  gramps",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- NodeUtil",
   "- .",
   "- isVarOrSimpleAssignLhs",
   "- (",
   "- parent",
   "- ,",
   "- gramps",
   "- )",
   "- )",
   "- {",
   "- validProperties",
   "- .",
   "- add",
   "- (",
   "- propName",
   "- )",
   "- ;",
   "  validProperties",
   "  .",
   "  add",
   "  (",
   "  propName",
   "  )",
   "  ;",
   "  }",
   "  else",
   "  {",
   "- }",
   "- else",
   "- {",
   "- return",
   "- false",
   "- ;",
   "  return",
   "  false",
   "  ;",
   "  }",
   "  }",
   "- }",
   "- }",
   "  ontinue",
   "  ;"
  ]
 },
 {
  "number": 29,
  "changes_set": [
   "  rivate",
   "  boolean",
   "  isInlinableObject",
   "  (",
   "  List",
   "  <",
   "  Reference",
   "  >",
   "  refs",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "- ;",
   "- validProperties",
   "- .",
   "- add",
   "- (",
   "- child",
   "- .",
   "- getString",
   "- (",
   "- )",
   "- )",
   "  ;",
   "  validProperties",
   "  .",
   "  add",
   "  (",
   "  child",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  ode",
   "  childVal",
   "  =",
   "  child",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ;",
   "  /",
   "  Check",
   "  if",
   "  childVal",
   "  is",
   "  the",
   "  parent",
   "  of",
   "  any",
   "  of",
   "  the",
   "  passed",
   "  in"
  ]
 },
 {
  "number": 30,
  "changes_set": [
   "  verrideublic",
   "  void",
   "  process",
   "  (",
   "  Node",
   "  externs",
   "  ,",
   "  Node",
   "  root",
   "  )",
   "  {",
   "  (",
   "  new",
   "  NodeTraversal",
   "  (",
   "  compiler",
   "  ,",
   "  this",
   "  )",
   "  )",
   "  .",
   "- traverseRoots",
   "+ traverse",
   "  (",
   "- externs",
   "- ,",
   "  root",
   "  )",
   "  ;",
   "  (",
   "  new",
   "  NodeTraversal",
   "  (",
   "  compiler",
   "  ,",
   "  this",
   "  )",
   "  )",
   "  .",
   "  traverseRoots",
   "  (",
   "  externs",
   "  ,",
   "  root",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 30,
  "changes_set": [
   "  rivate",
   "  static",
   "  class",
   "  Definition",
   "  {",
   "  inal",
   "  Node",
   "  node",
   "  ;",
   "  inal",
   "  Set",
   "  <",
   "  Var",
   "  >",
   "  depends",
   "  =",
   "  Sets",
   "  .",
   "  newHashSet",
   "  (",
   "  )",
   "  ;",
   "  private",
   "  boolean",
   "  unknownDependencies",
   "  =",
   "  false",
   "  ;",
   "- private",
   "- boolean",
   "- unknownDependencies",
   "- =",
   "- false",
   "- ;",
   "  efinition",
   "  (",
   "  Node",
   "  node",
   "  )",
   "  {",
   "  his",
   "  .",
   "  node",
   "  =",
   "  node",
   "  ;"
  ]
 },
 {
  "number": 30,
  "changes_set": [
   "  verrideublic",
   "  void",
   "  visit",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  parent",
   "  )",
   "  {",
   "  if",
   "  (",
   "  n",
   "  .",
   "  isName",
   "  (",
   "+ )",
   "+ &&",
   "+ jsScope",
   "+ .",
   "+ isDeclared",
   "+ (",
   "+ n",
   "+ .",
   "+ getString",
   "+ (",
   "+ )",
   "+ ,",
   "+ true",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  n",
   "  .",
   "  isName",
   "  (",
   "  )",
   "  )",
   "  {",
   "  ar",
   "  dep",
   "  =",
   "  jsScope",
   "  .",
   "  getVar",
   "  (",
   "  n",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  dep",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- dep",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  def",
   "  .",
   "  unknownDependencies",
   "  =",
   "  true",
   "  ;",
   "- def",
   "- .",
   "- unknownDependencies",
   "- =",
   "- true",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  ef",
   "  .",
   "  depends",
   "  .",
   "  add",
   "  (",
   "  dep",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 30,
  "changes_set": [
   "  oolean",
   "  dependsOnOuterScopeVars",
   "  (",
   "  String",
   "  name",
   "  ,",
   "  Node",
   "  useNode",
   "  )",
   "  {",
   "  raphNode",
   "  <",
   "  Node",
   "  ,",
   "  Branch",
   "  >",
   "  n",
   "  =",
   "  getCfg",
   "  (",
   "  )",
   "  .",
   "  getNode",
   "  (",
   "  useNode",
   "  )",
   "  ;",
   "  lowState",
   "  <",
   "  MustDef",
   "  >",
   "  state",
   "  =",
   "  n",
   "  .",
   "  getAnnotation",
   "  (",
   "  )",
   "  ;",
   "  efinition",
   "  def",
   "  =",
   "  state",
   "  .",
   "  getIn",
   "  (",
   "  )",
   "  .",
   "  reachingDef",
   "  .",
   "  get",
   "  (",
   "  jsScope",
   "  .",
   "  getVar",
   "  (",
   "  name",
   "  )",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  def",
   "  .",
   "  unknownDependencies",
   "  )",
   "  {",
   "- if",
   "- (",
   "- def",
   "- .",
   "- unknownDependencies",
   "- )",
   "- {",
   "  return",
   "  true",
   "  ;",
   "- return",
   "- true",
   "- ;",
   "- }",
   "  }",
   "  or",
   "  (",
   "  Var",
   "  s",
   "  :",
   "  def",
   "  .",
   "  depends",
   "  )",
   "  {",
   "  f",
   "  (",
   "  s",
   "  .",
   "  scope",
   "  !=",
   "  jsScope",
   "  )",
   "  {"
  ]
 },
 {
  "number": 31,
  "changes_set": [
   "  ode",
   "  parseInputs",
   "  (",
   "  )",
   "  {",
   "  /",
   "  Check",
   "  if",
   "  the",
   "  sources",
   "  need",
   "  to",
   "  be",
   "  re",
   "  -",
   "  ordered",
   "  .",
   "  f",
   "  (",
   "  options",
   "  .",
   "  dependencyOptions",
   "  .",
   "  needsManagement",
   "  (",
   "  )",
   "  &&",
   "+ !",
   "+ options",
   "+ .",
   "+ skipAllPasses",
   "+ &&",
   "  ptions",
   "  .",
   "  closurePass",
   "  )",
   "  {",
   "  or",
   "  (",
   "  CompilerInput",
   "  input",
   "  :",
   "  inputs",
   "  )",
   "  {",
   "  /",
   "  Forward",
   "  -",
   "  declare",
   "  all",
   "  the",
   "  provided",
   "  types",
   "  ,",
   "  so",
   "  that",
   "  they"
  ]
 },
 {
  "number": 32,
  "changes_set": [
   "  rivate",
   "  ExtractionInfo",
   "  extractMultilineTextualBlock",
   "  (",
   "  JsDocToken",
   "  token",
   "  ,",
   "  /",
   "  Track",
   "  the",
   "  start",
   "  of",
   "  the",
   "  line",
   "  to",
   "  count",
   "  whitespace",
   "  that",
   "  /",
   "  the",
   "  tokenizer",
   "  skipped",
   "  .",
   "  Because",
   "  this",
   "  case",
   "  is",
   "  rare",
   "  ,",
   "  it",
   "  easier",
   "  /",
   "  to",
   "  do",
   "  this",
   "  here",
   "  than",
   "  in",
   "  the",
   "  tokenizer",
   "  .",
   "  int",
   "  lineStartChar",
   "  =",
   "  -",
   "  1",
   "  ;",
   "- int",
   "- lineStartChar",
   "- =",
   "- -",
   "- 1",
   "- ;",
   "  o",
   "  {",
   "  witch",
   "  (",
   "  token",
   "  )",
   "  {",
   "  ase",
   "  STAR",
   "  :",
   "  f",
   "  (",
   "  ignoreStar",
   "  )",
   "  {",
   "  /",
   "  Mark",
   "  the",
   "  position",
   "  after",
   "  the",
   "  star",
   "  as",
   "  the",
   "  new",
   "  start",
   "  of",
   "  the",
   "  line",
   "  .",
   "  lineStartChar",
   "  =",
   "  stream",
   "  .",
   "  getCharno",
   "  (",
   "  )",
   "  +",
   "  1",
   "  ;",
   "- lineStartChar",
   "- =",
   "- stream",
   "- .",
   "- getCharno",
   "- (",
   "- )",
   "- +",
   "- 1",
   "- ;",
   "  else",
   "  {",
   "  /",
   "  The",
   "  star",
   "  is",
   "  part",
   "  of",
   "  the",
   "  comment",
   "  .",
   "  f",
   "  (",
   "  builder",
   "  .",
   "  length",
   "  (",
   "  )",
   "  >",
   "  0",
   "  )",
   "  {"
  ]
 },
 {
  "number": 32,
  "changes_set": [
   "  rivate",
   "  ExtractionInfo",
   "  extractMultilineTextualBlock",
   "  (",
   "  JsDocToken",
   "  token",
   "  ,",
   "  gnoreStar",
   "  =",
   "  true",
   "  ;",
   "  lineStartChar",
   "  =",
   "  0",
   "  ;",
   "- lineStartChar",
   "- =",
   "- 0",
   "- ;",
   "  oken",
   "  =",
   "  next",
   "  (",
   "  )",
   "  ;",
   "  ontinue",
   "  ;"
  ]
 },
 {
  "number": 32,
  "changes_set": [
   "  rivate",
   "  ExtractionInfo",
   "  extractMultilineTextualBlock",
   "  (",
   "  JsDocToken",
   "  token",
   "  ,",
   "  gnoreStar",
   "  =",
   "  false",
   "  ;",
   "  tate",
   "  =",
   "  State",
   "  .",
   "  SEARCHING_ANNOTATION",
   "  ;",
   "  boolean",
   "  isEOC",
   "  =",
   "  token",
   "  ==",
   "  JsDocToken",
   "  .",
   "  EOC",
   "  ;",
   "- boolean",
   "- isEOC",
   "- =",
   "- token",
   "- ==",
   "- JsDocToken",
   "- .",
   "- EOC",
   "- ;",
   "  if",
   "  (",
   "  !",
   "  isEOC",
   "- )",
   "- {",
   "- if",
   "- (",
   "- !",
   "- isEOC",
   "- )",
   "- {",
   "- if",
   "- (",
   "- lineStartChar",
   "- !=",
   "- -",
   "- 1",
   "- &&",
   "- option",
   "- ==",
   "- WhitespaceOption",
   "- .",
   "- PRESERVE",
   "  )",
   "  {",
   "  if",
   "  (",
   "  lineStartChar",
   "  !=",
   "  -",
   "  1",
   "  &&",
   "  option",
   "  ==",
   "  WhitespaceOption",
   "  .",
   "  PRESERVE",
   "  )",
   "  {",
   "  int",
   "  numSpaces",
   "  =",
   "  stream",
   "  .",
   "  getCharno",
   "  (",
   "  )",
   "  -",
   "  lineStartChar",
   "  ;",
   "- int",
   "- numSpaces",
   "- =",
   "- stream",
   "- .",
   "- getCharno",
   "- (",
   "- )",
   "- -",
   "- lineStartChar",
   "- ;",
   "- for",
   "- (",
   "- int",
   "- i",
   "- =",
   "- 0",
   "- ;",
   "- i",
   "- <",
   "- numSpaces",
   "- ;",
   "- i",
   "- ++",
   "- )",
   "- {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  numSpaces",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  builder",
   "  .",
   "  append",
   "  (",
   "  ' '",
   "  )",
   "  ;",
   "- builder",
   "- .",
   "- append",
   "- (",
   "- ' '",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  lineStartChar",
   "  =",
   "  -",
   "  1",
   "  ;",
   "- lineStartChar",
   "- =",
   "- -",
   "- 1",
   "- ;",
   "- }",
   "- else",
   "- if",
   "- (",
   "- builder",
   "- .",
   "- length",
   "- (",
   "- )",
   "- >",
   "- 0",
   "- )",
   "- {",
   "  }",
   "  else",
   "  if",
   "  (",
   "  builder",
   "  .",
   "  length",
   "  (",
   "  )",
   "  >",
   "  0",
   "  )",
   "  {",
   "  /",
   "  All",
   "  tokens",
   "  must",
   "  be",
   "  separated",
   "  by",
   "  a",
   "  space",
   "  .",
   "  builder",
   "  .",
   "  append",
   "  (",
   "  ' '",
   "  )",
   "  ;",
   "- builder",
   "- .",
   "- append",
   "- (",
   "- ' '",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  f",
   "  (",
   "  token",
   "  ==",
   "  JsDocToken",
   "  .",
   "  EOC",
   "  ||",
   "  oken",
   "  ==",
   "  JsDocToken",
   "  .",
   "  EOF",
   "  ||"
  ]
 },
 {
  "number": 32,
  "changes_set": [
   "  rivate",
   "  ExtractionInfo",
   "  extractMultilineTextualBlock",
   "  (",
   "  JsDocToken",
   "  token",
   "  ,",
   "  eturn",
   "  new",
   "  ExtractionInfo",
   "  (",
   "  multilineText",
   "  ,",
   "  token",
   "  )",
   "  ;",
   "+ if",
   "+ (",
   "+ builder",
   "+ .",
   "+ length",
   "+ (",
   "+ )",
   "+ >",
   "+ 0",
   "+ )",
   "+ {",
   "+ builder",
   "+ .",
   "+ append",
   "+ (",
   "+ ' '",
   "+ )",
   "+ ;",
   "+ }",
   "  uilder",
   "  .",
   "  append",
   "  (",
   "  toString",
   "  (",
   "  token",
   "  )",
   "  )",
   "  ;",
   "  ine",
   "  =",
   "  stream",
   "  .",
   "  getRemainingJSDocLine",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 33,
  "changes_set": [
   "  verrideublic",
   "  void",
   "  matchConstraint",
   "  (",
   "  ObjectType",
   "  constraintObj",
   "  )",
   "  {",
   "  /",
   "  We",
   "  only",
   "  want",
   "  to",
   "  match",
   "  contraints",
   "  on",
   "  anonymous",
   "  types",
   "  .",
   "  if",
   "  (",
   "  hasReferenceName",
   "  (",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- hasReferenceName",
   "- (",
   "- )",
   "- )",
   "- {",
   "  return",
   "  ;",
   "- return",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  Handle",
   "  the",
   "  case",
   "  where",
   "  the",
   "  constraint",
   "  object",
   "  is",
   "  a",
   "  record",
   "  type",
   "  .",
   "  /"
  ]
 },
 {
  "number": 28,
  "changes_set": [
   "  verridevoid",
   "- addConstant",
   "- (",
   "- String",
   "- newcode",
   "- )",
   "- {",
   "- void",
   "  addConstant",
   "  (",
   "  String",
   "  newcode",
   "  )",
   "  {",
   "  add",
   "  (",
   "  \"0\"",
   "  )",
   "  ;",
   "- add",
   "- (",
   "- \"0\"",
   "- )",
   "- ;",
   "  }",
   "- }"
  ]
 },
 {
  "number": 34,
  "changes_set": [
   "  oid",
   "  add",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  Context",
   "  context",
   "  )",
   "  {",
   "  c",
   "  .",
   "  addOp",
   "  (",
   "  opstr",
   "  ,",
   "  true",
   "  )",
   "  ;",
   "  ddExpr",
   "  (",
   "  last",
   "  ,",
   "  p",
   "  ,",
   "  rhsContext",
   "  )",
   "  ;",
   "  else",
   "  {",
   "- unrollBinaryOperator",
   "+ addExpr",
   "  (",
   "- n",
   "+ first",
   "  ,",
   "- type",
   "+ p",
   "  ,",
   "+ context",
   "+ )",
   "+ ;",
   "+ cc",
   "+ .",
   "+ addOp",
   "+ (",
   "  opstr",
   "  ,",
   "- context",
   "- ,",
   "- rhsContext",
   "- ,",
   "- p",
   "+ true",
   "+ )",
   "+ ;",
   "+ addExpr",
   "+ (",
   "+ last",
   "  ,",
   "  p",
   "  +",
   "  1",
   "+ ,",
   "+ rhsContext",
   "  )",
   "  ;",
   "  unrollBinaryOperator",
   "  (",
   "  n",
   "  ,",
   "  type",
   "  ,",
   "  opstr",
   "  ,",
   "  context",
   "  ,",
   "  rhsContext",
   "  ,",
   "  p",
   "  ,",
   "  p",
   "  +",
   "  1",
   "  )",
   "  ;",
   "  eturn",
   "  ;"
  ]
 },
 {
  "number": 34,
  "changes_set": [
   "  rivate",
   "  void",
   "  unrollBinaryOperator",
   "  (",
   "  ode",
   "  current",
   "  =",
   "  firstNonOperator",
   "  ;",
   "  o",
   "  {",
   "  urrent",
   "  =",
   "  current",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  ;",
   "  cc",
   "  .",
   "- addOp",
   "+ listSeparator",
   "  (",
   "- opStr",
   "- ,",
   "- true",
   "  )",
   "  ;",
   "  cc",
   "  .",
   "  addOp",
   "  (",
   "  opStr",
   "  ,",
   "  true",
   "  )",
   "  ;",
   "  ddExpr",
   "  (",
   "  current",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  ,",
   "  rightPrecedence",
   "  ,",
   "  rhsContext",
   "  )",
   "  ;",
   "  while",
   "  (",
   "  current",
   "  !=",
   "  n",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 34,
  "changes_set": [
   "  verrideoid",
   "  appendOp",
   "  (",
   "  String",
   "  op",
   "  ,",
   "  boolean",
   "  binOp",
   "  )",
   "  {",
   "  f",
   "  (",
   "  binOp",
   "  )",
   "  {",
   "  if",
   "  (",
   "  getLastChar",
   "  (",
   "  )",
   "  !=",
   "  ' '",
   "- &&",
   "- op",
   "- .",
   "- charAt",
   "- (",
   "- 0",
   "- )",
   "- !=",
   "- ','",
   "  )",
   "  {",
   "  if",
   "  (",
   "  getLastChar",
   "  (",
   "  )",
   "  !=",
   "  ' '",
   "  &&",
   "  op",
   "  .",
   "  charAt",
   "  (",
   "  0",
   "  )",
   "  !=",
   "  ','",
   "  )",
   "  {",
   "  ppend",
   "  (",
   "  \" \"",
   "  )",
   "  ;",
   "  ppend",
   "  (",
   "  op",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 35,
  "changes_set": [
   "  rivate",
   "  void",
   "  inferPropertyTypesToMatchConstraint",
   "  (",
   "  bjectType",
   "  constraintObj",
   "  =",
   "  bjectType",
   "  .",
   "  cast",
   "  (",
   "  constraint",
   "  .",
   "  restrictByNotNullOrUndefined",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  constraintObj",
   "  !=",
   "  null",
   "+ &&",
   "+ constraintObj",
   "+ .",
   "+ isRecordType",
   "+ (",
   "+ )",
   "  )",
   "  {",
   "+ ObjectType",
   "+ objType",
   "+ =",
   "+ ObjectType",
   "+ .",
   "+ cast",
   "+ (",
   "+ type",
   "+ .",
   "+ restrictByNotNullOrUndefined",
   "+ (",
   "+ )",
   "+ )",
   "+ ;",
   "+ if",
   "+ (",
   "+ objType",
   "+ !=",
   "+ null",
   "+ )",
   "+ {",
   "+ for",
   "+ (",
   "+ String",
   "+ prop",
   "+ :",
   "+ constraintObj",
   "+ .",
   "+ getOwnPropertyNames",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "+ JSType",
   "+ propType",
   "+ =",
   "+ constraintObj",
   "+ .",
   "+ getPropertyType",
   "+ (",
   "+ prop",
   "+ )",
   "+ ;",
   "+ if",
   "+ (",
   "+ !",
   "+ objType",
   "+ .",
   "+ isPropertyTypeDeclared",
   "+ (",
   "+ prop",
   "+ )",
   "+ )",
   "+ {",
   "+ JSType",
   "+ typeToInfer",
   "+ =",
   "+ propType",
   "+ ;",
   "+ if",
   "+ (",
   "+ !",
   "+ objType",
   "+ .",
   "+ hasProperty",
   "+ (",
   "+ prop",
   "+ )",
   "+ )",
   "+ {",
   "+ typeToInfer",
   "+ =",
   "+ getNativeType",
   "+ (",
   "+ VOID_TYPE",
   "+ )",
   "+ .",
   "+ getLeastSupertype",
   "+ (",
   "+ propType",
   "+ )",
   "+ ;",
   "+ }",
   "+ objType",
   "+ .",
   "+ defineInferredProperty",
   "+ (",
   "+ prop",
   "+ ,",
   "+ typeToInfer",
   "+ ,",
   "+ null",
   "+ )",
   "+ ;",
   "+ }",
   "+ }",
   "+ }",
   "  if",
   "  (",
   "  constraintObj",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  type",
   "  .",
   "  matchConstraint",
   "  (",
   "  constraintObj",
   "  )",
   "  ;",
   "- type",
   "- .",
   "- matchConstraint",
   "- (",
   "- constraintObj",
   "- )",
   "- ;"
  ]
 },
 {
  "number": 37,
  "changes_set": [
   "  rivate",
   "  void",
   "  traverseFunction",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  parent",
   "  )",
   "  {",
   "  /",
   "  Bodyreconditions",
   "  .",
   "  checkState",
   "  (",
   "  body",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  ==",
   "  null",
   "  &&",
   "  body",
   "  .",
   "  isBlock",
   "  (",
   "  )",
   "- ,",
   "- body",
   "  )",
   "  ;",
   "  body",
   "  .",
   "  isBlock",
   "  (",
   "  )",
   "  ,",
   "  body",
   "  )",
   "  ;",
   "  raverseBranch",
   "  (",
   "  body",
   "  ,",
   "  n",
   "  )",
   "  ;",
   "  opScope",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 37,
  "changes_set": [
   "  ode",
   "  processFunctionNode",
   "  (",
   "  FunctionNode",
   "  functionNode",
   "  )",
   "  {",
   "  ode",
   "  .",
   "  addChildToBack",
   "  (",
   "  lp",
   "  )",
   "  ;",
   "  ode",
   "  bodyNode",
   "  =",
   "  transform",
   "  (",
   "  functionNode",
   "  .",
   "  getBody",
   "  (",
   "  )",
   "  )",
   "  ;",
   "- if",
   "- (",
   "- !",
   "- bodyNode",
   "- .",
   "- isBlock",
   "- (",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  !",
   "  bodyNode",
   "  .",
   "  isBlock",
   "  (",
   "  )",
   "  )",
   "  {",
   "  /",
   "  When",
   "  in",
   "  ideMode",
   "  Rhino",
   "  tries",
   "  to",
   "  parse",
   "  some",
   "  constructs",
   "  the",
   "  compiler",
   "  /",
   "  doesn",
   "  support",
   "  ,",
   "  repair",
   "  it",
   "  here",
   "  .",
   "  see",
   "  Rhino",
   "  Parser",
   "  parseFunctionBodyExpr",
   "  .",
   "  Preconditions",
   "  .",
   "  checkState",
   "  (",
   "  config",
   "  .",
   "  isIdeMode",
   "  )",
   "  ;",
   "- Preconditions",
   "- .",
   "- checkState",
   "- (",
   "- config",
   "- .",
   "- isIdeMode",
   "- )",
   "- ;",
   "  bodyNode",
   "  =",
   "  IR",
   "  .",
   "  block",
   "  (",
   "  )",
   "  ;",
   "- bodyNode",
   "- =",
   "- IR",
   "- .",
   "- block",
   "- (",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  arseDirectives",
   "  (",
   "  bodyNode",
   "  )",
   "  ;",
   "  ode",
   "  .",
   "  addChildToBack",
   "  (",
   "  bodyNode",
   "  )",
   "  ;",
   "  eturn",
   "  node",
   "  ;"
  ]
 },
 {
  "number": 36,
  "changes_set": [
   "  rivate",
   "  boolean",
   "  canInline",
   "  (",
   "  /",
   "  issue",
   "  668",
   "  :",
   "  Don",
   "  inline",
   "  singleton",
   "  getter",
   "  methods",
   "  /",
   "  calls",
   "  as",
   "  this",
   "  confused",
   "  class",
   "  removing",
   "  logic",
   "  .",
   "  if",
   "  (",
   "  convention",
   "  .",
   "  getSingletonGetterClassName",
   "  (",
   "  callNode",
   "  )",
   "  !=",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- convention",
   "- .",
   "- getSingletonGetterClassName",
   "- (",
   "- callNode",
   "- )",
   "- !=",
   "- null",
   "- )",
   "- {",
   "- return",
   "- false",
   "- ;",
   "  return",
   "  false",
   "  ;",
   "  }",
   "- }"
  ]
 },
 {
  "number": 39,
  "changes_set": [
   "  tring",
   "  toStringHelper",
   "  (",
   "  boolean",
   "  forAnnotations",
   "  )",
   "  {",
   "  b",
   "  .",
   "  append",
   "  (",
   "  property",
   "  )",
   "  ;",
   "  b",
   "  .",
   "  append",
   "  (",
   "  \": \"",
   "  )",
   "  ;",
   "  sb",
   "  .",
   "  append",
   "  (",
   "  getPropertyType",
   "  (",
   "  property",
   "  )",
   "  .",
   "- toStringHelper",
   "+ toString",
   "  (",
   "- forAnnotations",
   "  )",
   "  )",
   "  ;",
   "  sb",
   "  .",
   "  append",
   "  (",
   "  getPropertyType",
   "  (",
   "  property",
   "  )",
   "  .",
   "  toStringHelper",
   "  (",
   "  forAnnotations",
   "  )",
   "  )",
   "  ;",
   "  if",
   "  (",
   "- !",
   "- forAnnotations",
   "- &&",
   "  i",
   "  ==",
   "  MAX_PRETTY_PRINTED_PROPERTIES",
   "  )",
   "  {",
   "  if",
   "  (",
   "  !",
   "  forAnnotations",
   "  &&",
   "  i",
   "  ==",
   "  MAX_PRETTY_PRINTED_PROPERTIES",
   "  )",
   "  {",
   "  b",
   "  .",
   "  append",
   "  (",
   "  \", ...\"",
   "  )",
   "  ;",
   "  reak",
   "  ;"
  ]
 },
 {
  "number": 39,
  "changes_set": [
   "  tring",
   "  toStringHelper",
   "  (",
   "  boolean",
   "  forAnnotations",
   "  )",
   "  {",
   "  rettyPrint",
   "  =",
   "  true",
   "  ;",
   "  eturn",
   "  sb",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  ;",
   "  else",
   "  {",
   "  return",
   "- forAnnotations",
   "- ?",
   "- \"?\"",
   "- :",
   "  \"{...}\"",
   "  ;",
   "  return",
   "  forAnnotations",
   "  ?",
   "  \"?\"",
   "  :",
   "  \"{...}\"",
   "  ;"
  ]
 },
 {
  "number": 45,
  "changes_set": [
   "  rivate",
   "  void",
   "  interpretAssigns",
   "  (",
   "  )",
   "  {",
   "  ssignedToUnknownValue",
   "  =",
   "  true",
   "- ;",
   "- boolean",
   "- maybeEscaped",
   "- =",
   "- false",
   "  ;",
   "  boolean",
   "  maybeEscaped",
   "  =",
   "  false",
   "  ;",
   "  or",
   "  (",
   "  Assign",
   "  assign",
   "  :",
   "  assignsByVar",
   "  .",
   "  get",
   "  (",
   "  var",
   "  )",
   "  )",
   "  {",
   "  f",
   "  (",
   "  assign",
   "  .",
   "  isPropertyAssign",
   "  )",
   "  {",
   "  asPropertyAssign",
   "  =",
   "  true",
   "  ;"
  ]
 },
 {
  "number": 45,
  "changes_set": [
   "  rivate",
   "  void",
   "  interpretAssigns",
   "  (",
   "  )",
   "  {",
   "  ssign",
   "  .",
   "  assignNode",
   "  .",
   "  getLastChild",
   "  (",
   "  )",
   "  ,",
   "  true",
   "  )",
   "  )",
   "  {",
   "  ssignedToUnknownValue",
   "  =",
   "  true",
   "  ;",
   "  if",
   "  (",
   "  assign",
   "  .",
   "  maybeAliased",
   "  )",
   "  {",
   "- if",
   "- (",
   "- assign",
   "- .",
   "- maybeAliased",
   "- )",
   "- {",
   "- maybeEscaped",
   "- =",
   "- true",
   "- ;",
   "  maybeEscaped",
   "  =",
   "  true",
   "  ;",
   "  }",
   "- }",
   "  if",
   "  (",
   "- (",
   "  assignedToUnknownValue",
   "- ||",
   "- maybeEscaped",
   "- )",
   "  &&",
   "  hasPropertyAssign",
   "  )",
   "  {",
   "  if",
   "  (",
   "  (",
   "  assignedToUnknownValue",
   "  ||",
   "  maybeEscaped",
   "  )",
   "  &&",
   "  hasPropertyAssign",
   "  )",
   "  {",
   "  hanges",
   "  =",
   "  markReferencedVar",
   "  (",
   "  var",
   "  )",
   "  ||",
   "  changes",
   "  ;",
   "  aybeUnreferenced",
   "  .",
   "  remove",
   "  (",
   "  current",
   "  )",
   "  ;",
   "  urrent",
   "  --",
   "  ;"
  ]
 },
 {
  "number": 45,
  "changes_set": [
   "  oid",
   "  apply",
   "  (",
   "  )",
   "  {",
   "  his",
   "  .",
   "  nameNode",
   "  =",
   "  nameNode",
   "  ;",
   "  his",
   "  .",
   "  isPropertyAssign",
   "  =",
   "  isPropertyAssign",
   "  ;",
   "  this",
   "  .",
   "  maybeAliased",
   "  =",
   "- NodeUtil",
   "+ !",
   "+ assignNode",
   "  .",
   "- isExpressionResultUsed",
   "+ getParent",
   "  (",
   "- assignNode",
   "+ )",
   "+ .",
   "+ isExprResult",
   "+ (",
   "  )",
   "  ;",
   "  this",
   "  .",
   "  maybeAliased",
   "  =",
   "  NodeUtil",
   "  .",
   "  isExpressionResultUsed",
   "  (",
   "  assignNode",
   "  )",
   "  ;",
   "  his",
   "  .",
   "  mayHaveSecondarySideEffects",
   "  =",
   "  aybeAliased",
   "  ||",
   "  odeUtil",
   "  .",
   "  mayHaveSideEffects",
   "  (",
   "  assignNode",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  )",
   "  ||"
  ]
 },
 {
  "number": 38,
  "changes_set": [
   "  oid",
   "  addNumber",
   "  (",
   "  double",
   "  x",
   "  )",
   "  {",
   "  /",
   "  x",
   "  --",
   "  4",
   "  (",
   "  which",
   "  is",
   "  a",
   "  syntax",
   "  error",
   "  )",
   "  .",
   "  har",
   "  prev",
   "  =",
   "  getLastChar",
   "  (",
   "  )",
   "  ;",
   "  oolean",
   "  negativeZero",
   "  =",
   "  isNegativeZero",
   "  (",
   "  x",
   "  )",
   "  ;",
   "  if",
   "  (",
   "- (",
   "  x",
   "  <",
   "  0",
   "- ||",
   "- negativeZero",
   "- )",
   "  &&",
   "  prev",
   "  ==",
   "  '-'",
   "  )",
   "  {",
   "  if",
   "  (",
   "  (",
   "  x",
   "  <",
   "  0",
   "  ||",
   "  negativeZero",
   "  )",
   "  &&",
   "  prev",
   "  ==",
   "  '-'",
   "  )",
   "  {",
   "  dd",
   "  (",
   "  \" \"",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 40,
  "changes_set": [
   "  ublic",
   "  void",
   "  visit",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  parent",
   "  )",
   "  {",
   "  ode",
   "  nameNode",
   "  =",
   "  n",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ;",
   "  ameInformation",
   "  ns",
   "  =",
   "  createNameInformation",
   "  (",
   "  t",
   "  ,",
   "  nameNode",
   "  ,",
   "  n",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  ns",
   "  !=",
   "  null",
   "  &&",
   "  ns",
   "  .",
   "  onlyAffectsClassDef",
   "  )",
   "  {",
   "  JsName",
   "  name",
   "  =",
   "  getName",
   "  (",
   "  ns",
   "  .",
   "  name",
   "  ,",
   "- true",
   "+ false",
   "  )",
   "  ;",
   "+ if",
   "+ (",
   "+ name",
   "+ !=",
   "+ null",
   "+ )",
   "+ {",
   "  JsName",
   "  name",
   "  =",
   "  getName",
   "  (",
   "  ns",
   "  .",
   "  name",
   "  ,",
   "  true",
   "  )",
   "  ;",
   "  efNodes",
   "  .",
   "  add",
   "  (",
   "  new",
   "  ClassDefiningFunctionNode",
   "  (",
   "  ame",
   "  ,",
   "  n",
   "  ,",
   "  parent",
   "  ,",
   "  parent",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  )",
   "  )",
   "  ;",
   "+ }"
  ]
 },
 {
  "number": 42,
  "changes_set": [
   "  verrideode",
   "  processForInLoop",
   "  (",
   "  ForInLoop",
   "  loopNode",
   "  )",
   "  {",
   "  if",
   "  (",
   "  loopNode",
   "  .",
   "  isForEach",
   "  (",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- loopNode",
   "- .",
   "- isForEach",
   "- (",
   "- )",
   "- )",
   "- {",
   "- errorReporter",
   "- .",
   "- error",
   "- (",
   "  errorReporter",
   "  .",
   "  error",
   "  (",
   "  \"unsupported language extension: for each\"",
   "  ,",
   "- \"unsupported language extension: for each\"",
   "- ,",
   "  sourceName",
   "  ,",
   "- sourceName",
   "- ,",
   "- loopNode",
   "- .",
   "- getLineno",
   "- (",
   "- )",
   "- ,",
   "- \"\"",
   "- ,",
   "- 0",
   "- )",
   "- ;",
   "  loopNode",
   "  .",
   "  getLineno",
   "  (",
   "  )",
   "  ,",
   "  \"\"",
   "  ,",
   "  0",
   "  )",
   "  ;",
   "  /",
   "  Return",
   "  the",
   "  bare",
   "  minimum",
   "  to",
   "  put",
   "  the",
   "  AST",
   "  in",
   "  a",
   "  valid",
   "  state",
   "  .",
   "  return",
   "  newNode",
   "  (",
   "  Token",
   "  .",
   "  EXPR_RESULT",
   "  ,",
   "  Node",
   "  .",
   "  newNumber",
   "  (",
   "  0",
   "  )",
   "  )",
   "  ;",
   "- return",
   "- newNode",
   "- (",
   "- Token",
   "- .",
   "- EXPR_RESULT",
   "- ,",
   "- Node",
   "- .",
   "- newNumber",
   "- (",
   "- 0",
   "- )",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  newNode",
   "  (",
   "  oken",
   "  .",
   "  FOR",
   "  ,",
   "  ransform",
   "  (",
   "  loopNode",
   "  .",
   "  getIterator",
   "  (",
   "  )",
   "  )",
   "  ,"
  ]
 },
 {
  "number": 41,
  "changes_set": [
   "  unctionTypeBuilder",
   "  inferFromOverriddenFunction",
   "  (",
   "  /",
   "  Clone",
   "  any",
   "  remaining",
   "  params",
   "  that",
   "  aren",
   "  in",
   "  the",
   "  function",
   "  literal",
   "  .",
   "  while",
   "  (",
   "  oldParams",
   "  .",
   "  hasNext",
   "  (",
   "  )",
   "  )",
   "  {",
   "- while",
   "- (",
   "- oldParams",
   "- .",
   "- hasNext",
   "- (",
   "- )",
   "- )",
   "- {",
   "- paramBuilder",
   "- .",
   "- newParameterFromNode",
   "- (",
   "- oldParams",
   "- .",
   "- next",
   "- (",
   "- )",
   "- )",
   "- ;",
   "  paramBuilder",
   "  .",
   "  newParameterFromNode",
   "  (",
   "  oldParams",
   "  .",
   "  next",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  arametersNode",
   "  =",
   "  paramBuilder",
   "  .",
   "  build",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 41,
  "changes_set": [
   "  ullable",
   "  Node",
   "  argsParent",
   "  ,",
   "  /",
   "  Copy",
   "  over",
   "  any",
   "  old",
   "  parameters",
   "  that",
   "  aren",
   "  in",
   "  the",
   "  param",
   "  list",
   "  .",
   "  if",
   "  (",
   "  !",
   "  isVarArgs",
   "  )",
   "  {",
   "- if",
   "- (",
   "- !",
   "- isVarArgs",
   "- )",
   "- {",
   "- while",
   "- (",
   "- oldParameterType",
   "- !=",
   "- null",
   "- &&",
   "- !",
   "- isVarArgs",
   "- )",
   "- {",
   "  while",
   "  (",
   "  oldParameterType",
   "  !=",
   "  null",
   "  &&",
   "  !",
   "  isVarArgs",
   "  )",
   "  {",
   "  builder",
   "  .",
   "  newParameterFromNode",
   "  (",
   "  oldParameterType",
   "  )",
   "  ;",
   "- builder",
   "- .",
   "- newParameterFromNode",
   "- (",
   "- oldParameterType",
   "- )",
   "- ;",
   "  oldParameterType",
   "  =",
   "  oldParameterType",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  ;",
   "- oldParameterType",
   "- =",
   "- oldParameterType",
   "- .",
   "- getNext",
   "- (",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  f",
   "  (",
   "  templateTypeName",
   "  !=",
   "  null",
   "  &&",
   "  !",
   "  foundTemplateType",
   "  )",
   "  {",
   "  eportError",
   "  (",
   "  TEMPLATE_TYPE_EXPECTED",
   "  ,",
   "  fnName",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 44,
  "changes_set": [
   "  oid",
   "  add",
   "  (",
   "  String",
   "  newcode",
   "  )",
   "  {",
   "  /",
   "  need",
   "  space",
   "  to",
   "  separate",
   "  .",
   "  This",
   "  is",
   "  not",
   "  pretty",
   "  printing",
   "  .",
   "  /",
   "  For",
   "  example",
   "  :",
   "  \"return foo;\"",
   "  ppend",
   "  (",
   "  \" \"",
   "  )",
   "  ;",
   "- }",
   "- else",
   "- if",
   "- (",
   "- c",
   "- ==",
   "- '/'",
   "- &&",
   "- getLastChar",
   "- (",
   "- )",
   "- ==",
   "- '/'",
   "- )",
   "- {",
   "  }",
   "  else",
   "  if",
   "  (",
   "  c",
   "  ==",
   "  '/'",
   "  &&",
   "  getLastChar",
   "  (",
   "  )",
   "  ==",
   "  '/'",
   "  )",
   "  {",
   "  /",
   "  Do",
   "  not",
   "  allow",
   "  a",
   "  forward",
   "  slash",
   "  to",
   "  appear",
   "  after",
   "  a",
   "  DIV",
   "  .",
   "  /",
   "  For",
   "  example",
   "  ,",
   "  /",
   "  REGEXP",
   "  DIV",
   "  REGEXP",
   "  /",
   "  is",
   "  valid",
   "  and",
   "  should",
   "  print",
   "  like",
   "  /",
   "  /"
  ]
 },
 {
  "number": 43,
  "changes_set": [
   "  ends",
   "  object",
   "  literals",
   "  in",
   "  this",
   "  statement",
   "  .",
   "  if",
   "  (",
   "  n",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  !=",
   "  null",
   "  &&",
   "  NodeUtil",
   "  .",
   "  isStatement",
   "  (",
   "  n",
   "  )",
   "  &&",
   "- if",
   "- (",
   "- n",
   "- .",
   "- getParent",
   "- (",
   "- )",
   "- !=",
   "- null",
   "- &&",
   "- NodeUtil",
   "- .",
   "- isStatement",
   "- (",
   "- n",
   "- )",
   "- &&",
   "- lentObjectLiterals",
   "- !=",
   "- null",
   "- )",
   "- {",
   "  lentObjectLiterals",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  for",
   "  (",
   "  Node",
   "  objLit",
   "  :",
   "  lentObjectLiterals",
   "  )",
   "  {",
   "- for",
   "+ defineObjectLiteral",
   "  (",
   "- Node",
   "  objLit",
   "- :",
   "- lentObjectLiterals",
   "  )",
   "- {",
   "- defineObjectLiteral",
   "- (",
   "- objLit",
   "- )",
   "  ;",
   "- defineObjectLiteral",
   "- (",
   "- objLit",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  lentObjectLiterals",
   "  .",
   "  clear",
   "  (",
   "  )",
   "  ;",
   "- lentObjectLiterals",
   "- .",
   "- clear",
   "- (",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  rivate",
   "  void",
   "  attachLiteralTypes",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  witch",
   "  (",
   "  n",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  )",
   "  {",
   "  ase",
   "  Token",
   "  .",
   "  NULL",
   "  :",
   "  .",
   "  setJSType",
   "  (",
   "  getNativeType",
   "  (",
   "  NULL_TYPE",
   "  )",
   "  )",
   "  ;",
   "  reak",
   "  ;",
   "  ase",
   "  Token",
   "  .",
   "  VOID",
   "  :",
   "  .",
   "  setJSType",
   "  (",
   "  getNativeType",
   "  (",
   "  VOID_TYPE",
   "  )",
   "  )",
   "  ;",
   "  reak",
   "  ;",
   "  ase",
   "  Token",
   "  .",
   "  STRING",
   "  :",
   "  /",
   "  Defer",
   "  keys",
   "  to",
   "  the",
   "  Token",
   "  .",
   "  OBJECTLIT",
   "  casef",
   "  (",
   "  !",
   "  NodeUtil",
   "  .",
   "  isObjectLitKey",
   "  (",
   "  n",
   "  ,",
   "  n",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  )",
   "  )",
   "  {",
   "  .",
   "  setJSType",
   "  (",
   "  getNativeType",
   "  (",
   "  STRING_TYPE",
   "  )",
   "  )",
   "  ;",
   "  reak",
   "  ;",
   "  ase",
   "  Token",
   "  .",
   "  NUMBER",
   "  :",
   "  .",
   "  setJSType",
   "  (",
   "  getNativeType",
   "  (",
   "  NUMBER_TYPE",
   "  )",
   "  )",
   "  ;",
   "  reak",
   "  ;",
   "  ase",
   "  Token",
   "  .",
   "  TRUE",
   "  :",
   "  ase",
   "  Token",
   "  .",
   "  FALSE",
   "  :",
   "  .",
   "  setJSType",
   "  (",
   "  getNativeType",
   "  (",
   "  BOOLEAN_TYPE",
   "  )",
   "  )",
   "  ;",
   "  reak",
   "  ;",
   "  ase",
   "  Token",
   "  .",
   "  REGEXP",
   "  :",
   "  .",
   "  setJSType",
   "  (",
   "  getNativeType",
   "  (",
   "  REGEXP_TYPE",
   "  )",
   "  )",
   "  ;",
   "  reak",
   "  ;",
   "  ase",
   "  Token",
   "  .",
   "  OBJECTLIT",
   "  :",
   "  JSDocInfo",
   "  info",
   "  =",
   "  n",
   "  .",
   "  getJSDocInfo",
   "  (",
   "  )",
   "  ;",
   "- JSDocInfo",
   "- info",
   "- =",
   "- n",
   "- .",
   "- getJSDocInfo",
   "- (",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- info",
   "- !=",
   "- null",
   "- &&",
   "  if",
   "  (",
   "  info",
   "  !=",
   "  null",
   "  &&",
   "  info",
   "  .",
   "  getLendsName",
   "  (",
   "  )",
   "  !=",
   "  null",
   "  )",
   "  {",
   "- info",
   "- .",
   "- getLendsName",
   "- (",
   "- )",
   "- !=",
   "- null",
   "- )",
   "- {",
   "- if",
   "- (",
   "- lentObjectLiterals",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  if",
   "  (",
   "  lentObjectLiterals",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  lentObjectLiterals",
   "  =",
   "  Lists",
   "  .",
   "  newArrayList",
   "  (",
   "  )",
   "  ;",
   "- lentObjectLiterals",
   "- =",
   "- Lists",
   "- .",
   "- newArrayList",
   "- (",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  lentObjectLiterals",
   "  .",
   "  add",
   "  (",
   "  n",
   "  )",
   "  ;",
   "- lentObjectLiterals",
   "- .",
   "- add",
   "- (",
   "- n",
   "- )",
   "- ;",
   "  }",
   "  else",
   "  {",
   "- }",
   "- else",
   "- {",
   "  efineObjectLiteral",
   "  (",
   "  n",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  reak",
   "  ;",
   "  /",
   "  NOTE",
   "  (",
   "  nicksantos",
   "  )",
   "  :",
   "  If",
   "  we",
   "  ever",
   "  support",
   "  Array",
   "  tuples",
   "  ,",
   "  /",
   "  we",
   "  will",
   "  need",
   "  to",
   "  put",
   "  ARRAYLIT",
   "  here",
   "  as",
   "  well",
   "  ."
  ]
 },
 {
  "number": 46,
  "changes_set": [
   "- verrideSType",
   "+ verridepublic",
   "+ JSType",
   "+ getLeastSupertype",
   "+ (",
   "+ JSType",
   "+ that",
   "+ )",
   "+ {",
   "+ if",
   "+ (",
   "+ !",
   "+ that",
   "+ .",
   "+ isRecordType",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "+ return",
   "+ super",
   "+ .",
   "+ getLeastSupertype",
   "+ (",
   "+ that",
   "+ )",
   "+ ;",
   "+ }",
   "+ RecordTypeBuilder",
   "+ builder",
   "+ =",
   "+ new",
   "+ RecordTypeBuilder",
   "+ (",
   "+ registry",
   "+ )",
   "+ ;",
   "+ for",
   "+ (",
   "+ String",
   "+ property",
   "+ :",
   "+ properties",
   "+ .",
   "+ keySet",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "+ if",
   "+ (",
   "+ that",
   "+ .",
   "+ toMaybeRecordType",
   "+ (",
   "+ )",
   "+ .",
   "+ hasProperty",
   "+ (",
   "+ property",
   "+ )",
   "+ &&",
   "+ that",
   "+ .",
   "+ toMaybeRecordType",
   "+ (",
   "+ )",
   "+ .",
   "+ getPropertyType",
   "+ (",
   "+ property",
   "+ )",
   "+ .",
   "+ isEquivalentTo",
   "+ (",
   "+ getPropertyType",
   "+ (",
   "+ property",
   "+ )",
   "+ )",
   "+ )",
   "+ {",
   "+ builder",
   "+ .",
   "+ addProperty",
   "+ (",
   "+ property",
   "+ ,",
   "+ getPropertyType",
   "+ (",
   "+ property",
   "+ )",
   "+ ,",
   "+ getPropertyNode",
   "+ (",
   "+ property",
   "+ )",
   "+ )",
   "+ ;",
   "+ }",
   "+ }",
   "+ return",
   "+ builder",
   "+ .",
   "+ build",
   "+ (",
   "+ )",
   "+ ;",
   "+ }",
   "+ SType",
   "  getGreatestSubtypeHelper",
   "  (",
   "  JSType",
   "  that",
   "  )",
   "  {",
   "  f",
   "  (",
   "  that",
   "  .",
   "  isRecordType",
   "  (",
   "  )",
   "  )",
   "  {",
   "  ecordType",
   "  thatRecord",
   "  =",
   "  that",
   "  .",
   "  toMaybeRecordType",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 47,
  "changes_set": [
   "  rivate",
   "  OriginalMapping",
   "  getOriginalMappingForEntry",
   "  (",
   "  Entry",
   "  entry",
   "  )",
   "  {",
   "  /",
   "  Adjust",
   "  the",
   "  line",
   "  /",
   "  column",
   "  here",
   "  to",
   "  be",
   "  start",
   "  at",
   "  1.",
   "  uilder",
   "  x",
   "  =",
   "  OriginalMapping",
   "  .",
   "  newBuilder",
   "  (",
   "  )",
   "  setOriginalFile",
   "  (",
   "  sources",
   "  [",
   "  entry",
   "  .",
   "  getSourceFileId",
   "  (",
   "  )",
   "  ]",
   "  )",
   "  .",
   "  setLineNumber",
   "  (",
   "  entry",
   "  .",
   "  getSourceLine",
   "  (",
   "  )",
   "- +",
   "- 1",
   "  )",
   "+ .",
   "+ setColumnPosition",
   "+ (",
   "+ entry",
   "+ .",
   "+ getSourceColumn",
   "+ (",
   "+ )",
   "+ )",
   "+ ;",
   "  .",
   "  setLineNumber",
   "  (",
   "  entry",
   "  .",
   "  getSourceLine",
   "  (",
   "  )",
   "  +",
   "  1",
   "  )",
   "- .",
   "- setColumnPosition",
   "- (",
   "- entry",
   "- .",
   "- getSourceColumn",
   "- (",
   "- )",
   "- +",
   "- 1",
   "- )",
   "- ;",
   "  .",
   "  setColumnPosition",
   "  (",
   "  entry",
   "  .",
   "  getSourceColumn",
   "  (",
   "  )",
   "  +",
   "  1",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  entry",
   "  .",
   "  getNameId",
   "  (",
   "  )",
   "  !=",
   "  UNMAPPED",
   "  )",
   "  {",
   "  .",
   "  setIdentifier",
   "  (",
   "  names",
   "  [",
   "  entry",
   "  .",
   "  getNameId",
   "  (",
   "  )",
   "  ]",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 47,
  "changes_set": [
   "  ublic",
   "  void",
   "  addMapping",
   "  (",
   "  /",
   "  zero",
   "  based",
   "  .",
   "  /",
   "  We",
   "  don",
   "  change",
   "  this",
   "  for",
   "  the",
   "  v1",
   "  or",
   "  v2",
   "  source",
   "  maps",
   "  but",
   "  for",
   "  /",
   "  v3",
   "  we",
   "  make",
   "  them",
   "  both",
   "  0",
   "  based",
   "  .",
   "  int",
   "  lineBaseOffset",
   "  =",
   "  1",
   "  ;",
   "- int",
   "- lineBaseOffset",
   "- =",
   "- 1",
   "- ;",
   "  if",
   "- (",
   "- generator",
   "- instanceof",
   "- SourceMapGeneratorV1if",
   "  (",
   "  generator",
   "  instanceof",
   "  SourceMapGeneratorV1",
   "  ||",
   "  generator",
   "  instanceof",
   "  SourceMapGeneratorV2",
   "  )",
   "  {",
   "- ||",
   "- generator",
   "- instanceof",
   "- SourceMapGeneratorV2",
   "- )",
   "- {",
   "  lineBaseOffset",
   "  =",
   "  0",
   "  ;",
   "- lineBaseOffset",
   "- =",
   "- 0",
   "- ;",
   "- }",
   "  }",
   "  enerator",
   "  .",
   "  addMapping",
   "  (",
   "  ourceFile",
   "  ,",
   "  originalName",
   "  ,",
   "  new",
   "  FilePosition",
   "  (",
   "  node",
   "  .",
   "  getLineno",
   "  (",
   "  )",
   "- -",
   "- lineBaseOffset",
   "  ,",
   "  node",
   "  .",
   "  getCharno",
   "  (",
   "  )",
   "  )",
   "  ,",
   "  new",
   "  FilePosition",
   "  (",
   "  node",
   "  .",
   "  getLineno",
   "  (",
   "  )",
   "  -",
   "  lineBaseOffset",
   "  ,",
   "  node",
   "  .",
   "  getCharno",
   "  (",
   "  )",
   "  )",
   "  ,",
   "  utputStartPosition",
   "  ,",
   "  outputEndPosition",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 48,
  "changes_set": [
   "  oid",
   "  maybeDeclareQualifiedName",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  JSDocInfo",
   "  info",
   "  ,",
   "  |",
   "  FunctionTypeBuilder",
   "  .",
   "  isFunctionTypeDeclaration",
   "  (",
   "  info",
   "  )",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  inferred",
   "- &&",
   "- rhsValue",
   "- !=",
   "- null",
   "- &&",
   "- rhsValue",
   "- .",
   "- isFunction",
   "- (",
   "- )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  inferred",
   "  &&",
   "  rhsValue",
   "  !=",
   "  null",
   "  &&",
   "  rhsValue",
   "  .",
   "  isFunction",
   "  (",
   "  )",
   "  )",
   "  {",
   "  /",
   "  Determining",
   "  declaration",
   "  for",
   "  2",
   "- if",
   "+ inferred",
   "+ =",
   "+ !",
   "+ (",
   "+ rhsValue",
   "+ !=",
   "+ null",
   "+ &&",
   "+ rhsValue",
   "+ .",
   "+ isFunction",
   "+ (",
   "+ )",
   "+ &&",
   "  (",
   "  info",
   "  !=",
   "  null",
   "+ ||",
   "+ !",
   "+ scope",
   "+ .",
   "+ isDeclared",
   "+ (",
   "+ qName",
   "+ ,",
   "+ false",
   "  )",
   "- {",
   "+ )",
   "+ )",
   "+ ;",
   "  if",
   "  (",
   "  info",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  inferred",
   "  =",
   "  false",
   "  ;",
   "- inferred",
   "- =",
   "- false",
   "- ;",
   "- }",
   "- else",
   "- if",
   "- (",
   "- !",
   "- scope",
   "- .",
   "- isDeclared",
   "- (",
   "- qName",
   "- ,",
   "- false",
   "- )",
   "- &&",
   "  }",
   "  else",
   "  if",
   "  (",
   "  !",
   "  scope",
   "  .",
   "  isDeclared",
   "  (",
   "  qName",
   "  ,",
   "  false",
   "  )",
   "  &&",
   "  n",
   "  .",
   "  isUnscopedQualifiedName",
   "  (",
   "  )",
   "  )",
   "  {",
   "- n",
   "- .",
   "- isUnscopedQualifiedName",
   "- (",
   "- )",
   "- )",
   "- {",
   "  inferred",
   "  =",
   "  false",
   "  ;",
   "- inferred",
   "- =",
   "- false",
   "- ;",
   "- }",
   "  }",
   "  f",
   "  (",
   "  !",
   "  inferred",
   "  )",
   "  {"
  ]
 },
 {
  "number": 49,
  "changes_set": [
   "  ublic",
   "  void",
   "  enterScope",
   "  (",
   "  NodeTraversal",
   "  t",
   "  )",
   "  {",
   "  enamer",
   "  =",
   "  nameStack",
   "  .",
   "  peek",
   "  (",
   "  )",
   "  .",
   "  forChildScope",
   "  (",
   "  )",
   "  ;",
   "- f",
   "+ if",
   "+ (",
   "+ declarationRoot",
   "+ .",
   "+ getType",
   "+ (",
   "+ )",
   "+ ==",
   "+ Token",
   "+ .",
   "+ FUNCTION",
   "+ )",
   "+ {",
   "+ for",
   "+ (",
   "+ Node",
   "+ c",
   "+ =",
   "+ declarationRoot",
   "+ .",
   "+ getFirstChild",
   "+ (",
   "+ )",
   "+ .",
   "+ getNext",
   "+ (",
   "+ )",
   "+ .",
   "+ getFirstChild",
   "+ (",
   "+ )",
   "+ ;",
   "+ c",
   "+ !=",
   "+ null",
   "+ ;",
   "+ c",
   "+ =",
   "+ c",
   "+ .",
   "+ getNext",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "+ String",
   "+ name",
   "+ =",
   "+ c",
   "+ .",
   "+ getString",
   "+ (",
   "+ )",
   "+ ;",
   "+ renamer",
   "+ .",
   "+ addDeclaredName",
   "+ (",
   "+ name",
   "+ )",
   "+ ;",
   "+ }",
   "+ Node",
   "+ functionBody",
   "+ =",
   "+ declarationRoot",
   "+ .",
   "+ getLastChild",
   "+ (",
   "+ )",
   "+ ;",
   "+ findDeclaredNames",
   "+ (",
   "+ functionBody",
   "+ ,",
   "+ null",
   "+ ,",
   "+ renamer",
   "+ )",
   "+ ;",
   "+ }",
   "+ elsef",
   "  (",
   "  declarationRoot",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  !=",
   "  Token",
   "  .",
   "  FUNCTION",
   "  )",
   "  {",
   "  /",
   "  Add",
   "  the",
   "  block",
   "  declarationsindDeclaredNames",
   "  (",
   "  declarationRoot",
   "  ,",
   "  null",
   "  ,",
   "  renamer",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 49,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  shouldTraverse",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  parent",
   "  )",
   "  {",
   "  enamer",
   "  .",
   "  addDeclaredName",
   "  (",
   "  name",
   "  )",
   "  ;",
   "  nameStack",
   "  .",
   "  push",
   "  (",
   "  renamer",
   "  )",
   "  ;",
   "- nameStack",
   "- .",
   "- push",
   "- (",
   "- renamer",
   "- )",
   "- ;",
   "  }",
   "- }",
   "- break",
   "- ;",
   "  break",
   "  ;",
   "  case",
   "  Token",
   "  .",
   "  LP",
   "  :",
   "  {",
   "- case",
   "- Token",
   "- .",
   "- LP",
   "- :",
   "- {",
   "- Renamer",
   "- renamer",
   "- =",
   "- nameStack",
   "- .",
   "- peek",
   "- (",
   "- )",
   "- .",
   "- forChildScope",
   "- (",
   "- )",
   "- ;",
   "  Renamer",
   "  renamer",
   "  =",
   "  nameStack",
   "  .",
   "  peek",
   "  (",
   "  )",
   "  .",
   "  forChildScope",
   "  (",
   "  )",
   "  ;",
   "  /",
   "  Add",
   "  the",
   "  function",
   "  parametersfor",
   "  (",
   "  Node",
   "  c",
   "  =",
   "  n",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ;",
   "  c",
   "  !=",
   "  null",
   "  ;",
   "  c",
   "  =",
   "  c",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  )",
   "  {",
   "- for",
   "- (",
   "- Node",
   "- c",
   "- =",
   "- n",
   "- .",
   "- getFirstChild",
   "- (",
   "- )",
   "- ;",
   "- c",
   "- !=",
   "- null",
   "- ;",
   "- c",
   "- =",
   "- c",
   "- .",
   "- getNext",
   "- (",
   "- )",
   "- )",
   "- {",
   "- String",
   "- name",
   "- =",
   "- c",
   "- .",
   "- getString",
   "- (",
   "- )",
   "- ;",
   "  String",
   "  name",
   "  =",
   "  c",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  ;",
   "  renamer",
   "  .",
   "  addDeclaredName",
   "  (",
   "  name",
   "  )",
   "  ;",
   "- renamer",
   "- .",
   "- addDeclaredName",
   "- (",
   "- name",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  Add",
   "  the",
   "  function",
   "  body",
   "  declarationsNode",
   "  functionBody",
   "  =",
   "  n",
   "  .",
   "  getNext",
   "  (",
   "- )",
   "- ;",
   "- Node",
   "- functionBody",
   "- =",
   "- n",
   "- .",
   "- getNext",
   "- (",
   "- )",
   "- ;",
   "- findDeclaredNames",
   "- (",
   "- functionBody",
   "- ,",
   "- null",
   "- ,",
   "- renamer",
   "  )",
   "  ;",
   "  findDeclaredNames",
   "  (",
   "  functionBody",
   "  ,",
   "  null",
   "  ,",
   "  renamer",
   "  )",
   "  ;",
   "  ameStack",
   "  .",
   "  push",
   "  (",
   "  renamer",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 49,
  "changes_set": [
   "  ublic",
   "  void",
   "  visit",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  parent",
   "  )",
   "  {",
   "  ase",
   "  Token",
   "  .",
   "  FUNCTION",
   "  :",
   "  /",
   "  Remove",
   "  the",
   "  function",
   "  body",
   "  scopenameStack",
   "  .",
   "  pop",
   "  (",
   "  )",
   "  ;",
   "- nameStack",
   "- .",
   "- pop",
   "- (",
   "- )",
   "- ;",
   "  /",
   "  Remove",
   "  function",
   "  recursive",
   "  name",
   "  (",
   "  if",
   "  any",
   "  )",
   "  .",
   "  ameStack",
   "  .",
   "  pop",
   "  (",
   "  )",
   "  ;",
   "  reak",
   "  ;",
   "- case",
   "- Token",
   "- .",
   "- LP",
   "- :",
   "  case",
   "  Token",
   "  .",
   "  LP",
   "  :",
   "  /",
   "  Note",
   "  :",
   "  The",
   "  parameters",
   "  and",
   "  function",
   "  body",
   "  variables",
   "  live",
   "  in",
   "  the",
   "  /",
   "  same",
   "  scope",
   "  ,",
   "  we",
   "  introduce",
   "  the",
   "  scope",
   "  when",
   "  in",
   "  the",
   "  \"shouldTraverse\"",
   "  /",
   "  visit",
   "  of",
   "  LP",
   "  ,",
   "  but",
   "  remove",
   "  it",
   "  when",
   "  when",
   "  we",
   "  exit",
   "  the",
   "  function",
   "  above",
   "  .",
   "  break",
   "  ;",
   "- break",
   "- ;",
   "  ase",
   "  Token",
   "  .",
   "  CATCH",
   "  :",
   "  /",
   "  Remove",
   "  catch",
   "  except",
   "  name",
   "  from",
   "  the",
   "  stack",
   "  of",
   "  names",
   "  ."
  ]
 },
 {
  "number": 50,
  "changes_set": [
   "  rivate",
   "  Node",
   "  tryFoldArrayJoin",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  ode",
   "  right",
   "  =",
   "  callTarget",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  right",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  if",
   "  (",
   "- right",
   "- .",
   "- getNext",
   "- (",
   "- )",
   "- !=",
   "- null",
   "- ||",
   "  !",
   "  NodeUtil",
   "  .",
   "  isImmutableValue",
   "  (",
   "  right",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  right",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  !=",
   "  null",
   "  ||",
   "  !",
   "  NodeUtil",
   "  .",
   "  isImmutableValue",
   "  (",
   "  right",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  n",
   "  ;"
  ]
 },
 {
  "number": 50,
  "changes_set": [
   "  rivate",
   "  Node",
   "  tryFoldArrayJoin",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  eturn",
   "  n",
   "  ;",
   "  if",
   "  (",
   "  right",
   "  !=",
   "  null",
   "  &&",
   "  right",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "- STRINGif",
   "- (",
   "- right",
   "- !=",
   "- null",
   "- &&",
   "- right",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- ==",
   "- Token",
   "- .",
   "  STRING",
   "- &&",
   "- \",\"",
   "- .",
   "- equals",
   "- (",
   "- right",
   "- .",
   "- getString",
   "- (",
   "- )",
   "- )",
   "- )",
   "- {",
   "  &&",
   "  \",\"",
   "  .",
   "  equals",
   "  (",
   "  right",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  )",
   "  )",
   "  {",
   "  /",
   "  \",\"",
   "  is",
   "  the",
   "  default",
   "  ,",
   "  it",
   "  doesn",
   "  need",
   "  to",
   "  be",
   "  explicitn",
   "  .",
   "  removeChild",
   "  (",
   "  right",
   "  )",
   "  ;",
   "- n",
   "- .",
   "- removeChild",
   "- (",
   "- right",
   "- )",
   "- ;",
   "  reportCodeChange",
   "  (",
   "  )",
   "  ;",
   "- reportCodeChange",
   "- (",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  tring",
   "  joinString",
   "  =",
   "  (",
   "  right",
   "  ==",
   "  null",
   "  )",
   "  ?",
   "  \",\"",
   "  :",
   "  NodeUtil",
   "  .",
   "  getStringValue",
   "  (",
   "  right",
   "  )",
   "  ;",
   "  ist",
   "  <",
   "  Node",
   "  >",
   "  arrayFoldedChildren",
   "  =",
   "  Lists",
   "  .",
   "  newLinkedList",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 53,
  "changes_set": [
   "  rivate",
   "  void",
   "  replaceAssignmentExpression",
   "  (",
   "  Var",
   "  v",
   "  ,",
   "  Reference",
   "  ref",
   "  ,",
   "  ode",
   "  replacement",
   "  ;",
   "  if",
   "  (",
   "  nodes",
   "  .",
   "  isEmpty",
   "  (",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- nodes",
   "- .",
   "- isEmpty",
   "- (",
   "- )",
   "- )",
   "- {",
   "  replacement",
   "  =",
   "  new",
   "  Node",
   "  (",
   "  Token",
   "  .",
   "  TRUE",
   "  )",
   "  ;",
   "- replacement",
   "- =",
   "- new",
   "- Node",
   "- (",
   "- Token",
   "- .",
   "- TRUE",
   "- )",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  /",
   "  All",
   "  assignments",
   "  evaluate",
   "  to",
   "  true",
   "  ,",
   "  so",
   "  make",
   "  sure",
   "  that",
   "  the",
   "  /",
   "  expr",
   "  statement",
   "  evaluates",
   "  to",
   "  true",
   "  in",
   "  case",
   "  it",
   "  matters",
   "  .",
   "  odes",
   "  .",
   "  add",
   "  (",
   "  new",
   "  Node",
   "  (",
   "  Token",
   "  .",
   "  TRUE",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 53,
  "changes_set": [
   "  rivate",
   "  void",
   "  replaceAssignmentExpression",
   "  (",
   "  Var",
   "  v",
   "  ,",
   "  Reference",
   "  ref",
   "  ,",
   "  ur",
   "  .",
   "  addChildToFront",
   "  (",
   "  nodes",
   "  .",
   "  get",
   "  (",
   "  i",
   "  )",
   "  )",
   "  ;",
   "  ur",
   "  .",
   "  addChildToFront",
   "  (",
   "  nodes",
   "  .",
   "  get",
   "  (",
   "  i",
   "  +",
   "  1",
   "  )",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  ode",
   "  replace",
   "  =",
   "  ref",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  ;",
   "  eplacement",
   "  .",
   "  copyInformationFromForTree",
   "  (",
   "  replace",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 51,
  "changes_set": [
   "  oid",
   "  addNumber",
   "  (",
   "  double",
   "  x",
   "  )",
   "  {",
   "  dd",
   "  (",
   "  \" \"",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  (",
   "  long",
   "  )",
   "  x",
   "  ==",
   "  x",
   "- &&",
   "- !",
   "- isNegativeZero",
   "- (",
   "- x",
   "- )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  (",
   "  long",
   "  )",
   "  x",
   "  ==",
   "  x",
   "  &&",
   "  !",
   "  isNegativeZero",
   "  (",
   "  x",
   "  )",
   "  )",
   "  {",
   "  ong",
   "  value",
   "  =",
   "  (",
   "  long",
   "  )",
   "  x",
   "  ;",
   "  ong",
   "  mantissa",
   "  =",
   "  value",
   "  ;",
   "  nt",
   "  exp",
   "  =",
   "  0",
   "  ;"
  ]
 },
 {
  "number": 52,
  "changes_set": [
   "  tatic",
   "  boolean",
   "  isSimpleNumber",
   "  (",
   "  String",
   "  s",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;",
   "  return",
   "  len",
   "  >",
   "  0",
   "- &&",
   "- s",
   "- .",
   "- charAt",
   "- (",
   "- 0",
   "- )",
   "- !=",
   "- '0'",
   "  ;",
   "  return",
   "  len",
   "  >",
   "  0",
   "  &&",
   "  s",
   "  .",
   "  charAt",
   "  (",
   "  0",
   "  )",
   "  !=",
   "  '0'",
   "  ;",
   "  tatic",
   "  double",
   "  getSimpleNumber",
   "  (",
   "  String",
   "  s",
   "  )",
   "  {"
  ]
 },
 {
  "number": 59,
  "changes_set": [
   "  ublic",
   "  void",
   "  initOptions",
   "  (",
   "  CompilerOptions",
   "  options",
   "  )",
   "  {",
   "  heckLevel",
   "  .",
   "  OFF",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  options",
   "  .",
   "  checkGlobalThisLevel",
   "  .",
   "  isOn",
   "  (",
   "  )",
   "- &&",
   "+ )",
   "+ {",
   "  if",
   "  (",
   "  options",
   "  .",
   "  checkGlobalThisLevel",
   "  .",
   "  isOn",
   "  (",
   "  )",
   "  &&",
   "- !",
   "- options",
   "- .",
   "- disables",
   "- (",
   "- DiagnosticGroups",
   "- .",
   "- GLOBAL_THIS",
   "- )",
   "- )",
   "- {",
   "  !",
   "  options",
   "  .",
   "  disables",
   "  (",
   "  DiagnosticGroups",
   "  .",
   "  GLOBAL_THIS",
   "  )",
   "  )",
   "  {",
   "  ptions",
   "  .",
   "  setWarningLevel",
   "  (",
   "  iagnosticGroups",
   "  .",
   "  GLOBAL_THIS",
   "  ,",
   "  ptions",
   "  .",
   "  checkGlobalThisLevel",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 55,
  "changes_set": [
   "  ublic",
   "  Node",
   "  parseHelperCode",
   "  (",
   "  Reducer",
   "  reducer",
   "  )",
   "  {",
   "  rivate",
   "  static",
   "  boolean",
   "  isReduceableFunctionExpression",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  return",
   "  NodeUtil",
   "  .",
   "  isFunctionExpression",
   "  (",
   "  n",
   "  )",
   "+ ;",
   "  return",
   "  NodeUtil",
   "  .",
   "  isFunctionExpression",
   "  (",
   "  n",
   "  )",
   "  &&",
   "  !",
   "  NodeUtil",
   "  .",
   "  isGetOrSetKey",
   "  (",
   "  n",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  )",
   "  ;",
   "- &&",
   "- !",
   "- NodeUtil",
   "- .",
   "- isGetOrSetKey",
   "- (",
   "- n",
   "- .",
   "- getParent",
   "- (",
   "- )",
   "- )",
   "- ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 54,
  "changes_set": [
   "  xtends",
   "  tag",
   "  .",
   "+ if",
   "- ObjectType",
   "- qVarType",
   "- =",
   "- ObjectType",
   "- .",
   "- cast",
   "  (",
   "+ !",
   "  qVar",
   "  .",
   "- getType",
   "+ isTypeInferred",
   "  (",
   "  )",
   "  )",
   "- ;",
   "+ {",
   "  ObjectType",
   "  qVarType",
   "  =",
   "  ObjectType",
   "  .",
   "  cast",
   "  (",
   "  qVar",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  qVarType",
   "  !=",
   "  null",
   "  &&",
   "- if",
   "- (",
   "- qVarType",
   "- !=",
   "- null",
   "- &&",
   "- rhsValue",
   "- !=",
   "- null",
   "- &&",
   "  rhsValue",
   "  !=",
   "  null",
   "  &&",
   "  rhsValue",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  OBJECTLIT",
   "  )",
   "  {",
   "- rhsValue",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- ==",
   "- Token",
   "- .",
   "- OBJECTLIT",
   "- )",
   "- {",
   "- typeRegistry",
   "- .",
   "- resetImplicitPrototype",
   "- (",
   "  typeRegistry",
   "  .",
   "  resetImplicitPrototype",
   "  (",
   "  rhsValue",
   "  .",
   "  getJSType",
   "  (",
   "  )",
   "  ,",
   "  qVarType",
   "  .",
   "  getImplicitPrototype",
   "  (",
   "  )",
   "  )",
   "  ;",
   "- rhsValue",
   "- .",
   "- getJSType",
   "- (",
   "- )",
   "- ,",
   "- qVarType",
   "- .",
   "- getImplicitPrototype",
   "- (",
   "- )",
   "- )",
   "- ;",
   "- }",
   "- else",
   "- if",
   "- (",
   "- !",
   "- qVar",
   "- .",
   "- isTypeInferred",
   "- (",
   "- )",
   "- )",
   "- {",
   "  }",
   "  else",
   "  if",
   "  (",
   "  !",
   "  qVar",
   "  .",
   "  isTypeInferred",
   "  (",
   "  )",
   "  )",
   "  {",
   "  /",
   "  If",
   "  the",
   "  programmer",
   "  has",
   "  declared",
   "  that",
   "  F",
   "  inherits",
   "  from",
   "  Super",
   "  ,",
   "  /",
   "  and",
   "  they",
   "  assign",
   "  F",
   "  .",
   "  prototype",
   "  to",
   "  some",
   "  arbitrary",
   "  expression",
   "  ,",
   "  /",
   "  there",
   "  not",
   "  much",
   "  we",
   "  can",
   "  do",
   "  .",
   "  We",
   "  just",
   "  ignore",
   "  the",
   "  expression",
   "  ,"
  ]
 },
 {
  "number": 54,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  setPrototype",
   "  (",
   "  PrototypeObjectType",
   "  prototype",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;",
   "- PrototypeObjectType",
   "+ boolean",
   "- oldPrototype",
   "+ replacedPrototype",
   "  =",
   "- this",
   "- .",
   "  prototype",
   "+ !=",
   "+ null",
   "  ;",
   "  PrototypeObjectType",
   "  oldPrototype",
   "  =",
   "  this",
   "  .",
   "  prototype",
   "- ;",
   "- boolean",
   "- replacedPrototype",
   "- =",
   "- oldPrototype",
   "- !=",
   "- null",
   "  ;",
   "  boolean",
   "  replacedPrototype",
   "  =",
   "  oldPrototype",
   "  !=",
   "  null",
   "  ;",
   "  his",
   "  .",
   "  prototype",
   "  =",
   "  prototype",
   "  ;",
   "  his",
   "  .",
   "  prototypeSlot",
   "  =",
   "  new",
   "  SimpleSlot",
   "  (",
   "  \"prototype\"",
   "  ,",
   "  prototype",
   "  ,",
   "  true",
   "  )",
   "  ;",
   "  his",
   "  .",
   "  prototype",
   "  .",
   "  setOwnerFunction",
   "  (",
   "  this",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  oldPrototype",
   "  !=",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- oldPrototype",
   "- !=",
   "- null",
   "- )",
   "- {",
   "  /",
   "  Disassociating",
   "  the",
   "  old",
   "  prototype",
   "  makes",
   "  this",
   "  easier",
   "  to",
   "  debug",
   "  --",
   "  /",
   "  we",
   "  don",
   "  have",
   "  to",
   "  worry",
   "  about",
   "  two",
   "  prototypes",
   "  running",
   "  around",
   "  .",
   "  oldPrototype",
   "  .",
   "  setOwnerFunction",
   "  (",
   "  null",
   "  )",
   "  ;",
   "- oldPrototype",
   "- .",
   "- setOwnerFunction",
   "- (",
   "- null",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  f",
   "  (",
   "  isConstructor",
   "  (",
   "  )",
   "  ||",
   "  isInterface",
   "  (",
   "  )",
   "  )",
   "  {",
   "  unctionType",
   "  superClass",
   "  =",
   "  getSuperClassConstructor",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 56,
  "changes_set": [
   "  ublic",
   "  String",
   "  getLine",
   "  (",
   "  int",
   "  lineNumber",
   "  )",
   "  {",
   "  /",
   "  If",
   "  next",
   "  new",
   "  line",
   "  cannot",
   "  be",
   "  found",
   "  ,",
   "  there",
   "  are",
   "  two",
   "  cases",
   "  /",
   "  1.",
   "  pos",
   "  already",
   "  reaches",
   "  the",
   "  end",
   "  of",
   "  file",
   "  ,",
   "  then",
   "  null",
   "  should",
   "  be",
   "  returned",
   "  /",
   "  2.",
   "  otherwise",
   "  ,",
   "  return",
   "  the",
   "  contents",
   "  between",
   "  pos",
   "  and",
   "  the",
   "  end",
   "  of",
   "  file",
   "  .",
   "  if",
   "  (",
   "  pos",
   "  >=",
   "  js",
   "  .",
   "  length",
   "  (",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- pos",
   "- >=",
   "- js",
   "- .",
   "- length",
   "- (",
   "- )",
   "- )",
   "- {",
   "  eturn",
   "  null",
   "  ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  return",
   "  js",
   "  .",
   "  substring",
   "  (",
   "  pos",
   "  ,",
   "  js",
   "  .",
   "  length",
   "  (",
   "  )",
   "  )",
   "  ;",
   "- return",
   "- js",
   "- .",
   "- substring",
   "- (",
   "- pos",
   "- ,",
   "- js",
   "- .",
   "- length",
   "- (",
   "- )",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  else",
   "  {",
   "  eturn",
   "  js",
   "  .",
   "  substring",
   "  (",
   "  pos",
   "  ,",
   "  js",
   "  .",
   "  indexOf",
   "  (",
   "  '\\n'",
   "  ,",
   "  pos",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 58,
  "changes_set": [
   "  rivate",
   "  void",
   "  computeGenKill",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  BitSet",
   "  gen",
   "  ,",
   "  BitSet",
   "  kill",
   "  ,",
   "  /",
   "  for",
   "  (",
   "  var",
   "  x",
   "  in",
   "  y",
   "  )",
   "  {",
   "  ...",
   "  }",
   "  hs",
   "  =",
   "  lhs",
   "  .",
   "  getLastChild",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  NodeUtil",
   "  .",
   "  isName",
   "  (",
   "  lhs",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- NodeUtil",
   "- .",
   "- isName",
   "- (",
   "- lhs",
   "- )",
   "- )",
   "- {",
   "  ddToSetIfLocal",
   "  (",
   "  lhs",
   "  ,",
   "  kill",
   "  )",
   "  ;",
   "  ddToSetIfLocal",
   "  (",
   "  lhs",
   "  ,",
   "  gen",
   "  )",
   "  ;",
   "  }",
   "  else",
   "  {",
   "- }",
   "- else",
   "- {",
   "  computeGenKill",
   "  (",
   "  lhs",
   "  ,",
   "  gen",
   "  ,",
   "  kill",
   "  ,",
   "  conditional",
   "  )",
   "  ;",
   "- computeGenKill",
   "- (",
   "- lhs",
   "- ,",
   "- gen",
   "- ,",
   "- kill",
   "- ,",
   "- conditional",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  omputeGenKill",
   "  (",
   "  rhs",
   "  ,",
   "  gen",
   "  ,",
   "  kill",
   "  ,",
   "  conditional",
   "  )",
   "  ;",
   "  eturn",
   "  ;"
  ]
 },
 {
  "number": 57,
  "changes_set": [
   "  rivate",
   "  static",
   "  String",
   "  extractClassNameIfGoog",
   "  (",
   "  Node",
   "  node",
   "  ,",
   "  Node",
   "  parent",
   "  ,",
   "  tring",
   "  qualifiedName",
   "  =",
   "  callee",
   "  .",
   "  getQualifiedName",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  functionName",
   "  .",
   "  equals",
   "  (",
   "  qualifiedName",
   "  )",
   "  )",
   "  {",
   "  ode",
   "  target",
   "  =",
   "  callee",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  target",
   "  !=",
   "  null",
   "- &&",
   "- target",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- ==",
   "- Token",
   "- .",
   "- STRING",
   "  )",
   "  {",
   "  if",
   "  (",
   "  target",
   "  !=",
   "  null",
   "  &&",
   "  target",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  STRING",
   "  )",
   "  {",
   "  lassName",
   "  =",
   "  target",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 62,
  "changes_set": [
   "  rivate",
   "  String",
   "  format",
   "  (",
   "  JSError",
   "  error",
   "  ,",
   "  boolean",
   "  warning",
   "  )",
   "  {",
   "  /",
   "  charno",
   "  ==",
   "  sourceExpert",
   "  .",
   "  length",
   "  (",
   "  )",
   "  means",
   "  something",
   "  is",
   "  missing",
   "  /",
   "  at",
   "  the",
   "  end",
   "  of",
   "  the",
   "  linef",
   "  (",
   "  excerpt",
   "  .",
   "  equals",
   "  (",
   "  LINE",
   "  )",
   "  &&",
   "  0",
   "  <=",
   "  charno",
   "  &&",
   "  charno",
   "- <=",
   "+ <",
   "  sourceExcerpt",
   "  .",
   "  length",
   "  (",
   "  )",
   "  )",
   "  {",
   "  &&",
   "  0",
   "  <=",
   "  charno",
   "  &&",
   "  charno",
   "  <=",
   "  sourceExcerpt",
   "  .",
   "  length",
   "  (",
   "  )",
   "  )",
   "  {",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  charno",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  har",
   "  c",
   "  =",
   "  sourceExcerpt",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  Character",
   "  .",
   "  isWhitespace",
   "  (",
   "  c",
   "  )",
   "  )",
   "  {"
  ]
 },
 {
  "number": 60,
  "changes_set": [
   "  tatic",
   "  TernaryValue",
   "  getImpureBooleanValue",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  /",
   "  ignoring",
   "  side",
   "  -",
   "  effectseturn",
   "  TernaryValue",
   "  .",
   "  TRUE",
   "  ;",
   "  case",
   "  Token",
   "  .",
   "  VOID",
   "  :",
   "- case",
   "- Token",
   "- .",
   "- VOID",
   "- :",
   "- return",
   "- TernaryValue",
   "- .",
   "- FALSE",
   "- ;",
   "  return",
   "  TernaryValue",
   "  .",
   "  FALSE",
   "  ;",
   "  efault",
   "  :",
   "  eturn",
   "  getPureBooleanValue",
   "  (",
   "  n",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 60,
  "changes_set": [
   "  tatic",
   "  TernaryValue",
   "  getPureBooleanValue",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  eturn",
   "  TernaryValue",
   "  .",
   "  FALSE",
   "  ;",
   "  ase",
   "  Token",
   "  .",
   "  VOID",
   "  :",
   "  if",
   "  (",
   "  !",
   "  mayHaveSideEffects",
   "  (",
   "  n",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- !",
   "- mayHaveSideEffects",
   "- (",
   "- n",
   "- .",
   "- getFirstChild",
   "- (",
   "- )",
   "- )",
   "- )",
   "- {",
   "  eturn",
   "  TernaryValue",
   "  .",
   "  FALSE",
   "  ;",
   "  }",
   "- }",
   "- break",
   "- ;",
   "  break",
   "  ;",
   "  ase",
   "  Token",
   "  .",
   "  NAME",
   "  :",
   "  tring",
   "  name",
   "  =",
   "  n",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 63,
  "changes_set": [
   "  rivate",
   "  String",
   "  format",
   "  (",
   "  JSError",
   "  error",
   "  ,",
   "  boolean",
   "  warning",
   "  )",
   "  {",
   "  /",
   "  charno",
   "  ==",
   "  sourceExpert",
   "  .",
   "  length",
   "  (",
   "  )",
   "  means",
   "  something",
   "  is",
   "  missing",
   "  /",
   "  at",
   "  the",
   "  end",
   "  of",
   "  the",
   "  linef",
   "  (",
   "  excerpt",
   "  .",
   "  equals",
   "  (",
   "  LINE",
   "  )",
   "  &&",
   "  0",
   "  <=",
   "  charno",
   "  &&",
   "  charno",
   "- <=",
   "+ <",
   "  sourceExcerpt",
   "  .",
   "  length",
   "  (",
   "  )",
   "  )",
   "  {",
   "  &&",
   "  0",
   "  <=",
   "  charno",
   "  &&",
   "  charno",
   "  <=",
   "  sourceExcerpt",
   "  .",
   "  length",
   "  (",
   "  )",
   "  )",
   "  {",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  charno",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  har",
   "  c",
   "  =",
   "  sourceExcerpt",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  Character",
   "  .",
   "  isWhitespace",
   "  (",
   "  c",
   "  )",
   "  )",
   "  {"
  ]
 },
 {
  "number": 61,
  "changes_set": [
   "  tatic",
   "  boolean",
   "  functionCallHasSideEffects",
   "  (",
   "  /",
   "  Functions",
   "  in",
   "  the",
   "  \"Math\"",
   "  namespace",
   "  have",
   "  no",
   "  side",
   "  effects",
   "  .",
   "  if",
   "  (",
   "  nameNode",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  NAME",
   "  )",
   "  {",
   "- if",
   "- (",
   "- nameNode",
   "- .",
   "- getFirstChild",
   "- (",
   "- )",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- ==",
   "- Token",
   "- .",
   "- NAME",
   "- )",
   "- {",
   "- String",
   "- namespaceName",
   "- =",
   "- nameNode",
   "- .",
   "- getFirstChild",
   "- (",
   "- )",
   "- .",
   "- getString",
   "- (",
   "- )",
   "- ;",
   "  String",
   "  namespaceName",
   "  =",
   "  nameNode",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  namespaceName",
   "  .",
   "  equals",
   "  (",
   "  \"Math\"",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- namespaceName",
   "- .",
   "- equals",
   "- (",
   "- \"Math\"",
   "- )",
   "- )",
   "- {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  f",
   "  (",
   "  compiler",
   "  !=",
   "  null",
   "  &&",
   "  !",
   "  compiler",
   "  .",
   "  hasRegExpGlobalReferences",
   "  (",
   "  )",
   "  )",
   "  {",
   "  f",
   "  (",
   "  nameNode",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  REGEXP"
  ]
 },
 {
  "number": 64,
  "changes_set": [
   "  ublic",
   "  Void",
   "  call",
   "  (",
   "  )",
   "  throws",
   "  Exception",
   "  {",
   "  /",
   "  if",
   "  LanguageMode",
   "  is",
   "  ECMASCRIPT5_STRICT",
   "  ,",
   "  only",
   "  print",
   "  e",
   "  strict",
   "  for",
   "  the",
   "  first",
   "  input",
   "  fileString",
   "  code",
   "  =",
   "  toSource",
   "  (",
   "  root",
   "  ,",
   "  sourceMap",
   "- ,",
   "- inputSeqNum",
   "- ==",
   "- 0",
   "  )",
   "  ;",
   "  String",
   "  code",
   "  =",
   "  toSource",
   "  (",
   "  root",
   "  ,",
   "  sourceMap",
   "  ,",
   "  inputSeqNum",
   "  ==",
   "  0",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  !",
   "  code",
   "  .",
   "  isEmpty",
   "  (",
   "  )",
   "  )",
   "  {",
   "  b",
   "  .",
   "  append",
   "  (",
   "  code",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 64,
  "changes_set": [
   "  verridetring",
   "  toSource",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  nitCompilerOptionsIfTesting",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  toSource",
   "  (",
   "  n",
   "  ,",
   "  null",
   "- ,",
   "- true",
   "  )",
   "  ;",
   "  return",
   "  toSource",
   "  (",
   "  n",
   "  ,",
   "  null",
   "  ,",
   "  true",
   "  )",
   "  ;",
   "  *",
   "  *",
   "  Generates",
   "  JavaScript",
   "  source",
   "  code",
   "  for",
   "  an",
   "  AST",
   "  .",
   "  /",
   "  private",
   "  String",
   "  toSource",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  SourceMap",
   "  sourceMap",
   "- ,",
   "- boolean",
   "- firstOutput",
   "  )",
   "  {",
   "  private",
   "  String",
   "  toSource",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  SourceMap",
   "  sourceMap",
   "  ,",
   "  boolean",
   "  firstOutput",
   "  )",
   "  {",
   "  odePrinter",
   "  .",
   "  Builder",
   "  builder",
   "  =",
   "  new",
   "  CodePrinter",
   "  .",
   "  Builder",
   "  (",
   "  n",
   "  )",
   "  ;",
   "  uilder",
   "  .",
   "  setPrettyPrint",
   "  (",
   "  options",
   "  .",
   "  prettyPrint",
   "  )",
   "  ;",
   "  uilder",
   "  .",
   "  setLineBreak",
   "  (",
   "  options",
   "  .",
   "  lineBreak",
   "  )",
   "  ;",
   "  uilder",
   "  .",
   "  setSourceMap",
   "  (",
   "  sourceMap",
   "  )",
   "  ;",
   "  uilder",
   "  .",
   "  setSourceMapDetailLevel",
   "  (",
   "  options",
   "  .",
   "  sourceMapDetailLevel",
   "  )",
   "  ;",
   "  builder",
   "  .",
   "  setTagAsStrict",
   "  (",
   "- firstOutput",
   "- &&",
   "  builder",
   "  .",
   "  setTagAsStrict",
   "  (",
   "  firstOutput",
   "  &&",
   "  ptions",
   "  .",
   "  getLanguageOut",
   "  (",
   "  )",
   "  ==",
   "  LanguageMode",
   "  .",
   "  ECMASCRIPT5_STRICT",
   "  )",
   "  ;",
   "  uilder",
   "  .",
   "  setLineLengthThreshold",
   "  (",
   "  options",
   "  .",
   "  lineLengthThreshold",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 65,
  "changes_set": [
   "  tatic",
   "  String",
   "  strEscape",
   "  (",
   "  String",
   "  s",
   "  ,",
   "  char",
   "  quote",
   "  ,",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  s",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  har",
   "  c",
   "  =",
   "  s",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  )",
   "  ;",
   "  witch",
   "  (",
   "  c",
   "  )",
   "  {",
   "  case",
   "  '\\0'",
   "  :",
   "  sb",
   "  .",
   "  append",
   "  (",
   "- \"\\\\000\"",
   "+ \"\\\\0\"",
   "  )",
   "  ;",
   "  break",
   "  ;",
   "  case",
   "  '\\0'",
   "  :",
   "  sb",
   "  .",
   "  append",
   "  (",
   "  \"\\\\000\"",
   "  )",
   "  ;",
   "  break",
   "  ;",
   "  ase",
   "  '\\n'",
   "  :",
   "  sb",
   "  .",
   "  append",
   "  (",
   "  \"\\\\n\"",
   "  )",
   "  ;",
   "  break",
   "  ;",
   "  ase",
   "  '\\r'",
   "  :",
   "  sb",
   "  .",
   "  append",
   "  (",
   "  \"\\\\r\"",
   "  )",
   "  ;",
   "  break",
   "  ;",
   "  ase",
   "  '\\t'",
   "  :",
   "  sb",
   "  .",
   "  append",
   "  (",
   "  \"\\\\t\"",
   "  )",
   "  ;",
   "  break",
   "  ;"
  ]
 },
 {
  "number": 66,
  "changes_set": [
   "  ublic",
   "  void",
   "  visit",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  parent",
   "  )",
   "  {",
   "  /",
   "  Object",
   "  literal",
   "  keys",
   "  are",
   "  handled",
   "  with",
   "  OBJECTLITf",
   "  (",
   "  !",
   "  NodeUtil",
   "  .",
   "  isObjectLitKey",
   "  (",
   "  n",
   "  ,",
   "  n",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  )",
   "  )",
   "  {",
   "  nsureTyped",
   "  (",
   "  t",
   "  ,",
   "  n",
   "  ,",
   "  STRING_TYPE",
   "  )",
   "  ;",
   "  }",
   "  else",
   "  {",
   "- }",
   "- else",
   "- {",
   "  /",
   "  Object",
   "  literal",
   "  keys",
   "  are",
   "  not",
   "  typeabletypeable",
   "  =",
   "  false",
   "  ;",
   "- typeable",
   "- =",
   "- false",
   "- ;",
   "  reak",
   "  ;"
  ]
 },
 {
  "number": 73,
  "changes_set": [
   "  tatic",
   "  String",
   "  strEscape",
   "  (",
   "  String",
   "  s",
   "  ,",
   "  char",
   "  quote",
   "  ,",
   "  /",
   "  No",
   "  charsetEncoder",
   "  provided",
   "  -",
   "  pass",
   "  straight",
   "  latin",
   "  characters",
   "  /",
   "  through",
   "  ,",
   "  and",
   "  escape",
   "  the",
   "  rest",
   "  .",
   "  Doing",
   "  the",
   "  explicit",
   "  character",
   "  /",
   "  check",
   "  is",
   "  measurably",
   "  faster",
   "  than",
   "  using",
   "  the",
   "  CharsetEncoder",
   "  .",
   "  if",
   "  (",
   "  c",
   "  >",
   "  0x1f",
   "  &&",
   "  c",
   "- <",
   "+ <=",
   "  0x7f",
   "  )",
   "  {",
   "  if",
   "  (",
   "  c",
   "  >",
   "  0x1f",
   "  &&",
   "  c",
   "  <",
   "  0x7f",
   "  )",
   "  {",
   "  b",
   "  .",
   "  append",
   "  (",
   "  c",
   "  )",
   "  ;",
   "  else",
   "  {",
   "  /",
   "  Other",
   "  characters",
   "  can",
   "  be",
   "  misinterpreted",
   "  by",
   "  some",
   "  js",
   "  parsers",
   "  ,"
  ]
 },
 {
  "number": 67,
  "changes_set": [
   "  rivate",
   "  boolean",
   "  isPrototypePropertyAssign",
   "  (",
   "  Node",
   "  assign",
   "  )",
   "  {",
   "  ode",
   "  n",
   "  =",
   "  assign",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  n",
   "  !=",
   "  null",
   "  &&",
   "  NodeUtil",
   "  .",
   "  isVarOrSimpleAssignLhs",
   "  (",
   "  n",
   "  ,",
   "  assign",
   "  )",
   "  &",
   "  n",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  GETPROP",
   "- &&",
   "- assign",
   "- .",
   "- getParent",
   "- (",
   "- )",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- ==",
   "- Token",
   "- .",
   "- EXPR_RESULT",
   "  )",
   "  {",
   "  &&",
   "  assign",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  EXPR_RESULT",
   "  )",
   "  {",
   "  /",
   "  We",
   "  want",
   "  to",
   "  exclude",
   "  the",
   "  assignment",
   "  itself",
   "  from",
   "  the",
   "  usage",
   "  listoolean",
   "  isChainedProperty",
   "  =",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  GETPROP",
   "  ;"
  ]
 },
 {
  "number": 74,
  "changes_set": [
   "  rivate",
   "  Node",
   "  tryFoldComparison",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  left",
   "  ,",
   "  Node",
   "  right",
   "  )",
   "  {",
   "  &",
   "  right",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  .",
   "  equals",
   "  (",
   "  \"undefined\"",
   "  )",
   "  )",
   "  |",
   "  (",
   "  Token",
   "  .",
   "  VOID",
   "  ==",
   "  right",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  &",
   "  NodeUtil",
   "  .",
   "  isLiteralValue",
   "  (",
   "  right",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ,",
   "  false",
   "  )",
   "  )",
   "  )",
   "  ;",
   "  int",
   "  lhType",
   "  =",
   "- getNormalizedNodeType",
   "+ left",
   "+ .",
   "+ getType",
   "  (",
   "- left",
   "+ )",
   "+ ;",
   "+ int",
   "+ rhType",
   "+ =",
   "+ right",
   "+ .",
   "+ getType",
   "+ (",
   "  )",
   "  ;",
   "  int",
   "  lhType",
   "  =",
   "  getNormalizedNodeType",
   "  (",
   "  left",
   "- )",
   "- ;",
   "- int",
   "- rhType",
   "- =",
   "- getNormalizedNodeType",
   "- (",
   "- right",
   "  )",
   "  ;",
   "  int",
   "  rhType",
   "  =",
   "  getNormalizedNodeType",
   "  (",
   "  right",
   "  )",
   "  ;",
   "  witch",
   "  (",
   "  lhType",
   "  )",
   "  {",
   "  ase",
   "  Token",
   "  .",
   "  VOID",
   "  :",
   "  f",
   "  (",
   "  !",
   "  NodeUtil",
   "  .",
   "  isLiteralValue",
   "  (",
   "  left",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ,",
   "  false",
   "  )",
   "  )",
   "  {"
  ]
 },
 {
  "number": 74,
  "changes_set": [
   "  eturn",
   "  Translate",
   "  NOT",
   "  expressions",
   "  into",
   "  TRUE",
   "  or",
   "  FALSE",
   "  when",
   "  possible",
   "  .",
   "  /",
   "  private",
   "  int",
   "  getNormalizedNodeType",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "- private",
   "- int",
   "- getNormalizedNodeType",
   "- (",
   "- Node",
   "- n",
   "- )",
   "- {",
   "  int",
   "  type",
   "  =",
   "  n",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ;",
   "- int",
   "- type",
   "- =",
   "- n",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- type",
   "- ==",
   "- Token",
   "- .",
   "- NOT",
   "- )",
   "- {",
   "  if",
   "  (",
   "  type",
   "  ==",
   "  Token",
   "  .",
   "  NOT",
   "  )",
   "  {",
   "  TernaryValue",
   "  value",
   "  =",
   "  NodeUtil",
   "  .",
   "  getPureBooleanValue",
   "  (",
   "  n",
   "  )",
   "  ;",
   "- TernaryValue",
   "- value",
   "- =",
   "- NodeUtil",
   "- .",
   "- getPureBooleanValue",
   "- (",
   "- n",
   "- )",
   "- ;",
   "- switch",
   "- (",
   "- value",
   "- )",
   "- {",
   "  switch",
   "  (",
   "  value",
   "  )",
   "  {",
   "  case",
   "  TRUE",
   "  :",
   "- case",
   "- TRUE",
   "- :",
   "- return",
   "- Token",
   "- .",
   "- TRUE",
   "- ;",
   "  return",
   "  Token",
   "  .",
   "  TRUE",
   "  ;",
   "  case",
   "  FALSE",
   "  :",
   "- case",
   "- FALSE",
   "- :",
   "- return",
   "- Token",
   "- .",
   "- FALSE",
   "- ;",
   "  return",
   "  Token",
   "  .",
   "  FALSE",
   "  ;",
   "  }",
   "  }",
   "- }",
   "- }",
   "  return",
   "  type",
   "  ;",
   "- return",
   "- type",
   "- ;",
   "- }",
   "  }",
   "  *",
   "  *",
   "  The",
   "  result",
   "  of",
   "  the",
   "  comparison",
   "  as",
   "  a",
   "  Boolean",
   "  or",
   "  null",
   "  if",
   "  the"
  ]
 },
 {
  "number": 71,
  "changes_set": [
   "  rivate",
   "  void",
   "  checkPropertyVisibility",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  f",
   "  (",
   "  objectType",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  /",
   "  Is",
   "  this",
   "  a",
   "  normal",
   "  property",
   "  access",
   "  ,",
   "  or",
   "  are",
   "  we",
   "  trying",
   "  to",
   "  override",
   "  /",
   "  an",
   "  existing",
   "  property",
   "  ?",
   "  boolean",
   "  isOverride",
   "  =",
   "- parent",
   "+ t",
   "  .",
   "- getJSDocInfo",
   "+ inGlobalScope",
   "  (",
   "  )",
   "- !=",
   "- null",
   "  &&",
   "  boolean",
   "  isOverride",
   "  =",
   "  parent",
   "  .",
   "  getJSDocInfo",
   "  (",
   "  )",
   "  !=",
   "  null",
   "  &&",
   "  arent",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  ASSIGN",
   "  &&",
   "  arent",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ==",
   "  getprop",
   "  ;"
  ]
 },
 {
  "number": 68,
  "changes_set": [
   "  oolean",
   "  parse",
   "  (",
   "  )",
   "  {",
   "  reak",
   "  ;",
   "  }",
   "- }",
   "  oken",
   "  =",
   "  eatTokensUntilEOL",
   "  (",
   "  )",
   "  ;",
   "+ }",
   "  ontinue",
   "  retry",
   "  ;"
  ]
 },
 {
  "number": 68,
  "changes_set": [
   "  rivate",
   "  Node",
   "  parseBasicTypeExpression",
   "  (",
   "  JsDocToken",
   "  token",
   "  )",
   "  {",
   "  restoreLookAhead",
   "  (",
   "  token",
   "  )",
   "  ;",
   "- restoreLookAhead",
   "- (",
   "- token",
   "- )",
   "- ;",
   "  eturn",
   "  reportGenericTypeSyntaxWarning",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 68,
  "changes_set": [
   "  rivate",
   "  Node",
   "  parseFunctionType",
   "  (",
   "  JsDocToken",
   "  token",
   "  )",
   "  {",
   "  /",
   "  NOTE",
   "  (",
   "  nicksantos",
   "  )",
   "  :",
   "  We",
   "  not",
   "  implementing",
   "  generics",
   "  at",
   "  the",
   "  moment",
   "  ,",
   "  so",
   "  /",
   "  just",
   "  throw",
   "  out",
   "  TypeParameters",
   "  .",
   "  f",
   "  (",
   "  token",
   "  !=",
   "  JsDocToken",
   "  .",
   "  LP",
   "  )",
   "  {",
   "  restoreLookAhead",
   "  (",
   "  token",
   "  )",
   "  ;",
   "- restoreLookAhead",
   "- (",
   "- token",
   "- )",
   "- ;",
   "  eturn",
   "  reportTypeSyntaxWarning",
   "  (",
   "  \"msg.jsdoc.missing.lp\"",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 69,
  "changes_set": [
   "  rivate",
   "  void",
   "  visitCall",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  /",
   "  Functions",
   "  with",
   "  explcit",
   "  is",
   "  ypes",
   "  must",
   "  be",
   "  called",
   "  in",
   "  a",
   "  GETPROP",
   "  /",
   "  or",
   "  GETELEM",
   "  .",
   "  if",
   "  (",
   "  functionType",
   "  .",
   "  isOrdinaryFunction",
   "  (",
   "  )",
   "  &&",
   "- if",
   "- (",
   "- functionType",
   "- .",
   "- isOrdinaryFunction",
   "- (",
   "- )",
   "- &&",
   "  !",
   "  functionType",
   "  .",
   "  getTypeOfThis",
   "  (",
   "  )",
   "  .",
   "  isUnknownType",
   "- (",
   "- )",
   "- &&",
   "- !",
   "- functionType",
   "- .",
   "- getTypeOfThis",
   "- (",
   "- )",
   "- .",
   "- isUnknownType",
   "- (",
   "- )",
   "- &&",
   "- !",
   "- functionType",
   "- .",
   "- getTypeOfThis",
   "- (",
   "- )",
   "- .",
   "- isNativeObjectType",
   "  (",
   "  )",
   "  &&",
   "  !",
   "  functionType",
   "  .",
   "  getTypeOfThis",
   "  (",
   "  )",
   "  .",
   "  isNativeObjectType",
   "  (",
   "  )",
   "  &&",
   "  !",
   "  (",
   "  child",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  GETELEM",
   "  ||",
   "- !",
   "- (",
   "- child",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- ==",
   "- Token",
   "- .",
   "- GETELEM",
   "- ||",
   "- child",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- ==",
   "- Token",
   "- .",
   "- GETPROP",
   "- )",
   "- )",
   "- {",
   "  child",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  GETPROP",
   "  )",
   "  )",
   "  {",
   "  report",
   "  (",
   "  t",
   "  ,",
   "  n",
   "  ,",
   "  EXPECTED_THIS_TYPE",
   "  ,",
   "  functionType",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  )",
   "  ;",
   "- report",
   "- (",
   "- t",
   "- ,",
   "- n",
   "- ,",
   "- EXPECTED_THIS_TYPE",
   "- ,",
   "- functionType",
   "- .",
   "- toString",
   "- (",
   "- )",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  isitParameterList",
   "  (",
   "  t",
   "  ,",
   "  n",
   "  ,",
   "  functionType",
   "  )",
   "  ;",
   "  nsureTyped",
   "  (",
   "  t",
   "  ,",
   "  n",
   "  ,",
   "  functionType",
   "  .",
   "  getReturnType",
   "  (",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 70,
  "changes_set": [
   "  rivate",
   "  void",
   "  declareArguments",
   "  (",
   "  Node",
   "  functionNode",
   "  )",
   "  {",
   "  or",
   "  (",
   "  Node",
   "  astParameter",
   "  :",
   "  astParameters",
   "  .",
   "  children",
   "  (",
   "  )",
   "  )",
   "  {",
   "  f",
   "  (",
   "  jsDocParameter",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  efineSlot",
   "  (",
   "  astParameter",
   "  ,",
   "  functionNode",
   "  ,",
   "  jsDocParameter",
   "  .",
   "  getJSType",
   "  (",
   "  )",
   "  ,",
   "- false",
   "+ true",
   "  )",
   "  ;",
   "  jsDocParameter",
   "  .",
   "  getJSType",
   "  (",
   "  )",
   "  ,",
   "  false",
   "  )",
   "  ;",
   "  sDocParameter",
   "  =",
   "  jsDocParameter",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  ;",
   "  else",
   "  {",
   "  efineSlot",
   "  (",
   "  astParameter",
   "  ,",
   "  functionNode",
   "  ,",
   "  null",
   "  ,",
   "  true",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 72,
  "changes_set": [
   "  rivate",
   "  void",
   "  visitLabel",
   "  (",
   "  Node",
   "  node",
   "  ,",
   "  Node",
   "  parent",
   "  )",
   "  {",
   "  tring",
   "  name",
   "  =",
   "  nameNode",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  ;",
   "  abelInfo",
   "  li",
   "  =",
   "  getLabelInfo",
   "  (",
   "  name",
   "  )",
   "  ;",
   "  /",
   "  This",
   "  is",
   "  a",
   "  label",
   "  ...",
   "  if",
   "  (",
   "  li",
   "  .",
   "  referenced",
   "- ||",
   "- !",
   "- removeUnused",
   "  )",
   "  {",
   "  if",
   "  (",
   "  li",
   "  .",
   "  referenced",
   "  ||",
   "  !",
   "  removeUnused",
   "  )",
   "  {",
   "  tring",
   "  newName",
   "  =",
   "  getNameForId",
   "  (",
   "  li",
   "  .",
   "  id",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  !",
   "  name",
   "  .",
   "  equals",
   "  (",
   "  newName",
   "  )",
   "  )",
   "  {",
   "  /",
   "  ...",
   "  and",
   "  it",
   "  is",
   "  used",
   "  ,",
   "  give",
   "  it",
   "  the",
   "  short",
   "  name",
   "  ."
  ]
 },
 {
  "number": 76,
  "changes_set": [
   "  rivate",
   "  boolean",
   "  isVariableStillLiveWithinExpression",
   "  (",
   "  /",
   "  If",
   "  the",
   "  currently",
   "  node",
   "  is",
   "  the",
   "  first",
   "  child",
   "  of",
   "  /",
   "  AND",
   "  /",
   "  OR",
   "  ,",
   "  be",
   "  conservative",
   "  only",
   "  consider",
   "  the",
   "  READs",
   "  /",
   "  of",
   "  the",
   "  second",
   "  operand",
   "  .",
   "  if",
   "  (",
   "  n",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  !=",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- n",
   "- .",
   "- getNext",
   "- (",
   "- )",
   "- !=",
   "- null",
   "- )",
   "- {",
   "  state",
   "  =",
   "  isVariableReadBeforeKill",
   "  (",
   "- state",
   "- =",
   "- isVariableReadBeforeKill",
   "- (",
   "  n",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  ,",
   "  variable",
   "  )",
   "  ;",
   "- n",
   "- .",
   "- getNext",
   "- (",
   "- )",
   "- ,",
   "- variable",
   "- )",
   "- ;",
   "  if",
   "  (",
   "  state",
   "  ==",
   "  VariableLiveness",
   "  .",
   "  KILL",
   "  )",
   "  {",
   "- if",
   "- (",
   "- state",
   "- ==",
   "- VariableLiveness",
   "- .",
   "- KILL",
   "- )",
   "- {",
   "  state",
   "  =",
   "  VariableLiveness",
   "  .",
   "  MAYBE_LIVE",
   "  ;",
   "- state",
   "- =",
   "- VariableLiveness",
   "- .",
   "- MAYBE_LIVE",
   "- ;",
   "  }",
   "  }",
   "- }",
   "- }",
   "- break",
   "- ;",
   "  break",
   "  ;",
   "  ase",
   "  Token",
   "  .",
   "  HOOK",
   "  :",
   "  /",
   "  If",
   "  current",
   "  node",
   "  is",
   "  the",
   "  condition",
   "  ,",
   "  check",
   "  each",
   "  following",
   "  /",
   "  branch",
   "  ,",
   "  otherwise",
   "  it",
   "  is",
   "  a",
   "  conditional",
   "  branch",
   "  and",
   "  the",
   "  /",
   "  other",
   "  branch",
   "  can",
   "  be",
   "  ignored",
   "  .",
   "  if",
   "  (",
   "  n",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  !=",
   "  null",
   "  &&",
   "  n",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  !=",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- n",
   "- .",
   "- getNext",
   "- (",
   "- )",
   "- !=",
   "- null",
   "- &&",
   "- n",
   "- .",
   "- getNext",
   "- (",
   "- )",
   "- .",
   "- getNext",
   "- (",
   "- )",
   "- !=",
   "- null",
   "- )",
   "- {",
   "  state",
   "  =",
   "  checkHookBranchReadBeforeKill",
   "  (",
   "- state",
   "- =",
   "- checkHookBranchReadBeforeKill",
   "- (",
   "  n",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  ,",
   "  n",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  ,",
   "  variable",
   "  )",
   "  ;",
   "- n",
   "- .",
   "- getNext",
   "- (",
   "- )",
   "- ,",
   "- n",
   "- .",
   "- getNext",
   "- (",
   "- )",
   "- .",
   "- getNext",
   "- (",
   "- )",
   "- ,",
   "- variable",
   "- )",
   "- ;",
   "  }",
   "- }",
   "- break",
   "- ;",
   "  break",
   "  ;",
   "  efault",
   "  :",
   "  or",
   "  (",
   "  Node",
   "  sibling",
   "  =",
   "  n",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  ;",
   "  sibling",
   "  !=",
   "  null",
   "  ;",
   "  ibling",
   "  =",
   "  sibling",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  )",
   "  {",
   "+ if",
   "+ (",
   "+ !",
   "+ ControlFlowGraph",
   "+ .",
   "+ isEnteringNewCfgNode",
   "+ (",
   "+ sibling",
   "+ )",
   "+ )",
   "+ {",
   "  tate",
   "  =",
   "  isVariableReadBeforeKill",
   "  (",
   "  sibling",
   "  ,",
   "  variable",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  state",
   "  !=",
   "  VariableLiveness",
   "  .",
   "  MAYBE_LIVE",
   "  )",
   "  {",
   "- if",
   "- (",
   "- state",
   "- !=",
   "- VariableLiveness",
   "- .",
   "- MAYBE_LIVE",
   "- )",
   "- {",
   "  break",
   "  ;",
   "- break",
   "- ;",
   "- }",
   "- }",
   "- }",
   "  }",
   "  }",
   "  }",
   "  /",
   "  If",
   "  we",
   "  see",
   "  a",
   "  READ",
   "  or",
   "  KILL",
   "  there",
   "  is",
   "  no",
   "  need",
   "  to",
   "  continue",
   "  .",
   "  f",
   "  (",
   "  state",
   "  ==",
   "  VariableLiveness",
   "  .",
   "  READ",
   "  )",
   "  {",
   "  eturn",
   "  true",
   "  ;",
   "  else",
   "  if",
   "  (",
   "  state",
   "  ==",
   "  VariableLiveness",
   "  .",
   "  KILL",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;",
   "+ }",
   "+ }",
   "+ }",
   "  =",
   "  n",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 76,
  "changes_set": [
   "  rivate",
   "  VariableLiveness",
   "  isVariableReadBeforeKill",
   "  (",
   "  /",
   "  Conditionalsase",
   "  Token",
   "  .",
   "  OR",
   "  :",
   "  ase",
   "  Token",
   "  .",
   "  AND",
   "  :",
   "  VariableLiveness",
   "  v1",
   "  =",
   "  isVariableReadBeforeKill",
   "  (",
   "- VariableLiveness",
   "- v1",
   "- =",
   "- isVariableReadBeforeKill",
   "- (",
   "- n",
   "- .",
   "- getFirstChild",
   "- (",
   "- )",
   "- ,",
   "- variable",
   "- )",
   "- ;",
   "  n",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ,",
   "  variable",
   "  )",
   "  ;",
   "  VariableLiveness",
   "  v2",
   "  =",
   "  isVariableReadBeforeKill",
   "  (",
   "- VariableLiveness",
   "- v2",
   "- =",
   "- isVariableReadBeforeKill",
   "- (",
   "- n",
   "- .",
   "- getLastChild",
   "- (",
   "- )",
   "- ,",
   "- variable",
   "- )",
   "- ;",
   "  n",
   "  .",
   "  getLastChild",
   "  (",
   "  )",
   "  ,",
   "  variable",
   "  )",
   "  ;",
   "  /",
   "  With",
   "  a",
   "  AND",
   "  /",
   "  OR",
   "  the",
   "  first",
   "  branch",
   "  always",
   "  runs",
   "  ,",
   "  but",
   "  the",
   "  second",
   "  is",
   "  /",
   "  may",
   "  not",
   "  .",
   "  if",
   "  (",
   "  v1",
   "  !=",
   "  VariableLiveness",
   "  .",
   "  MAYBE_LIVE",
   "  )",
   "  {",
   "- if",
   "- (",
   "- v1",
   "- !=",
   "- VariableLiveness",
   "- .",
   "- MAYBE_LIVE",
   "- )",
   "- {",
   "  return",
   "  v1",
   "  ;",
   "- return",
   "- v1",
   "- ;",
   "- }",
   "- else",
   "- if",
   "- (",
   "- v2",
   "- ==",
   "- VariableLiveness",
   "- .",
   "- READ",
   "- )",
   "- {",
   "  }",
   "  else",
   "  if",
   "  (",
   "  v2",
   "  ==",
   "  VariableLiveness",
   "  .",
   "  READ",
   "  )",
   "  {",
   "  return",
   "  VariableLiveness",
   "  .",
   "  READ",
   "  ;",
   "- return",
   "- VariableLiveness",
   "- .",
   "- READ",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  return",
   "  VariableLiveness",
   "  .",
   "  MAYBE_LIVE",
   "  ;",
   "- return",
   "- VariableLiveness",
   "- .",
   "- MAYBE_LIVE",
   "- ;",
   "- }",
   "  }",
   "  ase",
   "  Token",
   "  .",
   "  HOOK",
   "  :",
   "  VariableLiveness",
   "  first",
   "  =",
   "  isVariableReadBeforeKill",
   "  (",
   "- VariableLiveness",
   "- first",
   "- =",
   "- isVariableReadBeforeKill",
   "- (",
   "- n",
   "- .",
   "- getFirstChild",
   "- (",
   "- )",
   "- ,",
   "- variable",
   "- )",
   "- ;",
   "  n",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ,",
   "  variable",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  first",
   "  !=",
   "  VariableLiveness",
   "  .",
   "  MAYBE_LIVE",
   "  )",
   "  {",
   "- if",
   "- (",
   "- first",
   "- !=",
   "- VariableLiveness",
   "- .",
   "- MAYBE_LIVE",
   "- )",
   "- {",
   "  return",
   "  first",
   "  ;",
   "- return",
   "- first",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  checkHookBranchReadBeforeKill",
   "  (",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  ,",
   "  n",
   "  .",
   "  getLastChild",
   "  (",
   "  )",
   "  ,",
   "  variable",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 76,
  "changes_set": [
   "  rivate",
   "  VariableLiveness",
   "  isVariableReadBeforeKill",
   "  (",
   "  /",
   "  Expressions",
   "  are",
   "  evaluated",
   "  left",
   "  -",
   "  right",
   "  ,",
   "  depth",
   "  first",
   "  .",
   "  or",
   "  (",
   "  Node",
   "  child",
   "  =",
   "  n",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ;",
   "  hild",
   "  !=",
   "  null",
   "  ;",
   "  child",
   "  =",
   "  child",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  )",
   "  {",
   "- ariableLiveness",
   "- state",
   "- =",
   "- isVariableReadBeforeKill",
   "+ if",
   "+ (",
   "+ !",
   "+ ControlFlowGraph",
   "+ .",
   "+ isEnteringNewCfgNode",
   "  (",
   "  child",
   "- ,",
   "- variable",
   "  )",
   "- ;",
   "- f",
   "- (",
   "- state",
   "- !=",
   "- VariableLiveness",
   "- .",
   "- MAYBE_LIVE",
   "  )",
   "  {",
   "- eturn",
   "- state",
   "- ;",
   "- eturn",
   "- VariableLiveness",
   "- .",
   "- MAYBE_LIVE",
   "- ;"
  ]
 },
 {
  "number": 79,
  "changes_set": [
   "  rivate",
   "  void",
   "  reportCodeChange",
   "  (",
   "  String",
   "  changeDescription",
   "  )",
   "  {",
   "  ublic",
   "  void",
   "  process",
   "  (",
   "  Node",
   "  externs",
   "  ,",
   "  Node",
   "  root",
   "  )",
   "  {",
   "  ew",
   "  NodeTraversal",
   "  (",
   "  ompiler",
   "  ,",
   "  new",
   "  NormalizeStatements",
   "  (",
   "  compiler",
   "  ,",
   "  assertOnChange",
   "  )",
   "  )",
   "  .",
   "- traverseRoots",
   "+ traverse",
   "  (",
   "- externs",
   "- ,",
   "  root",
   "  )",
   "  ;",
   "  .",
   "  traverseRoots",
   "  (",
   "  externs",
   "  ,",
   "  root",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  MAKE_LOCAL_NAMES_UNIQUE",
   "  )",
   "  {",
   "  akeDeclaredNamesUnique",
   "  renamer",
   "  =",
   "  new",
   "  MakeDeclaredNamesUnique",
   "  (",
   "  )",
   "  ;",
   "  odeTraversal",
   "  t",
   "  =",
   "  new",
   "  NodeTraversal",
   "  (",
   "  compiler",
   "  ,",
   "  renamer",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 79,
  "changes_set": [
   "  rivate",
   "  void",
   "  createSynthesizedExternVar",
   "  (",
   "  String",
   "  varName",
   "  )",
   "  {",
   "  etSynthesizedExternsRoot",
   "  (",
   "  )",
   "  .",
   "  addChildToBack",
   "  (",
   "  ew",
   "  Node",
   "  (",
   "  Token",
   "  .",
   "  VAR",
   "  ,",
   "  nameNode",
   "  )",
   "  )",
   "  ;",
   "  arsToDeclareInExterns",
   "  .",
   "  remove",
   "  (",
   "  varName",
   "  )",
   "  ;",
   "  compiler",
   "  .",
   "  reportCodeChange",
   "  (",
   "  )",
   "  ;",
   "- compiler",
   "- .",
   "- reportCodeChange",
   "- (",
   "- )",
   "- ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 77,
  "changes_set": [
   "  tatic",
   "  String",
   "  strEscape",
   "  (",
   "  String",
   "  s",
   "  ,",
   "  char",
   "  quote",
   "  ,",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  s",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  har",
   "  c",
   "  =",
   "  s",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  )",
   "  ;",
   "  witch",
   "  (",
   "  c",
   "  )",
   "  {",
   "  case",
   "  '\\0'",
   "  :",
   "  sb",
   "  .",
   "  append",
   "  (",
   "  \"\\\\0\"",
   "  )",
   "  ;",
   "  break",
   "  ;",
   "- case",
   "- '\\0'",
   "- :",
   "- sb",
   "- .",
   "- append",
   "- (",
   "- \"\\\\0\"",
   "- )",
   "- ;",
   "- break",
   "- ;",
   "  ase",
   "  '\\n'",
   "  :",
   "  sb",
   "  .",
   "  append",
   "  (",
   "  \"\\\\n\"",
   "  )",
   "  ;",
   "  break",
   "  ;",
   "  ase",
   "  '\\r'",
   "  :",
   "  sb",
   "  .",
   "  append",
   "  (",
   "  \"\\\\r\"",
   "  )",
   "  ;",
   "  break",
   "  ;",
   "  ase",
   "  '\\t'",
   "  :",
   "  sb",
   "  .",
   "  append",
   "  (",
   "  \"\\\\t\"",
   "  )",
   "  ;",
   "  break",
   "  ;"
  ]
 },
 {
  "number": 75,
  "changes_set": [
   "  tatic",
   "  Double",
   "  getNumberValue",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  tatic",
   "  Double",
   "  getStringNumberValue",
   "  (",
   "  String",
   "  rawJsString",
   "  )",
   "  {",
   "  if",
   "  (",
   "  rawJsString",
   "  .",
   "  contains",
   "  (",
   "  \"\\u000b\"",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- rawJsString",
   "- .",
   "- contains",
   "- (",
   "- \"\\u000b\"",
   "- )",
   "- )",
   "- {",
   "  /",
   "  vertical",
   "  tab",
   "  is",
   "  not",
   "  always",
   "  whitespacereturn",
   "  null",
   "  ;",
   "- return",
   "- null",
   "- ;",
   "- }",
   "  }",
   "  tring",
   "  s",
   "  =",
   "  trimJsWhiteSpace",
   "  (",
   "  rawJsString",
   "  )",
   "  ;",
   "  /",
   "  return",
   "  ScriptRuntime",
   "  .",
   "  toNumber",
   "  (",
   "  s",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 78,
  "changes_set": [
   "  rivate",
   "  Node",
   "  performArithmeticOp",
   "  (",
   "  int",
   "  opType",
   "  ,",
   "  Node",
   "  left",
   "  ,",
   "  Node",
   "  right",
   "  )",
   "  {",
   "  reak",
   "  ;",
   "  ase",
   "  Token",
   "  .",
   "  MOD",
   "  :",
   "  f",
   "  (",
   "  rval",
   "  ==",
   "  0",
   "  )",
   "  {",
   "+ error",
   "+ (",
   "+ DiagnosticType",
   "+ .",
   "+ error",
   "+ (",
   "+ \"JSC_DIVIDE_BY_0_ERROR\"",
   "+ ,",
   "+ \"Divide by 0\"",
   "+ )",
   "+ ,",
   "+ right",
   "+ )",
   "+ ;",
   "  eturn",
   "  null",
   "  ;",
   "  esult",
   "  =",
   "  lval",
   "  %",
   "  rval",
   "  ;",
   "  reak",
   "  ;",
   "  ase",
   "  Token",
   "  .",
   "  DIV",
   "  :",
   "  f",
   "  (",
   "  rval",
   "  ==",
   "  0",
   "  )",
   "  {",
   "+ error",
   "+ (",
   "+ DiagnosticType",
   "+ .",
   "+ error",
   "+ (",
   "+ \"JSC_DIVIDE_BY_0_ERROR\"",
   "+ ,",
   "+ \"Divide by 0\"",
   "+ )",
   "+ ,",
   "+ right",
   "+ )",
   "+ ;",
   "  eturn",
   "  null",
   "  ;",
   "  esult",
   "  =",
   "  lval",
   "  /",
   "  rval",
   "  ;"
  ]
 },
 {
  "number": 83,
  "changes_set": [
   "  verrideublic",
   "  int",
   "  parseArguments",
   "  (",
   "  Parameters",
   "  params",
   "  )",
   "  throws",
   "  CmdLineException",
   "  {",
   "  String",
   "  param",
   "  =",
   "- null",
   "+ params",
   "+ .",
   "+ getParameter",
   "+ (",
   "+ 0",
   "+ )",
   "  ;",
   "  String",
   "  param",
   "  =",
   "  null",
   "  ;",
   "- try",
   "- {",
   "  try",
   "  {",
   "  param",
   "  =",
   "  params",
   "  .",
   "  getParameter",
   "  (",
   "  0",
   "  )",
   "  ;",
   "- param",
   "- =",
   "- params",
   "- .",
   "- getParameter",
   "- (",
   "- 0",
   "- )",
   "- ;",
   "- }",
   "- catch",
   "- (",
   "- CmdLineException",
   "- e",
   "- )",
   "- {",
   "- }",
   "  }",
   "  catch",
   "  (",
   "  CmdLineException",
   "  e",
   "  )",
   "  {",
   "  }",
   "  f",
   "  (",
   "  param",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  etter",
   "  .",
   "  addValue",
   "  (",
   "  true",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 80,
  "changes_set": [
   "  tatic",
   "  boolean",
   "  isBooleanResultHelper",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  /",
   "  Inversionase",
   "  Token",
   "  .",
   "  NOT",
   "  :",
   "  /",
   "  delete",
   "  operator",
   "  returns",
   "  a",
   "  boolean",
   "  .",
   "  case",
   "  Token",
   "  .",
   "  DELPROP",
   "  :",
   "- case",
   "- Token",
   "- .",
   "- DELPROP",
   "- :",
   "  eturn",
   "  true",
   "  ;",
   "  efault",
   "  :",
   "  eturn",
   "  false",
   "  ;"
  ]
 },
 {
  "number": 80,
  "changes_set": [
   "  tatic",
   "  boolean",
   "  evaluatesToLocalValue",
   "  (",
   "  Node",
   "  value",
   "  ,",
   "  Predicate",
   "  <",
   "  Node",
   "  >",
   "  locals",
   "  )",
   "  {",
   "  ase",
   "  Token",
   "  .",
   "  OBJECTLIT",
   "  :",
   "  /",
   "  Literals",
   "  objects",
   "  with",
   "  non",
   "  -",
   "  literal",
   "  children",
   "  are",
   "  allowed",
   "  .",
   "  eturn",
   "  true",
   "  ;",
   "  case",
   "  Token",
   "  .",
   "  DELPROP",
   "  :",
   "- case",
   "- Token",
   "- .",
   "- DELPROP",
   "- :",
   "  ase",
   "  Token",
   "  .",
   "  IN",
   "  :",
   "  /",
   "  TODO",
   "  (",
   "  johnlenz",
   "  )",
   "  :",
   "  should",
   "  IN",
   "  operator",
   "  be",
   "  included",
   "  in",
   "  isSimpleOperator",
   "  ?",
   "  eturn",
   "  true",
   "  ;"
  ]
 },
 {
  "number": 81,
  "changes_set": [
   "  ode",
   "  processFunctionNode",
   "  (",
   "  FunctionNode",
   "  functionNode",
   "  )",
   "  {",
   "  ame",
   "  name",
   "  =",
   "  functionNode",
   "  .",
   "  getFunctionName",
   "  (",
   "  )",
   "  ;",
   "  oolean",
   "  isUnnamedFunction",
   "  =",
   "  false",
   "  ;",
   "  f",
   "  (",
   "  name",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  int",
   "  functionType",
   "  =",
   "  functionNode",
   "  .",
   "  getFunctionType",
   "  (",
   "  )",
   "  ;",
   "- int",
   "- functionType",
   "- =",
   "- functionNode",
   "- .",
   "- getFunctionType",
   "- (",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- functionType",
   "- !=",
   "- FunctionNode",
   "- .",
   "- FUNCTION_EXPRESSION",
   "- )",
   "- {",
   "  if",
   "  (",
   "  functionType",
   "  !=",
   "  FunctionNode",
   "  .",
   "  FUNCTION_EXPRESSION",
   "  )",
   "  {",
   "  errorReporter",
   "  .",
   "  error",
   "  (",
   "- errorReporter",
   "- .",
   "- error",
   "- (",
   "  \"unnamed function statement\"",
   "- ,",
   "- \"unnamed function statement\"",
   "- ,",
   "- sourceName",
   "  ,",
   "  sourceName",
   "  ,",
   "  functionNode",
   "  .",
   "  getLineno",
   "  (",
   "  )",
   "  ,",
   "  \"\"",
   "  ,",
   "  0",
   "  )",
   "  ;",
   "- functionNode",
   "- .",
   "- getLineno",
   "- (",
   "- )",
   "- ,",
   "- \"\"",
   "- ,",
   "- 0",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  ame",
   "  =",
   "  new",
   "  Name",
   "  (",
   "  )",
   "  ;",
   "  ame",
   "  .",
   "  setIdentifier",
   "  (",
   "  \"\"",
   "  )",
   "  ;",
   "  sUnnamedFunction",
   "  =",
   "  true",
   "  ;"
  ]
 },
 {
  "number": 82,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  isNoObjectType",
   "  (",
   "  )",
   "  {",
   "  ublic",
   "  final",
   "  boolean",
   "  isEmptyType",
   "  (",
   "  )",
   "  {",
   "  return",
   "  isNoType",
   "  (",
   "  )",
   "  ||",
   "  isNoObjectType",
   "  (",
   "  )",
   "  ||",
   "  isNoResolvedType",
   "  (",
   "  )",
   "- ||",
   "+ ;",
   "  return",
   "  isNoType",
   "  (",
   "  )",
   "  ||",
   "  isNoObjectType",
   "  (",
   "  )",
   "  ||",
   "  isNoResolvedType",
   "  (",
   "  )",
   "  ||",
   "  (",
   "  registry",
   "  .",
   "  getNativeFunctionType",
   "  (",
   "- (",
   "- registry",
   "- .",
   "- getNativeFunctionType",
   "- (",
   "- JSTypeNative",
   "- .",
   "- LEAST_FUNCTION_TYPE",
   "- )",
   "- ==",
   "- this",
   "- )",
   "- ;",
   "  JSTypeNative",
   "  .",
   "  LEAST_FUNCTION_TYPE",
   "  )",
   "  ==",
   "  this",
   "  )",
   "  ;",
   "  ublic",
   "  boolean",
   "  isNumberObjectType",
   "  (",
   "  )",
   "  {"
  ]
 },
 {
  "number": 85,
  "changes_set": [
   "  rivate",
   "  Node",
   "  tryRemoveUnconditionalBranching",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  eturn",
   "  n",
   "  ;",
   "+ if",
   "+ (",
   "+ n",
   "+ .",
   "+ getParent",
   "+ (",
   "+ )",
   "+ ==",
   "+ null",
   "+ )",
   "+ {",
   "+ List",
   "+ <",
   "+ DiGraphEdge",
   "+ <",
   "+ Node",
   "+ ,",
   "+ Branch",
   "+ >",
   "+ >",
   "+ outEdges",
   "+ =",
   "+ gNode",
   "+ .",
   "+ getOutEdges",
   "+ (",
   "+ )",
   "+ ;",
   "+ if",
   "+ (",
   "+ outEdges",
   "+ .",
   "+ size",
   "+ (",
   "+ )",
   "+ ==",
   "+ 1",
   "+ )",
   "+ {",
   "+ return",
   "+ tryRemoveUnconditionalBranching",
   "+ (",
   "+ outEdges",
   "+ .",
   "+ get",
   "+ (",
   "+ 0",
   "+ )",
   "+ .",
   "+ getDestination",
   "+ (",
   "+ )",
   "+ .",
   "+ getValue",
   "+ (",
   "+ )",
   "+ )",
   "+ ;",
   "+ }",
   "+ }",
   "  witch",
   "  (",
   "  n",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  )",
   "  {",
   "+ case",
   "+ Token",
   "+ .",
   "+ BLOCK",
   "+ :",
   "+ if",
   "+ (",
   "+ n",
   "+ .",
   "+ hasChildren",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "+ Node",
   "+ first",
   "+ =",
   "+ n",
   "+ .",
   "+ getFirstChild",
   "+ (",
   "+ )",
   "+ ;",
   "+ return",
   "+ tryRemoveUnconditionalBranching",
   "+ (",
   "+ first",
   "+ )",
   "+ ;",
   "+ }",
   "+ else",
   "+ {",
   "+ return",
   "+ tryRemoveUnconditionalBranching",
   "+ (",
   "+ ControlFlowAnalysis",
   "+ .",
   "+ computeFollowNode",
   "+ (",
   "+ n",
   "+ )",
   "+ )",
   "+ ;",
   "+ }",
   "  ase",
   "  Token",
   "  .",
   "  RETURN",
   "  :",
   "  f",
   "  (",
   "  n",
   "  .",
   "  hasChildren",
   "  (",
   "  )",
   "  )",
   "  {",
   "  reak",
   "  ;"
  ]
 },
 {
  "number": 85,
  "changes_set": [
   "  rivate",
   "  Node",
   "  tryRemoveUnconditionalBranching",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  n",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  ==",
   "  null",
   "  ||",
   "  n",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  FUNCTION",
   "  )",
   "  )",
   "  {",
   "  reconditions",
   "  .",
   "  checkState",
   "  (",
   "  outEdges",
   "  .",
   "  get",
   "  (",
   "  0",
   "  )",
   "  .",
   "  getValue",
   "  (",
   "  )",
   "  ==",
   "  Branch",
   "  .",
   "  UNCOND",
   "  )",
   "  ;",
   "  Node",
   "  fallThrough",
   "  =",
   "+ tryRemoveUnconditionalBranching",
   "+ (",
   "  computeFollowing",
   "  (",
   "  n",
   "+ )",
   "  )",
   "  ;",
   "  Node",
   "  fallThrough",
   "  =",
   "  computeFollowing",
   "  (",
   "  n",
   "  )",
   "  ;",
   "  ode",
   "  nextCfgNode",
   "  =",
   "  outEdges",
   "  .",
   "  get",
   "  (",
   "  0",
   "  )",
   "  .",
   "  getDestination",
   "  (",
   "  )",
   "  .",
   "  getValue",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  nextCfgNode",
   "  ==",
   "  fallThrough",
   "  )",
   "  {",
   "  emoveDeadExprStatementSafely",
   "  (",
   "  n",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 85,
  "changes_set": [
   "  rivate",
   "  Node",
   "  tryRemoveUnconditionalBranching",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  rivate",
   "  Node",
   "  computeFollowing",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  ode",
   "  next",
   "  =",
   "  ControlFlowAnalysis",
   "  .",
   "  computeFollowNode",
   "  (",
   "  n",
   "  )",
   "  ;",
   "  while",
   "  (",
   "  next",
   "  !=",
   "  null",
   "  &&",
   "  next",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  BLOCK",
   "  )",
   "  {",
   "- while",
   "- (",
   "- next",
   "- !=",
   "- null",
   "- &&",
   "- next",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- ==",
   "- Token",
   "- .",
   "- BLOCK",
   "- )",
   "- {",
   "- if",
   "- (",
   "- next",
   "- .",
   "- hasChildren",
   "- (",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  next",
   "  .",
   "  hasChildren",
   "  (",
   "  )",
   "  )",
   "  {",
   "  next",
   "  =",
   "  next",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ;",
   "- next",
   "- =",
   "- next",
   "- .",
   "- getFirstChild",
   "- (",
   "- )",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  next",
   "  =",
   "  computeFollowing",
   "  (",
   "  next",
   "  )",
   "  ;",
   "- next",
   "- =",
   "- computeFollowing",
   "- (",
   "- next",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  eturn",
   "  next",
   "  ;"
  ]
 },
 {
  "number": 86,
  "changes_set": [
   "  tatic",
   "  boolean",
   "  evaluatesToLocalValue",
   "  (",
   "  Node",
   "  value",
   "  ,",
   "  Predicate",
   "  <",
   "  Node",
   "  >",
   "  locals",
   "  )",
   "  {",
   "  /",
   "  TODO",
   "  (",
   "  nicksantos",
   "  )",
   "  :",
   "  This",
   "  needs",
   "  to",
   "  be",
   "  changed",
   "  so",
   "  that",
   "  it",
   "  /",
   "  returns",
   "  true",
   "  iff",
   "  we",
   "  sure",
   "  the",
   "  value",
   "  was",
   "  never",
   "  aliased",
   "  from",
   "  inside",
   "  /",
   "  the",
   "  constructor",
   "  (",
   "  similar",
   "  to",
   "  callHasLocalResult",
   "  )",
   "  return",
   "- false",
   "+ true",
   "  ;",
   "  return",
   "  false",
   "  ;",
   "  ase",
   "  Token",
   "  .",
   "  FUNCTION",
   "  :",
   "  ase",
   "  Token",
   "  .",
   "  REGEXP",
   "  :",
   "  ase",
   "  Token",
   "  .",
   "  ARRAYLIT",
   "  :"
  ]
 },
 {
  "number": 84,
  "changes_set": [
   "  verrideode",
   "  processAssignment",
   "  (",
   "  Assignment",
   "  assignmentNode",
   "  )",
   "  {",
   "  ode",
   "  assign",
   "  =",
   "  processInfixExpression",
   "  (",
   "  assignmentNode",
   "  )",
   "  ;",
   "  Node",
   "  target",
   "  =",
   "  assign",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ;",
   "- Node",
   "- target",
   "- =",
   "- assign",
   "- .",
   "- getFirstChild",
   "- (",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- !",
   "- validAssignmentTarget",
   "- (",
   "- target",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  !",
   "  validAssignmentTarget",
   "  (",
   "  target",
   "  )",
   "  )",
   "  {",
   "  errorReporter",
   "  .",
   "  error",
   "  (",
   "- errorReporter",
   "- .",
   "- error",
   "- (",
   "  \"invalid assignment target\"",
   "- ,",
   "- \"invalid assignment target\"",
   "- ,",
   "- sourceName",
   "  ,",
   "  sourceName",
   "  ,",
   "  target",
   "  .",
   "  getLineno",
   "  (",
   "  )",
   "  ,",
   "  \"\"",
   "  ,",
   "  0",
   "  )",
   "  ;",
   "- target",
   "- .",
   "- getLineno",
   "- (",
   "- )",
   "- ,",
   "- \"\"",
   "- ,",
   "- 0",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  assign",
   "  ;"
  ]
 },
 {
  "number": 84,
  "changes_set": [
   "  ode",
   "  processUnaryExpression",
   "  (",
   "  UnaryExpression",
   "  exprNode",
   "  )",
   "  {",
   "  perand",
   "  .",
   "  setDouble",
   "  (",
   "  -",
   "  operand",
   "  .",
   "  getDouble",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  eturn",
   "  operand",
   "  ;",
   "  else",
   "  {",
   "  if",
   "  (",
   "  type",
   "  ==",
   "  Token",
   "  .",
   "  INC",
   "  ||",
   "  type",
   "  ==",
   "  Token",
   "  .",
   "  DEC",
   "  )",
   "  {",
   "  if",
   "  (",
   "- type",
   "- ==",
   "- Token",
   "- .",
   "- INC",
   "- ||",
   "- type",
   "- ==",
   "- Token",
   "- .",
   "- DEC",
   "- )",
   "- {",
   "- if",
   "- (",
   "- !",
   "- validAssignmentTarget",
   "- (",
   "- operand",
   "- )",
   "- )",
   "- {",
   "- if",
   "- (",
   "  !",
   "  validAssignmentTarget",
   "  (",
   "  operand",
   "  )",
   "  )",
   "  {",
   "  String",
   "  msg",
   "  =",
   "  (",
   "  type",
   "  ==",
   "  Token",
   "  .",
   "  INC",
   "  )",
   "- String",
   "- msg",
   "- =",
   "- (",
   "- type",
   "- ==",
   "- Token",
   "- .",
   "- INC",
   "- )",
   "  ?",
   "  \"invalid increment target\"",
   "- ?",
   "- \"invalid increment target\"",
   "- :",
   "- \"invalid decrement target\"",
   "- ;",
   "  :",
   "  \"invalid decrement target\"",
   "  ;",
   "  errorReporter",
   "  .",
   "  error",
   "  (",
   "- errorReporter",
   "- .",
   "- error",
   "- (",
   "  msg",
   "- ,",
   "- msg",
   "- ,",
   "- sourceName",
   "  ,",
   "  sourceName",
   "  ,",
   "  operand",
   "  .",
   "  getLineno",
   "  (",
   "  )",
   "  ,",
   "  \"\"",
   "  ,",
   "  0",
   "  )",
   "  ;",
   "- operand",
   "- .",
   "- getLineno",
   "- (",
   "- )",
   "- ,",
   "- \"\"",
   "- ,",
   "- 0",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  ode",
   "  node",
   "  =",
   "  newNode",
   "  (",
   "  type",
   "  ,",
   "  operand",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  exprNode",
   "  .",
   "  isPostfix",
   "  (",
   "  )",
   "  )",
   "  {"
  ]
 },
 {
  "number": 84,
  "changes_set": [
   "  ode",
   "  processUnaryExpression",
   "  (",
   "  UnaryExpression",
   "  exprNode",
   "- )",
   "- {",
   "- private",
   "- boolean",
   "- validAssignmentTarget",
   "- (",
   "- Node",
   "- target",
   "  )",
   "  {",
   "  private",
   "  boolean",
   "  validAssignmentTarget",
   "  (",
   "  Node",
   "  target",
   "  )",
   "  {",
   "  switch",
   "  (",
   "  target",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  )",
   "  {",
   "- switch",
   "- (",
   "- target",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- )",
   "- {",
   "- case",
   "- Token",
   "- .",
   "- NAME",
   "- :",
   "  case",
   "  Token",
   "  .",
   "  NAME",
   "  :",
   "  case",
   "  Token",
   "  .",
   "  GETPROP",
   "  :",
   "  case",
   "  Token",
   "  .",
   "- GETPROP",
   "- :",
   "- case",
   "- Token",
   "- .",
   "- GETELEM",
   "- :",
   "- case",
   "- Token",
   "- .",
   "  GETELEM",
   "  :",
   "  return",
   "  true",
   "  ;",
   "- return",
   "- true",
   "- ;",
   "- }",
   "  }",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "  }",
   "- }"
  ]
 },
 {
  "number": 89,
  "changes_set": [
   "  rivate",
   "  void",
   "  updateSimpleDeclaration",
   "  (",
   "  String",
   "  alias",
   "  ,",
   "  Name",
   "  refName",
   "  ,",
   "  Ref",
   "  ref",
   "  )",
   "  {",
   "  ode",
   "  greatGramps",
   "  =",
   "  gramps",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  ;",
   "  ode",
   "  greatGreatGramps",
   "  =",
   "  greatGramps",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  rvalue",
   "  !=",
   "  null",
   "  &&",
   "  rvalue",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  FUNCTION",
   "  )",
   "  {",
   "- if",
   "- (",
   "- rvalue",
   "- !=",
   "- null",
   "- &&",
   "- rvalue",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- ==",
   "- Token",
   "- .",
   "- FUNCTION",
   "- )",
   "- {",
   "  checkForHosedThisReferences",
   "  (",
   "  rvalue",
   "  ,",
   "  refName",
   "  .",
   "  docInfo",
   "  ,",
   "  refName",
   "  )",
   "  ;",
   "- checkForHosedThisReferences",
   "- (",
   "- rvalue",
   "- ,",
   "- refName",
   "- .",
   "- docInfo",
   "- ,",
   "- refName",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  Create",
   "  the",
   "  new",
   "  alias",
   "  node",
   "  .",
   "  ode",
   "  nameNode",
   "  =",
   "  NodeUtil",
   "  .",
   "  newName",
   "  ("
  ]
 },
 {
  "number": 89,
  "changes_set": [
   "  oolean",
   "  canCollapseUnannotatedChildNames",
   "  (",
   "  )",
   "  {",
   "  /",
   "  If",
   "  this",
   "  is",
   "  aliased",
   "  ,",
   "  then",
   "  its",
   "  properties",
   "  can",
   "  be",
   "  collapsed",
   "  either",
   "  .",
   "  if",
   "  (",
   "+ type",
   "+ !=",
   "+ Type",
   "+ .",
   "+ FUNCTION",
   "+ &&",
   "  aliasingGets",
   "  >",
   "  0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  aliasingGets",
   "  >",
   "  0",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;"
  ]
 },
 {
  "number": 88,
  "changes_set": [
   "  rivate",
   "  VariableLiveness",
   "  isVariableReadBeforeKill",
   "  (",
   "  ode",
   "  n",
   "  ,",
   "  String",
   "  variable",
   "  )",
   "  {",
   "  f",
   "  (",
   "  NodeUtil",
   "  .",
   "  isName",
   "  (",
   "  n",
   "  )",
   "  &&",
   "  variable",
   "  .",
   "  equals",
   "  (",
   "  n",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  )",
   "  )",
   "  {",
   "  f",
   "  (",
   "  NodeUtil",
   "  .",
   "  isLhs",
   "  (",
   "  n",
   "  ,",
   "  n",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  )",
   "  )",
   "  {",
   "  Preconditions",
   "  .",
   "  checkState",
   "  (",
   "  n",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  ASSIGN",
   "  )",
   "  ;",
   "- Preconditions",
   "- .",
   "- checkState",
   "- (",
   "- n",
   "- .",
   "- getParent",
   "- (",
   "- )",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- ==",
   "- Token",
   "- .",
   "- ASSIGN",
   "- )",
   "- ;",
   "  /",
   "  The",
   "  expression",
   "  to",
   "  which",
   "  the",
   "  assignment",
   "  is",
   "  made",
   "  is",
   "  evaluated",
   "  before",
   "  /",
   "  the",
   "  RHS",
   "  is",
   "  evaluated",
   "  (",
   "  normal",
   "  left",
   "  to",
   "  right",
   "  evaluation",
   "  )",
   "  but",
   "  the",
   "  KILL",
   "  /",
   "  occurs",
   "  after",
   "  the",
   "  RHS",
   "  is",
   "  evaluated",
   "  .",
   "  Node",
   "  rhs",
   "  =",
   "  n",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  ;",
   "- Node",
   "- rhs",
   "- =",
   "- n",
   "- .",
   "- getNext",
   "- (",
   "- )",
   "- ;",
   "- VariableLiveness",
   "- state",
   "- =",
   "- isVariableReadBeforeKill",
   "- (",
   "- rhs",
   "- ,",
   "- variable",
   "- )",
   "- ;",
   "  VariableLiveness",
   "  state",
   "  =",
   "  isVariableReadBeforeKill",
   "  (",
   "  rhs",
   "  ,",
   "  variable",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  state",
   "  ==",
   "  VariableLiveness",
   "  .",
   "  READ",
   "  )",
   "  {",
   "- if",
   "- (",
   "- state",
   "- ==",
   "- VariableLiveness",
   "- .",
   "- READ",
   "- )",
   "- {",
   "  return",
   "  state",
   "  ;",
   "- return",
   "- state",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  VariableLiveness",
   "  .",
   "  KILL",
   "  ;",
   "  else",
   "  {",
   "  eturn",
   "  VariableLiveness",
   "  .",
   "  READ",
   "  ;"
  ]
 },
 {
  "number": 87,
  "changes_set": [
   "  rivate",
   "  boolean",
   "  isFoldableExpressBlock",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  f",
   "  (",
   "  n",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  BLOCK",
   "  )",
   "  {",
   "  f",
   "  (",
   "  n",
   "  .",
   "  hasOneChild",
   "  (",
   "  )",
   "  )",
   "  {",
   "  ode",
   "  maybeExpr",
   "  =",
   "  n",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  maybeExpr",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  EXPR_RESULT",
   "  )",
   "  {",
   "- if",
   "- (",
   "- maybeExpr",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- ==",
   "- Token",
   "- .",
   "- EXPR_RESULT",
   "- )",
   "- {",
   "  /",
   "  IE",
   "  has",
   "  a",
   "  bug",
   "  where",
   "  event",
   "  handlers",
   "  behave",
   "  differently",
   "  when",
   "  /",
   "  their",
   "  return",
   "  value",
   "  is",
   "  used",
   "  vs",
   "  .",
   "  when",
   "  their",
   "  return",
   "  value",
   "  is",
   "  in",
   "  /",
   "  an",
   "  EXPR_RESULT",
   "  .",
   "  It",
   "  pretty",
   "  freaking",
   "  weird",
   "  .",
   "  See",
   "  :",
   "  /",
   "  http",
   "  :"
  ]
 },
 {
  "number": 92,
  "changes_set": [
   "  oid",
   "  replace",
   "  (",
   "  )",
   "  {",
   "  else",
   "  {",
   "  /",
   "  In",
   "  this",
   "  case",
   "  ,",
   "  the",
   "  name",
   "  was",
   "  implicitly",
   "  provided",
   "  by",
   "  two",
   "  independent",
   "  /",
   "  modules",
   "  .",
   "  We",
   "  need",
   "  to",
   "  move",
   "  this",
   "  code",
   "  up",
   "  to",
   "  a",
   "  common",
   "  module",
   "  .",
   "  int",
   "  indexOfDot",
   "  =",
   "  namespace",
   "  .",
   "- lastIndexOf",
   "+ indexOf",
   "  (",
   "  '.'",
   "  )",
   "  ;",
   "  int",
   "  indexOfDot",
   "  =",
   "  namespace",
   "  .",
   "  lastIndexOf",
   "  (",
   "  '.'",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  indexOfDot",
   "  ==",
   "  -",
   "  1",
   "  )",
   "  {",
   "  /",
   "  Any",
   "  old",
   "  place",
   "  is",
   "  fine",
   "  .",
   "  ompiler",
   "  .",
   "  getNodeForCodeInsertion",
   "  (",
   "  minimumModule",
   "  )"
  ]
 },
 {
  "number": 95,
  "changes_set": [
   "  oid",
   "  defineSlot",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  parent",
   "  ,",
   "  JSType",
   "  type",
   "  ,",
   "  boolean",
   "  inferred",
   "  )",
   "  {",
   "  /",
   "  scope",
   "  where",
   "  the",
   "  root",
   "  object",
   "  appears",
   "  .",
   "  This",
   "  helps",
   "  out",
   "  people",
   "  /",
   "  who",
   "  declare",
   "  \"global\"",
   "  names",
   "  in",
   "  an",
   "  anonymous",
   "  namespace",
   "  .",
   "  cope",
   "  scopeToDeclareIn",
   "  =",
   "  scope",
   "  ;",
   "  if",
   "  (",
   "  n",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  GETPROP",
   "  &&",
   "  !",
   "  scope",
   "  .",
   "  isGlobal",
   "  (",
   "  )",
   "  &&",
   "- if",
   "- (",
   "- n",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- ==",
   "- Token",
   "- .",
   "- GETPROP",
   "- &&",
   "- !",
   "- scope",
   "- .",
   "- isGlobal",
   "- (",
   "- )",
   "- &&",
   "  isQnameRootedInGlobalScope",
   "  (",
   "  n",
   "  )",
   "  )",
   "  {",
   "- isQnameRootedInGlobalScope",
   "- (",
   "- n",
   "- )",
   "- )",
   "- {",
   "- Scope",
   "- globalScope",
   "- =",
   "- scope",
   "- .",
   "- getGlobalScope",
   "- (",
   "- )",
   "- ;",
   "  Scope",
   "  globalScope",
   "  =",
   "  scope",
   "  .",
   "  getGlobalScope",
   "  (",
   "  )",
   "  ;",
   "  /",
   "  don",
   "  try",
   "  to",
   "  declare",
   "  in",
   "  the",
   "  global",
   "  scope",
   "  if",
   "  there",
   "  already",
   "  a",
   "  symbol",
   "  there",
   "  with",
   "  this",
   "  name",
   "  .",
   "  if",
   "  (",
   "  !",
   "  globalScope",
   "  .",
   "  isDeclared",
   "  (",
   "  variableName",
   "  ,",
   "  false",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- !",
   "- globalScope",
   "- .",
   "- isDeclared",
   "- (",
   "- variableName",
   "- ,",
   "- false",
   "- )",
   "- )",
   "- {",
   "  scopeToDeclareIn",
   "  =",
   "  scope",
   "  .",
   "  getGlobalScope",
   "  (",
   "  )",
   "  ;",
   "- scopeToDeclareIn",
   "- =",
   "- scope",
   "- .",
   "- getGlobalScope",
   "- (",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  /",
   "  declared",
   "  in",
   "  closest",
   "  scope",
   "  ?",
   "  f",
   "  (",
   "  scopeToDeclareIn",
   "  .",
   "  isDeclared",
   "  (",
   "  variableName",
   "  ,",
   "  false",
   "  )",
   "  )",
   "  {"
  ]
 },
 {
  "number": 90,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  apply",
   "  (",
   "  JSType",
   "  type",
   "  )",
   "  {",
   "  /",
   "  create",
   "  interfaces",
   "  JSType",
   "  ,",
   "  ObjectType",
   "  ,",
   "  FunctionType",
   "  etc",
   "  and",
   "  have",
   "  /",
   "  separate",
   "  implementation",
   "  instead",
   "  of",
   "  the",
   "  class",
   "  hierarchy",
   "  ,",
   "  so",
   "  that",
   "  /",
   "  union",
   "  types",
   "  can",
   "  also",
   "  be",
   "  object",
   "  types",
   "  ,",
   "  etc",
   "  .",
   "  if",
   "  (",
   "  !",
   "  type",
   "  .",
   "- restrictByNotNullOrUndefined",
   "- (",
   "- )",
   "- .",
   "  isSubtype",
   "  (",
   "  if",
   "  (",
   "  !",
   "  type",
   "  .",
   "  restrictByNotNullOrUndefined",
   "  (",
   "  )",
   "  .",
   "  isSubtype",
   "  (",
   "  ypeRegistry",
   "  .",
   "  getNativeType",
   "  (",
   "  OBJECT_TYPE",
   "  )",
   "  )",
   "  )",
   "  {",
   "  eportWarning",
   "  (",
   "  THIS_TYPE_NON_OBJECT",
   "  ,",
   "  type",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  eturn",
   "  false",
   "  ;"
  ]
 },
 {
  "number": 90,
  "changes_set": [
   "  xtends",
   "  )",
   "  we",
   "  de",
   "  -",
   "  nullify",
   "  /",
   "  the",
   "  name",
   "  for",
   "  them",
   "  .",
   "  SType",
   "  maybeTypeOfThis",
   "  =",
   "  safeResolve",
   "  (",
   "  typeOfThis",
   "  ,",
   "  t",
   "  ,",
   "  scope",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  maybeTypeOfThis",
   "  !=",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- maybeTypeOfThis",
   "- !=",
   "- null",
   "- )",
   "- {",
   "  maybeTypeOfThis",
   "  =",
   "  maybeTypeOfThis",
   "  .",
   "  restrictByNotNullOrUndefined",
   "  (",
   "  )",
   "  ;",
   "- maybeTypeOfThis",
   "- =",
   "- maybeTypeOfThis",
   "- .",
   "- restrictByNotNullOrUndefined",
   "- (",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  f",
   "  (",
   "  maybeTypeOfThis",
   "  instanceof",
   "  ObjectType",
   "  )",
   "  {",
   "  ypeOfThis",
   "  =",
   "  (",
   "  ObjectType",
   "  )",
   "  maybeTypeOfThis",
   "  ;"
  ]
 },
 {
  "number": 94,
  "changes_set": [
   "  tatic",
   "  boolean",
   "  isValidDefineValue",
   "  (",
   "  Node",
   "  val",
   "  ,",
   "  Set",
   "  <",
   "  String",
   "  >",
   "  defines",
   "  )",
   "  {",
   "  eturn",
   "  true",
   "  ;",
   "  /",
   "  Binary",
   "  operators",
   "  are",
   "  only",
   "  valid",
   "  if",
   "  both",
   "  children",
   "  are",
   "  valid",
   "  .",
   "  case",
   "  Token",
   "  .",
   "  ADD",
   "  :",
   "- case",
   "- Token",
   "- .",
   "- ADD",
   "- :",
   "  ase",
   "  Token",
   "  .",
   "  BITAND",
   "  :",
   "  ase",
   "  Token",
   "  .",
   "  BITNOT",
   "  :",
   "  ase",
   "  Token",
   "  .",
   "  BITOR",
   "  :",
   "  ase",
   "  Token",
   "  .",
   "  BITXOR",
   "  :",
   "  case",
   "  Token",
   "  .",
   "  DIV",
   "  :",
   "  case",
   "  Token",
   "  .",
   "- DIV",
   "- :",
   "- case",
   "- Token",
   "- .",
   "  EQ",
   "  :",
   "  case",
   "  Token",
   "  .",
   "- EQ",
   "- :",
   "- case",
   "- Token",
   "- .",
   "  GE",
   "  :",
   "  case",
   "  Token",
   "  .",
   "- GE",
   "- :",
   "- case",
   "- Token",
   "- .",
   "  GT",
   "  :",
   "  case",
   "  Token",
   "  .",
   "- GT",
   "- :",
   "- case",
   "- Token",
   "- .",
   "  LE",
   "  :",
   "  case",
   "  Token",
   "  .",
   "- LE",
   "- :",
   "- case",
   "- Token",
   "- .",
   "  LSH",
   "  :",
   "  case",
   "  Token",
   "  .",
   "- LSH",
   "- :",
   "- case",
   "- Token",
   "- .",
   "  LT",
   "  :",
   "  case",
   "  Token",
   "  .",
   "- LT",
   "- :",
   "- case",
   "- Token",
   "- .",
   "  MOD",
   "  :",
   "  case",
   "  Token",
   "  .",
   "- MOD",
   "- :",
   "- case",
   "- Token",
   "- .",
   "  MUL",
   "  :",
   "  case",
   "  Token",
   "  .",
   "- MUL",
   "- :",
   "- case",
   "- Token",
   "- .",
   "  NE",
   "  :",
   "  case",
   "  Token",
   "  .",
   "- NE",
   "- :",
   "- case",
   "- Token",
   "- .",
   "  RSH",
   "  :",
   "  case",
   "  Token",
   "  .",
   "- RSH",
   "- :",
   "- case",
   "- Token",
   "- .",
   "  SHEQ",
   "  :",
   "  case",
   "  Token",
   "  .",
   "- SHEQ",
   "- :",
   "- case",
   "- Token",
   "- .",
   "  SHNE",
   "  :",
   "  case",
   "  Token",
   "  .",
   "- SHNE",
   "- :",
   "- case",
   "- Token",
   "- .",
   "  SUB",
   "  :",
   "  case",
   "  Token",
   "  .",
   "- SUB",
   "- :",
   "- case",
   "- Token",
   "- .",
   "  URSH",
   "  :",
   "- case",
   "- Token",
   "- .",
   "- URSH",
   "- :",
   "  return",
   "  isValidDefineValue",
   "  (",
   "  val",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ,",
   "  defines",
   "  )",
   "- return",
   "- isValidDefineValue",
   "- (",
   "- val",
   "- .",
   "- getFirstChild",
   "- (",
   "- )",
   "- ,",
   "- defines",
   "- )",
   "- &&",
   "- isValidDefineValue",
   "- (",
   "- val",
   "- .",
   "- getLastChild",
   "- (",
   "- )",
   "- ,",
   "- defines",
   "- )",
   "- ;",
   "  &&",
   "  isValidDefineValue",
   "  (",
   "  val",
   "  .",
   "  getLastChild",
   "  (",
   "  )",
   "  ,",
   "  defines",
   "  )",
   "  ;",
   "  /",
   "  Uniary",
   "  operators",
   "  are",
   "  valid",
   "  if",
   "  the",
   "  child",
   "  is",
   "  valid",
   "  .",
   "  ase",
   "  Token",
   "  .",
   "  NOT",
   "  :",
   "  ase",
   "  Token",
   "  .",
   "  NEG",
   "  :",
   "  case",
   "  Token",
   "  .",
   "  POS",
   "  :",
   "- case",
   "- Token",
   "- .",
   "- POS",
   "- :",
   "  eturn",
   "  isValidDefineValue",
   "  (",
   "  val",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ,",
   "  defines",
   "  )",
   "  ;",
   "  /",
   "  Names",
   "  are",
   "  valid",
   "  if",
   "  and",
   "  only",
   "  if",
   "  they",
   "  are",
   "  defines",
   "  themselves",
   "  ."
  ]
 },
 {
  "number": 91,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  shouldTraverse",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  parent",
   "  )",
   "  {",
   "  /",
   "  Don",
   "  traverse",
   "  functions",
   "  that",
   "  are",
   "  getting",
   "  lent",
   "  to",
   "  a",
   "  prototype",
   "  .",
   "  Node",
   "  gramps",
   "  =",
   "  parent",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  ;",
   "- Node",
   "- gramps",
   "- =",
   "- parent",
   "- .",
   "- getParent",
   "- (",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- NodeUtil",
   "- .",
   "- isObjectLitKey",
   "- (",
   "- parent",
   "- ,",
   "- gramps",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  NodeUtil",
   "  .",
   "  isObjectLitKey",
   "  (",
   "  parent",
   "  ,",
   "  gramps",
   "  )",
   "  )",
   "  {",
   "  JSDocInfo",
   "  maybeLends",
   "  =",
   "  gramps",
   "  .",
   "  getJSDocInfo",
   "  (",
   "  )",
   "  ;",
   "- JSDocInfo",
   "- maybeLends",
   "- =",
   "- gramps",
   "- .",
   "- getJSDocInfo",
   "- (",
   "- )",
   "- ;",
   "  if",
   "  (",
   "  maybeLends",
   "- !=",
   "- null",
   "- &&",
   "- if",
   "- (",
   "- maybeLends",
   "- !=",
   "- null",
   "- &&",
   "- maybeLends",
   "- .",
   "- getLendsName",
   "- (",
   "- )",
   "  !=",
   "  null",
   "  &&",
   "  maybeLends",
   "  .",
   "  getLendsName",
   "  (",
   "  )",
   "  !=",
   "  null",
   "  &&",
   "  maybeLends",
   "  .",
   "  getLendsName",
   "  (",
   "  )",
   "  .",
   "  endsWith",
   "  (",
   "  \".prototype\"",
   "  )",
   "  )",
   "  {",
   "- maybeLends",
   "- .",
   "- getLendsName",
   "- (",
   "- )",
   "- .",
   "- endsWith",
   "- (",
   "- \".prototype\"",
   "- )",
   "- )",
   "- {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  f",
   "  (",
   "  parent",
   "  !=",
   "  null",
   "  &&",
   "  parent",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  ASSIGN",
   "  )",
   "  {"
  ]
 },
 {
  "number": 93,
  "changes_set": [
   "  oid",
   "  replace",
   "  (",
   "  )",
   "  {",
   "  else",
   "  {",
   "  /",
   "  In",
   "  this",
   "  case",
   "  ,",
   "  the",
   "  name",
   "  was",
   "  implicitly",
   "  provided",
   "  by",
   "  two",
   "  independent",
   "  /",
   "  modules",
   "  .",
   "  We",
   "  need",
   "  to",
   "  move",
   "  this",
   "  code",
   "  up",
   "  to",
   "  a",
   "  common",
   "  module",
   "  .",
   "  int",
   "  indexOfDot",
   "  =",
   "  namespace",
   "  .",
   "- lastIndexOf",
   "+ indexOf",
   "  (",
   "  '.'",
   "  )",
   "  ;",
   "  int",
   "  indexOfDot",
   "  =",
   "  namespace",
   "  .",
   "  lastIndexOf",
   "  (",
   "  '.'",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  indexOfDot",
   "  ==",
   "  -",
   "  1",
   "  )",
   "  {",
   "  /",
   "  Any",
   "  old",
   "  place",
   "  is",
   "  fine",
   "  .",
   "  ompiler",
   "  .",
   "  getNodeForCodeInsertion",
   "  (",
   "  minimumModule",
   "  )"
  ]
 },
 {
  "number": 97,
  "changes_set": [
   "  rivate",
   "  Node",
   "  tryFoldShift",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  left",
   "  ,",
   "  Node",
   "  right",
   "  )",
   "  {",
   "  /",
   "  JavaScript",
   "  handles",
   "  zero",
   "  shifts",
   "  on",
   "  signed",
   "  numbers",
   "  differently",
   "  than",
   "  /",
   "  Java",
   "  as",
   "  an",
   "  Java",
   "  int",
   "  can",
   "  not",
   "  represent",
   "  the",
   "  unsigned",
   "  32",
   "  -",
   "  bit",
   "  number",
   "  /",
   "  where",
   "  JavaScript",
   "  can",
   "  so",
   "  use",
   "  a",
   "  long",
   "  here",
   "  .",
   "+ result",
   "- long",
   "- lvalLong",
   "  =",
   "  lvalInt",
   "- &",
   "- 0xffffffffL",
   "+ >",
   "+ >",
   "+ >",
   "+ rvalInt",
   "  ;",
   "  long",
   "  lvalLong",
   "  =",
   "  lvalInt",
   "  &",
   "  0xffffffffL",
   "- ;",
   "- result",
   "- =",
   "- lvalLong",
   "- >",
   "- >",
   "- >",
   "- rvalInt",
   "  ;",
   "  result",
   "  =",
   "  lvalLong",
   "  >",
   "  >",
   "  >",
   "  rvalInt",
   "  ;",
   "  reak",
   "  ;",
   "  efault",
   "  :",
   "  hrow",
   "  new",
   "  AssertionError",
   "  (",
   "  \"Unknown shift operator: \"",
   "  +"
  ]
 },
 {
  "number": 96,
  "changes_set": [
   "  rivate",
   "  void",
   "  visitParameterList",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  call",
   "  ,",
   "  ode",
   "  parameter",
   "  =",
   "  null",
   "  ;",
   "  ode",
   "  argument",
   "  =",
   "  null",
   "  ;",
   "  hile",
   "  (",
   "  arguments",
   "  .",
   "  hasNext",
   "  (",
   "  )",
   "  &&",
   "+ parameters",
   "+ .",
   "+ hasNext",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "  (",
   "  parameters",
   "  .",
   "  hasNext",
   "  (",
   "  )",
   "  ||",
   "- (",
   "- parameters",
   "- .",
   "- hasNext",
   "- (",
   "- )",
   "- ||",
   "- parameter",
   "- !=",
   "- null",
   "- &&",
   "- parameter",
   "- .",
   "- isVarArgs",
   "- (",
   "- )",
   "- )",
   "- )",
   "- {",
   "  parameter",
   "  !=",
   "  null",
   "  &&",
   "  parameter",
   "  .",
   "  isVarArgs",
   "  (",
   "  )",
   "  )",
   "  )",
   "  {",
   "  /",
   "  If",
   "  there",
   "  are",
   "  no",
   "  parameters",
   "  left",
   "  in",
   "  the",
   "  list",
   "  ,",
   "  then",
   "  the",
   "  while",
   "  loop",
   "  /",
   "  above",
   "  implies",
   "  that",
   "  this",
   "  must",
   "  be",
   "  a",
   "  var_args",
   "  function",
   "  .",
   "  if",
   "  (",
   "  parameters",
   "  .",
   "  hasNext",
   "  (",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- parameters",
   "- .",
   "- hasNext",
   "- (",
   "- )",
   "- )",
   "- {",
   "  arameter",
   "  =",
   "  parameters",
   "  .",
   "  next",
   "  (",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  rgument",
   "  =",
   "  arguments",
   "  .",
   "  next",
   "  (",
   "  )",
   "  ;",
   "  rdinal",
   "  ++",
   "  ;"
  ]
 },
 {
  "number": 101,
  "changes_set": [
   "  rotected",
   "  CompilerOptions",
   "  createOptions",
   "  (",
   "  )",
   "  {",
   "  or",
   "  (",
   "  FormattingOption",
   "  formattingOption",
   "  :",
   "  flags",
   "  .",
   "  formatting",
   "  )",
   "  {",
   "  ormattingOption",
   "  .",
   "  applyToOptions",
   "  (",
   "  options",
   "  )",
   "  ;",
   "+ if",
   "+ (",
   "+ flags",
   "+ .",
   "+ process_closure_primitives",
   "+ )",
   "+ {",
   "  options",
   "  .",
   "  closurePass",
   "  =",
   "+ true",
   "- flags",
   "- .",
   "- process_closure_primitives",
   "  ;",
   "+ }",
   "  options",
   "  .",
   "  closurePass",
   "  =",
   "  flags",
   "  .",
   "  process_closure_primitives",
   "  ;",
   "  nitOptionsFromFlags",
   "  (",
   "  options",
   "  )",
   "  ;",
   "  eturn",
   "  options",
   "  ;"
  ]
 },
 {
  "number": 100,
  "changes_set": [
   "  rivate",
   "  boolean",
   "  shouldReportThis",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  parent",
   "  )",
   "  {",
   "  /",
   "  Also",
   "  report",
   "  a",
   "  THIS",
   "  with",
   "  a",
   "  property",
   "  access",
   "  .",
   "  return",
   "+ false",
   "- parent",
   "- !=",
   "- null",
   "- &&",
   "- NodeUtil",
   "- .",
   "- isGet",
   "- (",
   "- parent",
   "- )",
   "  ;",
   "  return",
   "  parent",
   "  !=",
   "  null",
   "  &&",
   "  NodeUtil",
   "  .",
   "  isGet",
   "  (",
   "  parent",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 98,
  "changes_set": [
   "  eference",
   "  getInitializingReferenceForConstants",
   "  (",
   "  )",
   "  {",
   "  oolean",
   "  isAssignedOnceInLifetime",
   "  (",
   "  )",
   "  {",
   "  eference",
   "  ref",
   "  =",
   "  getOneAndOnlyAssignment",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  ref",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;",
   "  /",
   "  Make",
   "  sure",
   "  this",
   "  assignment",
   "  is",
   "  not",
   "  in",
   "  a",
   "  loop",
   "  .",
   "  for",
   "  (",
   "  BasicBlock",
   "  block",
   "  =",
   "  ref",
   "  .",
   "  getBasicBlock",
   "  (",
   "  )",
   "  ;",
   "- for",
   "- (",
   "- BasicBlock",
   "- block",
   "- =",
   "- ref",
   "- .",
   "- getBasicBlock",
   "- (",
   "- )",
   "- ;",
   "- block",
   "- !=",
   "- null",
   "- ;",
   "- block",
   "- =",
   "- block",
   "- .",
   "- getParent",
   "- (",
   "- )",
   "- )",
   "- {",
   "  block",
   "  !=",
   "  null",
   "  ;",
   "  block",
   "  =",
   "  block",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  block",
   "  .",
   "  isFunction",
   "  )",
   "  {",
   "- if",
   "- (",
   "- block",
   "- .",
   "- isFunction",
   "- )",
   "- {",
   "  break",
   "  ;",
   "- break",
   "- ;",
   "- }",
   "- else",
   "- if",
   "- (",
   "- block",
   "- .",
   "- isLoop",
   "- )",
   "- {",
   "  }",
   "  else",
   "  if",
   "  (",
   "  block",
   "  .",
   "  isLoop",
   "  )",
   "  {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  eturn",
   "  true",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 98,
  "changes_set": [
   "  cope",
   "  getScope",
   "  (",
   "  )",
   "  {",
   "  ublic",
   "  String",
   "  getSourceName",
   "  (",
   "  )",
   "  {",
   "  eturn",
   "  sourceName",
   "  ;",
   "  *",
   "  *",
   "  Represents",
   "  a",
   "  section",
   "  of",
   "  code",
   "  that",
   "  is",
   "  uninterrupted",
   "  by",
   "  control",
   "  structures",
   "  (",
   "  conditional",
   "  or",
   "  iterative",
   "  logic",
   "  )",
   "  .",
   "  /",
   "  tatic",
   "  final",
   "  class",
   "  BasicBlock",
   "  {",
   "  rivate",
   "  final",
   "  BasicBlock",
   "  parent",
   "  ;",
   "  *",
   "  *",
   "  Determines",
   "  whether",
   "  the",
   "  block",
   "  may",
   "  not",
   "  be",
   "  part",
   "  of",
   "  the",
   "  normal",
   "  control",
   "  flow",
   "  ,",
   "  but",
   "  instead",
   "  \"hoisted\"",
   "  to",
   "  the",
   "  top",
   "  of",
   "  the",
   "  scope",
   "  .",
   "  /",
   "  rivate",
   "  final",
   "  boolean",
   "  isHoisted",
   "  ;",
   "  *",
   "  *",
   "  Whether",
   "  this",
   "  block",
   "  denotes",
   "  a",
   "  function",
   "  scope",
   "  .",
   "  /",
   "  private",
   "  final",
   "  boolean",
   "  isFunction",
   "  ;",
   "- private",
   "- final",
   "- boolean",
   "- isFunction",
   "- ;",
   "  *",
   "  *",
   "  Whether",
   "  this",
   "  block",
   "  denotes",
   "  a",
   "  loop",
   "  .",
   "  /",
   "  private",
   "  final",
   "  boolean",
   "  isLoop",
   "  ;",
   "- private",
   "- final",
   "- boolean",
   "- isLoop",
   "- ;",
   "  *",
   "  *",
   "  Creates",
   "  a",
   "  new",
   "  block",
   "  ."
  ]
 },
 {
  "number": 98,
  "changes_set": [
   "  aram",
   "  root",
   "  The",
   "  root",
   "  node",
   "  of",
   "  the",
   "  block",
   "  .",
   "  /",
   "  asicBlock",
   "  (",
   "  BasicBlock",
   "  parent",
   "  ,",
   "  Node",
   "  root",
   "  )",
   "  {",
   "  his",
   "  .",
   "  parent",
   "  =",
   "  parent",
   "  ;",
   "  /",
   "  only",
   "  named",
   "  functions",
   "  may",
   "  be",
   "  hoisted",
   "  .",
   "  his",
   "  .",
   "  isHoisted",
   "  =",
   "  NodeUtil",
   "  .",
   "  isHoistedFunctionDeclaration",
   "  (",
   "  root",
   "  )",
   "  ;",
   "  this",
   "  .",
   "  isFunction",
   "  =",
   "  root",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  FUNCTION",
   "  ;",
   "- this",
   "- .",
   "- isFunction",
   "- =",
   "- root",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- ==",
   "- Token",
   "- .",
   "- FUNCTION",
   "- ;",
   "- if",
   "- (",
   "- root",
   "- .",
   "- getParent",
   "- (",
   "- )",
   "- !=",
   "- null",
   "- )",
   "- {",
   "  if",
   "  (",
   "  root",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  int",
   "  pType",
   "  =",
   "  root",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ;",
   "- int",
   "- pType",
   "- =",
   "- root",
   "- .",
   "- getParent",
   "- (",
   "- )",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- ;",
   "- this",
   "- .",
   "- isLoop",
   "- =",
   "- pType",
   "- ==",
   "- Token",
   "- .",
   "- DO",
   "- ||",
   "  this",
   "  .",
   "  isLoop",
   "  =",
   "  pType",
   "  ==",
   "  Token",
   "  .",
   "  DO",
   "  ||",
   "  pType",
   "  ==",
   "  Token",
   "  .",
   "  WHILE",
   "  ||",
   "  pType",
   "  ==",
   "  Token",
   "  .",
   "- WHILE",
   "- ||",
   "- pType",
   "- ==",
   "- Token",
   "- .",
   "  FOR",
   "  ;",
   "- pType",
   "- ==",
   "- Token",
   "- .",
   "- FOR",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  this",
   "  .",
   "  isLoop",
   "  =",
   "  false",
   "  ;",
   "- this",
   "- .",
   "- isLoop",
   "- =",
   "- false",
   "- ;",
   "  }",
   "- }"
  ]
 },
 {
  "number": 99,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  shouldTraverse",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  parent",
   "  )",
   "  {",
   "  SDocInfo",
   "  jsDoc",
   "  =",
   "  getFunctionJsDocInfo",
   "  (",
   "  n",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  jsDoc",
   "  !=",
   "  null",
   "  &&",
   "  jsDoc",
   "  .",
   "  isConstructor",
   "  (",
   "  )",
   "  ||",
   "  jsDoc",
   "  .",
   "  isInterface",
   "  (",
   "  )",
   "  ||",
   "- jsDoc",
   "- .",
   "- isInterface",
   "- (",
   "- )",
   "- ||",
   "  sDoc",
   "  .",
   "  hasThisType",
   "  (",
   "  )",
   "  ||",
   "  sDoc",
   "  .",
   "  isOverride",
   "  (",
   "  )",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;"
  ]
 },
 {
  "number": 99,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  shouldTraverse",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  parent",
   "  )",
   "  {",
   "  else",
   "  {",
   "  /",
   "  Only",
   "  traverse",
   "  the",
   "  right",
   "  side",
   "  if",
   "  it",
   "  not",
   "  an",
   "  assignment",
   "  to",
   "  a",
   "  prototype",
   "  /",
   "  property",
   "  or",
   "  subproperty",
   "  .",
   "  if",
   "  (",
   "  NodeUtil",
   "  .",
   "  isGet",
   "  (",
   "  lhs",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- NodeUtil",
   "- .",
   "- isGet",
   "- (",
   "- lhs",
   "- )",
   "- )",
   "- {",
   "  f",
   "  (",
   "  lhs",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  GETPROP",
   "  &&",
   "  hs",
   "  .",
   "  getLastChild",
   "  (",
   "  )",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  .",
   "  equals",
   "  (",
   "  \"prototype\"",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;",
   "+ if",
   "+ (",
   "+ lhs",
   "+ .",
   "+ getQualifiedName",
   "+ (",
   "+ )",
   "+ !=",
   "+ null",
   "+ &&",
   "+ lhs",
   "+ .",
   "+ getQualifiedName",
   "+ (",
   "+ )",
   "+ .",
   "+ contains",
   "+ (",
   "+ \".prototype.\"",
   "+ )",
   "+ )",
   "+ {",
   "  Node",
   "  llhs",
   "  =",
   "  lhs",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ;",
   "- Node",
   "- llhs",
   "- =",
   "- lhs",
   "- .",
   "- getFirstChild",
   "- (",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- llhs",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- ==",
   "- Token",
   "- .",
   "- GETPROP",
   "- &&",
   "  if",
   "  (",
   "  llhs",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  GETPROP",
   "  &&",
   "  llhs",
   "  .",
   "  getLastChild",
   "  (",
   "  )",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  .",
   "  equals",
   "  (",
   "  \"prototype\"",
   "  )",
   "  )",
   "  {",
   "- llhs",
   "- .",
   "- getLastChild",
   "- (",
   "- )",
   "- .",
   "- getString",
   "- (",
   "- )",
   "- .",
   "- equals",
   "- (",
   "- \"prototype\"",
   "- )",
   "- )",
   "- {",
   "  eturn",
   "  false",
   "  ;",
   "  }",
   "- }"
  ]
 },
 {
  "number": 104,
  "changes_set": [
   "  SType",
   "  meet",
   "  (",
   "  JSType",
   "  that",
   "  )",
   "  {",
   "  uilder",
   "  .",
   "  addAlternate",
   "  (",
   "  that",
   "  )",
   "  ;",
   "  SType",
   "  result",
   "  =",
   "  builder",
   "  .",
   "  build",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "- !",
   "  result",
   "+ !=",
   "+ null",
   "- .",
   "- isNoType",
   "- (",
   "- )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  !",
   "  result",
   "  .",
   "  isNoType",
   "  (",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  result",
   "  ;",
   "  else",
   "  if",
   "  (",
   "  this",
   "  .",
   "  isObject",
   "  (",
   "  )",
   "  &&",
   "  that",
   "  .",
   "  isObject",
   "  (",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  getNativeType",
   "  (",
   "  JSTypeNative",
   "  .",
   "  NO_OBJECT_TYPE",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 105,
  "changes_set": [
   "  oid",
   "  tryFoldStringJoin",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  left",
   "  ,",
   "  Node",
   "  right",
   "  ,",
   "  tring",
   "  joinString",
   "  =",
   "  NodeUtil",
   "  .",
   "  getStringValue",
   "  (",
   "  right",
   "  )",
   "  ;",
   "  ist",
   "  <",
   "  Node",
   "  >",
   "  arrayFoldedChildren",
   "  =",
   "  Lists",
   "  .",
   "  newLinkedList",
   "  (",
   "  )",
   "  ;",
   "  StringBuilder",
   "  sb",
   "  =",
   "- null",
   "+ new",
   "+ StringBuilder",
   "+ (",
   "+ )",
   "  ;",
   "  StringBuilder",
   "  sb",
   "  =",
   "  null",
   "  ;",
   "  nt",
   "  foldedSize",
   "  =",
   "  0",
   "  ;",
   "  ode",
   "  elem",
   "  =",
   "  arrayNode",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ;",
   "  /",
   "  Merges",
   "  adjacent",
   "  String",
   "  nodes",
   "  .",
   "  hile",
   "  (",
   "  elem",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  f",
   "  (",
   "  NodeUtil",
   "  .",
   "  isImmutableValue",
   "  (",
   "  elem",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  sb",
   "+ .",
   "+ length",
   "+ (",
   "+ )",
   "+ >",
   "+ 0",
   "+ )",
   "+ {",
   "+ if",
   "+ (",
   "+ sb",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- sb",
   "- ==",
   "- null",
   "- )",
   "- {",
   "- sb",
   "- =",
   "- new",
   "- StringBuilder",
   "- (",
   "- )",
   "- ;",
   "  sb",
   "  =",
   "  new",
   "  StringBuilder",
   "  (",
   "  )",
   "  ;",
   "  }",
   "  else",
   "  {",
   "- }",
   "+ b",
   "+ .",
   "+ append",
   "+ (",
   "+ joinString",
   "+ )",
   "+ ;",
   "+ b",
   "+ .",
   "+ append",
   "+ (",
   "+ NodeUtil",
   "+ .",
   "+ getStringValue",
   "+ (",
   "+ elem",
   "+ )",
   "+ )",
   "+ ;",
   "  else",
   "  {",
   "- b",
   "- .",
   "- append",
   "- (",
   "- joinString",
   "- )",
   "- ;",
   "- b",
   "- .",
   "- append",
   "- (",
   "- NodeUtil",
   "- .",
   "- getStringValue",
   "- (",
   "- elem",
   "- )",
   "- )",
   "- ;",
   "- else",
   "- {",
   "  if",
   "  (",
   "  sb",
   "- !=",
   "- null",
   "+ .",
   "+ length",
   "+ (",
   "+ )",
   "+ >",
   "+ 0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  sb",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  /",
   "  +",
   "  2",
   "  for",
   "  the",
   "  quotes",
   "  .",
   "  oldedSize",
   "  +=",
   "  sb",
   "  .",
   "  length",
   "  (",
   "  )",
   "  +",
   "  2",
   "  ;",
   "  rrayFoldedChildren",
   "  .",
   "  add",
   "  (",
   "  Node",
   "  .",
   "  newString",
   "  (",
   "  sb",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  )",
   "  )",
   "  ;",
   "  sb",
   "  =",
   "- null",
   "+ new",
   "+ StringBuilder",
   "+ (",
   "+ )",
   "  ;",
   "  sb",
   "  =",
   "  null",
   "  ;",
   "  oldedSize",
   "  +=",
   "  InlineCostEstimator",
   "  .",
   "  getCost",
   "  (",
   "  elem",
   "  )",
   "  ;",
   "  rrayFoldedChildren",
   "  .",
   "  add",
   "  (",
   "  elem",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 105,
  "changes_set": [
   "  oid",
   "  tryFoldStringJoin",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  left",
   "  ,",
   "  Node",
   "  right",
   "  ,",
   "  lem",
   "  =",
   "  elem",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  sb",
   "- !=",
   "- null",
   "+ .",
   "+ length",
   "+ (",
   "+ )",
   "+ >",
   "+ 0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  sb",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  /",
   "  +",
   "  2",
   "  for",
   "  the",
   "  quotes",
   "  .",
   "  oldedSize",
   "  +=",
   "  sb",
   "  .",
   "  length",
   "  (",
   "  )",
   "  +",
   "  2",
   "  ;",
   "  rrayFoldedChildren",
   "  .",
   "  add",
   "  (",
   "  Node",
   "  .",
   "  newString",
   "  (",
   "  sb",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 106,
  "changes_set": [
   "  oolean",
   "  canCollapseUnannotatedChildNames",
   "  (",
   "  )",
   "  {",
   "  /",
   "  Don",
   "  try",
   "  to",
   "  collapse",
   "  if",
   "  the",
   "  one",
   "  global",
   "  set",
   "  is",
   "  a",
   "  twin",
   "  reference",
   "  .",
   "  /",
   "  We",
   "  could",
   "  theoretically",
   "  handle",
   "  this",
   "  case",
   "  in",
   "  CollapseProperties",
   "  ,",
   "  but",
   "  /",
   "  it",
   "  probably",
   "  not",
   "  worth",
   "  the",
   "  effort",
   "  .",
   "  Preconditions",
   "  .",
   "  checkNotNull",
   "  (",
   "  declaration",
   "  )",
   "  ;",
   "- Preconditions",
   "- .",
   "- checkNotNull",
   "- (",
   "- declaration",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- declaration",
   "- .",
   "- getTwin",
   "- (",
   "- )",
   "- !=",
   "- null",
   "- )",
   "- {",
   "  if",
   "  (",
   "  declaration",
   "  .",
   "  getTwin",
   "  (",
   "  )",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "- }",
   "  }",
   "  f",
   "  (",
   "  isClassOrEnum",
   "  )",
   "  {",
   "  eturn",
   "  true",
   "  ;"
  ]
 },
 {
  "number": 106,
  "changes_set": [
   "  ode",
   "  true",
   "  }",
   "  if",
   "  the",
   "  description",
   "  was",
   "  recorded",
   "  .",
   "  /",
   "  ublic",
   "  boolean",
   "  recordBlockDescription",
   "  (",
   "  String",
   "  description",
   "  )",
   "  {",
   "+ if",
   "+ (",
   "+ parseDocumentation",
   "+ )",
   "+ {",
   "  opulated",
   "  =",
   "  true",
   "  ;",
   "+ }",
   "  eturn",
   "  currentInfo",
   "  .",
   "  documentBlock",
   "  (",
   "  description",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 102,
  "changes_set": [
   "  verrideublic",
   "  void",
   "  process",
   "  (",
   "  Node",
   "  externs",
   "  ,",
   "  Node",
   "  root",
   "  )",
   "  {",
   "  odeTraversal",
   "  .",
   "  traverse",
   "  (",
   "  compiler",
   "  ,",
   "  root",
   "  ,",
   "  this",
   "- )",
   "- ;",
   "- removeDuplicateDeclarations",
   "- (",
   "- root",
   "  )",
   "  ;",
   "  removeDuplicateDeclarations",
   "  (",
   "  root",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  MAKE_LOCAL_NAMES_UNIQUE",
   "  )",
   "  {",
   "  akeDeclaredNamesUnique",
   "  renamer",
   "  =",
   "  new",
   "  MakeDeclaredNamesUnique",
   "  (",
   "  )",
   "  ;",
   "  odeTraversal",
   "  t",
   "  =",
   "  new",
   "  NodeTraversal",
   "  (",
   "  compiler",
   "  ,",
   "  renamer",
   "  )",
   "  ;",
   "  .",
   "  traverseRoots",
   "  (",
   "  externs",
   "  ,",
   "  root",
   "  )",
   "  ;",
   "+ removeDuplicateDeclarations",
   "+ (",
   "+ root",
   "+ )",
   "+ ;",
   "  ew",
   "  PropogateConstantAnnotations",
   "  (",
   "  compiler",
   "  ,",
   "  assertOnChange",
   "  )",
   "  process",
   "  (",
   "  externs",
   "  ,",
   "  root",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 103,
  "changes_set": [
   "  rivate",
   "  static",
   "  boolean",
   "  mayThrowException",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  ase",
   "  Token",
   "  .",
   "  ASSIGN",
   "  :",
   "  ase",
   "  Token",
   "  .",
   "  INC",
   "  :",
   "  ase",
   "  Token",
   "  .",
   "  DEC",
   "  :",
   "  case",
   "  Token",
   "  .",
   "  INSTANCEOF",
   "  :",
   "- case",
   "- Token",
   "- .",
   "- INSTANCEOF",
   "- :",
   "  eturn",
   "  true",
   "  ;",
   "  ase",
   "  Token",
   "  .",
   "  FUNCTION",
   "  :",
   "  eturn",
   "  false",
   "  ;"
  ]
 },
 {
  "number": 103,
  "changes_set": [
   "  ublic",
   "  JSTypeSystem",
   "  (",
   "  AbstractCompiler",
   "  compiler",
   "  )",
   "  {",
   "  /",
   "  If",
   "  the",
   "  property",
   "  does",
   "  not",
   "  exist",
   "  on",
   "  the",
   "  referenced",
   "  type",
   "  but",
   "  the",
   "  original",
   "  /",
   "  type",
   "  is",
   "  an",
   "  object",
   "  type",
   "  ,",
   "  see",
   "  if",
   "  any",
   "  subtype",
   "  has",
   "  the",
   "  property",
   "  .",
   "  if",
   "  (",
   "  foundType",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- foundType",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  ObjectType",
   "  maybeType",
   "  =",
   "  ObjectType",
   "  .",
   "  cast",
   "  (",
   "- ObjectType",
   "- maybeType",
   "- =",
   "- ObjectType",
   "- .",
   "- cast",
   "- (",
   "- registry",
   "- .",
   "- getGreatestSubtypeWithProperty",
   "- (",
   "- type",
   "- ,",
   "- field",
   "- )",
   "- )",
   "- ;",
   "  registry",
   "  .",
   "  getGreatestSubtypeWithProperty",
   "  (",
   "  type",
   "  ,",
   "  field",
   "  )",
   "  )",
   "  ;",
   "  /",
   "  getGreatestSubtypeWithProperty",
   "  does",
   "  not",
   "  guarantee",
   "  that",
   "  the",
   "  property",
   "  /",
   "  is",
   "  defined",
   "  on",
   "  the",
   "  returned",
   "  type",
   "  ,",
   "  it",
   "  just",
   "  indicates",
   "  that",
   "  it",
   "  might",
   "  be",
   "  ,",
   "  /",
   "  so",
   "  we",
   "  have",
   "  to",
   "  double",
   "  check",
   "  .",
   "  if",
   "  (",
   "  maybeType",
   "  !=",
   "  null",
   "  &&",
   "  maybeType",
   "  .",
   "  hasOwnProperty",
   "  (",
   "  field",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- maybeType",
   "- !=",
   "- null",
   "- &&",
   "- maybeType",
   "- .",
   "- hasOwnProperty",
   "- (",
   "- field",
   "- )",
   "- )",
   "- {",
   "- foundType",
   "- =",
   "- maybeType",
   "- ;",
   "  foundType",
   "  =",
   "  maybeType",
   "  ;",
   "  }",
   "  }",
   "- }",
   "- }",
   "  eturn",
   "  foundType",
   "  ;"
  ]
 },
 {
  "number": 107,
  "changes_set": [
   "  rotected",
   "  CompilerOptions",
   "  createOptions",
   "  (",
   "  )",
   "  {",
   "  /",
   "  so",
   "  we",
   "  might",
   "  as",
   "  well",
   "  inline",
   "  it",
   "  .",
   "  But",
   "  shut",
   "  off",
   "  the",
   "  i18n",
   "  warnings",
   "  ,",
   "  /",
   "  because",
   "  the",
   "  user",
   "  didn",
   "  really",
   "  ask",
   "  for",
   "  i18n",
   "  .",
   "  ptions",
   "  .",
   "  messageBundle",
   "  =",
   "  new",
   "  EmptyMessageBundle",
   "  (",
   "  )",
   "  ;",
   "  options",
   "  .",
   "  setWarningLevel",
   "  (",
   "  JsMessageVisitor",
   "  .",
   "  MSG_CONVENTIONS",
   "  ,",
   "  CheckLevel",
   "  .",
   "  OFF",
   "  )",
   "  ;",
   "- options",
   "- .",
   "- setWarningLevel",
   "- (",
   "- JsMessageVisitor",
   "- .",
   "- MSG_CONVENTIONS",
   "- ,",
   "- CheckLevel",
   "- .",
   "- OFF",
   "- )",
   "- ;",
   "  eturn",
   "  options",
   "  ;"
  ]
 },
 {
  "number": 108,
  "changes_set": [
   "  ublic",
   "  void",
   "  applyAlias",
   "  (",
   "  )",
   "  {",
   "  rivate",
   "  final",
   "  Map",
   "  <",
   "  String",
   "  ,",
   "  Var",
   "  >",
   "  aliases",
   "  =",
   "  Maps",
   "  .",
   "  newHashMap",
   "  (",
   "  )",
   "  ;",
   "  /",
   "  Also",
   "  temporary",
   "  and",
   "  cleared",
   "  for",
   "  each",
   "  scope",
   "  .",
   "  private",
   "  final",
   "  Set",
   "  <",
   "  Node",
   "  >",
   "  injectedDecls",
   "  =",
   "  Sets",
   "  .",
   "  newHashSet",
   "  (",
   "  )",
   "  ;",
   "- private",
   "- final",
   "- Set",
   "- <",
   "- Node",
   "- >",
   "- injectedDecls",
   "- =",
   "- Sets",
   "- .",
   "- newHashSet",
   "- (",
   "- )",
   "- ;",
   "  /",
   "  Suppose",
   "  you",
   "  create",
   "  an",
   "  alias",
   "  .",
   "  /",
   "  var",
   "  x",
   "  =",
   "  goog",
   "  .",
   "  x",
   "  ;"
  ]
 },
 {
  "number": 108,
  "changes_set": [
   "  ublic",
   "  void",
   "  exitScope",
   "  (",
   "  NodeTraversal",
   "  t",
   "  )",
   "  {",
   "  f",
   "  (",
   "  t",
   "  .",
   "  getScopeDepth",
   "  (",
   "  )",
   "  ==",
   "  2",
   "  )",
   "  {",
   "  enameNamespaceShadows",
   "  (",
   "  t",
   "  )",
   "  ;",
   "  injectedDecls",
   "  .",
   "  clear",
   "  (",
   "  )",
   "  ;",
   "- injectedDecls",
   "- .",
   "- clear",
   "- (",
   "- )",
   "- ;",
   "  liases",
   "  .",
   "  clear",
   "  (",
   "  )",
   "  ;",
   "  orbiddenLocals",
   "  .",
   "  clear",
   "  (",
   "  )",
   "  ;",
   "  ransformation",
   "  =",
   "  null",
   "  ;"
  ]
 },
 {
  "number": 108,
  "changes_set": [
   "  rivate",
   "  void",
   "  findAliases",
   "  (",
   "  NodeTraversal",
   "  t",
   "  )",
   "  {",
   "  else",
   "  {",
   "  randparent",
   "  .",
   "  addChildBefore",
   "  (",
   "  newDecl",
   "  ,",
   "  varNode",
   "  )",
   "  ;",
   "  injectedDecls",
   "  .",
   "  add",
   "  (",
   "  newDecl",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  )",
   "  ;",
   "- injectedDecls",
   "- .",
   "- add",
   "- (",
   "- newDecl",
   "- .",
   "- getFirstChild",
   "- (",
   "- )",
   "- )",
   "- ;",
   "  /",
   "  Rewrite",
   "  \"var name = EXPR;\"",
   "  to",
   "  \"var name = $jscomp.scope.name;\""
  ]
 },
 {
  "number": 108,
  "changes_set": [
   "  ublic",
   "  void",
   "  visit",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  parent",
   "  )",
   "  {",
   "  /",
   "  When",
   "  we",
   "  inject",
   "  declarations",
   "  ,",
   "  we",
   "  duplicate",
   "  jsdoc",
   "  .",
   "  Make",
   "  sure",
   "  /",
   "  we",
   "  only",
   "  process",
   "  that",
   "  jsdoc",
   "  once",
   "  .",
   "  SDocInfo",
   "  info",
   "  =",
   "  n",
   "  .",
   "  getJSDocInfo",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  info",
   "  !=",
   "  null",
   "- &&",
   "- !",
   "- injectedDecls",
   "- .",
   "- contains",
   "- (",
   "- n",
   "- )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  info",
   "  !=",
   "  null",
   "  &&",
   "  !",
   "  injectedDecls",
   "  .",
   "  contains",
   "  (",
   "  n",
   "  )",
   "  )",
   "  {",
   "  or",
   "  (",
   "  Node",
   "  node",
   "  :",
   "  info",
   "  .",
   "  getTypeNodes",
   "  (",
   "  )",
   "  )",
   "  {",
   "  ixTypeNode",
   "  (",
   "  node",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 109,
  "changes_set": [
   "  rivate",
   "  Node",
   "  parseTypeExpression",
   "  (",
   "  JsDocToken",
   "  token",
   "  )",
   "  {",
   "  For",
   "  expressions",
   "  on",
   "  the",
   "  right",
   "  hand",
   "  side",
   "  of",
   "  a",
   "  this",
   "  :",
   "  or",
   "  new",
   "  :",
   "  /",
   "  rivate",
   "  Node",
   "  parseContextTypeExpression",
   "  (",
   "  JsDocToken",
   "  token",
   "  )",
   "  {",
   "- if",
   "+ return",
   "+ parseTypeName",
   "  (",
   "  token",
   "- ==",
   "- JsDocToken",
   "- .",
   "- QMARK",
   "  )",
   "- {",
   "+ ;",
   "  if",
   "  (",
   "  token",
   "  ==",
   "  JsDocToken",
   "  .",
   "  QMARK",
   "  )",
   "  {",
   "  return",
   "  newNode",
   "  (",
   "  Token",
   "  .",
   "  QMARK",
   "  )",
   "  ;",
   "- return",
   "- newNode",
   "- (",
   "- Token",
   "- .",
   "- QMARK",
   "- )",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  return",
   "  parseBasicTypeExpression",
   "  (",
   "  token",
   "  )",
   "  ;",
   "- return",
   "- parseBasicTypeExpression",
   "- (",
   "- token",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  *",
   "  *"
  ]
 },
 {
  "number": 117,
  "changes_set": [
   "  rivate",
   "  String",
   "  formatFoundRequired",
   "  (",
   "  String",
   "  description",
   "  ,",
   "  JSType",
   "  found",
   "  ,",
   "  to",
   "  an",
   "  Object",
   "  type",
   "  ,",
   "  if",
   "  possible",
   "  .",
   "  /",
   "  tring",
   "  getReadableJSTypeName",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  boolean",
   "  dereference",
   "  )",
   "  {",
   "  JSType",
   "  type",
   "  =",
   "  getJSType",
   "  (",
   "  n",
   "  )",
   "  ;",
   "- JSType",
   "- type",
   "- =",
   "- getJSType",
   "- (",
   "- n",
   "- )",
   "- ;",
   "  if",
   "  (",
   "  dereference",
   "  )",
   "  {",
   "- if",
   "- (",
   "- dereference",
   "- )",
   "- {",
   "- ObjectType",
   "- dereferenced",
   "- =",
   "- type",
   "- .",
   "- dereference",
   "- (",
   "- )",
   "- ;",
   "  ObjectType",
   "  dereferenced",
   "  =",
   "  type",
   "  .",
   "  dereference",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  dereferenced",
   "  !=",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- dereferenced",
   "- !=",
   "- null",
   "- )",
   "- {",
   "  type",
   "  =",
   "  dereferenced",
   "  ;",
   "- type",
   "- =",
   "- dereferenced",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  /",
   "  The",
   "  best",
   "  type",
   "  name",
   "  is",
   "  the",
   "  actual",
   "  type",
   "  name",
   "  .",
   "  if",
   "  (",
   "  type",
   "  .",
   "  isFunctionPrototypeType",
   "  (",
   "  )",
   "  ||",
   "- if",
   "- (",
   "- type",
   "- .",
   "- isFunctionPrototypeType",
   "- (",
   "- )",
   "- ||",
   "- (",
   "- type",
   "- .",
   "- toObjectType",
   "- (",
   "- )",
   "- !=",
   "- null",
   "- &&",
   "  (",
   "  type",
   "  .",
   "  toObjectType",
   "  (",
   "  )",
   "  !=",
   "  null",
   "  &&",
   "  type",
   "  .",
   "  toObjectType",
   "  (",
   "  )",
   "  .",
   "  getConstructor",
   "  (",
   "  )",
   "  !=",
   "  null",
   "  )",
   "  )",
   "  {",
   "- type",
   "- .",
   "- toObjectType",
   "- (",
   "- )",
   "- .",
   "- getConstructor",
   "- (",
   "- )",
   "- !=",
   "- null",
   "- )",
   "- )",
   "- {",
   "  return",
   "  type",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  ;",
   "- return",
   "- type",
   "- .",
   "- toString",
   "- (",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  If",
   "  we",
   "  analyzing",
   "  a",
   "  GETPROP",
   "  ,",
   "  the",
   "  property",
   "  may",
   "  be",
   "  inherited",
   "  by",
   "  the",
   "  /",
   "  prototype",
   "  chain",
   "  .",
   "  So",
   "  climb",
   "  the",
   "  prototype",
   "  chain",
   "  and",
   "  find",
   "  out",
   "  where"
  ]
 },
 {
  "number": 117,
  "changes_set": [
   "  tring",
   "  getReadableJSTypeName",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  boolean",
   "  dereference",
   "  )",
   "  {",
   "+ JSType",
   "+ type",
   "+ =",
   "+ getJSType",
   "+ (",
   "+ n",
   "+ )",
   "+ ;",
   "+ if",
   "+ (",
   "+ dereference",
   "+ )",
   "+ {",
   "+ ObjectType",
   "+ dereferenced",
   "+ =",
   "+ type",
   "+ .",
   "+ dereference",
   "+ (",
   "+ )",
   "+ ;",
   "+ if",
   "+ (",
   "+ dereferenced",
   "+ !=",
   "+ null",
   "+ )",
   "+ {",
   "+ type",
   "+ =",
   "+ dereferenced",
   "+ ;",
   "+ }",
   "+ }",
   "+ if",
   "+ (",
   "+ type",
   "+ .",
   "+ isFunctionPrototypeType",
   "+ (",
   "+ )",
   "+ ||",
   "+ (",
   "+ type",
   "+ .",
   "+ toObjectType",
   "+ (",
   "+ )",
   "+ !=",
   "+ null",
   "+ &&",
   "+ type",
   "+ .",
   "+ toObjectType",
   "+ (",
   "+ )",
   "+ .",
   "+ getConstructor",
   "+ (",
   "+ )",
   "+ !=",
   "+ null",
   "+ )",
   "+ )",
   "+ {",
   "+ return",
   "+ type",
   "+ .",
   "+ toString",
   "+ (",
   "+ )",
   "+ ;",
   "+ }",
   "  tring",
   "  qualifiedName",
   "  =",
   "  n",
   "  .",
   "  getQualifiedName",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  qualifiedName",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  eturn",
   "  qualifiedName",
   "  ;"
  ]
 },
 {
  "number": 112,
  "changes_set": [
   "  rivate",
   "  boolean",
   "  inferTemplatedTypesForCall",
   "  (",
   "  /",
   "  Try",
   "  to",
   "  infer",
   "  the",
   "  template",
   "  typesMap",
   "  <",
   "  TemplateType",
   "  ,",
   "  JSType",
   "  >",
   "  inferred",
   "  =",
   "+ inferTemplateTypesFromParameters",
   "- Maps",
   "- .",
   "- filterKeys",
   "  (",
   "+ fnType",
   "+ ,",
   "+ n",
   "+ )",
   "+ ;",
   "  Map",
   "  <",
   "  TemplateType",
   "  ,",
   "  JSType",
   "  >",
   "  inferred",
   "  =",
   "  Maps",
   "  .",
   "  filterKeys",
   "  (",
   "  inferTemplateTypesFromParameters",
   "  (",
   "  fnType",
   "  ,",
   "  n",
   "  )",
   "  ,",
   "- inferTemplateTypesFromParameters",
   "- (",
   "- fnType",
   "- ,",
   "- n",
   "- )",
   "- ,",
   "  new",
   "  Predicate",
   "  <",
   "  TemplateType",
   "  >",
   "  (",
   "  )",
   "  {",
   "- new",
   "- Predicate",
   "- <",
   "- TemplateType",
   "- >",
   "- (",
   "- )",
   "- {"
  ]
 },
 {
  "number": 112,
  "changes_set": [
   "  verridepublic",
   "- boolean",
   "- apply",
   "- (",
   "- TemplateType",
   "- key",
   "- )",
   "- {",
   "- public",
   "  boolean",
   "  apply",
   "  (",
   "  TemplateType",
   "  key",
   "  )",
   "  {",
   "  return",
   "  keys",
   "  .",
   "  contains",
   "  (",
   "  key",
   "  )",
   "  ;",
   "- return",
   "- keys",
   "- .",
   "- contains",
   "- (",
   "- key",
   "- )",
   "- ;",
   "  }",
   "  }",
   "- }",
   "- }",
   "- )",
   "- ;",
   "  )",
   "  ;",
   "  /",
   "  Replace",
   "  all",
   "  template",
   "  types",
   "  .",
   "  If",
   "  we",
   "  couldn",
   "  find",
   "  a",
   "  replacement",
   "  ,",
   "  we",
   "  /",
   "  replace",
   "  it",
   "  with",
   "  UNKNOWN",
   "  ."
  ]
 },
 {
  "number": 114,
  "changes_set": [
   "  rivate",
   "  void",
   "  recordAssignment",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  recordNode",
   "  )",
   "  {",
   "  else",
   "  {",
   "  ecordDepScope",
   "  (",
   "  nameNode",
   "  ,",
   "  ns",
   "  )",
   "  ;",
   "  }",
   "  else",
   "- if",
   "- (",
   "- !",
   "- (",
   "- parent",
   "- .",
   "- isCall",
   "- (",
   "- )",
   "- &&",
   "- parent",
   "- .",
   "- getFirstChild",
   "- (",
   "- )",
   "- ==",
   "- n",
   "- )",
   "- )",
   "  {",
   "  }",
   "  else",
   "  if",
   "  (",
   "  !",
   "  (",
   "  parent",
   "  .",
   "  isCall",
   "  (",
   "  )",
   "  &&",
   "  parent",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ==",
   "  n",
   "  )",
   "  )",
   "  {",
   "  /",
   "  The",
   "  rhs",
   "  of",
   "  the",
   "  assignment",
   "  is",
   "  the",
   "  caller",
   "  ,",
   "  so",
   "  it",
   "  used",
   "  by",
   "  the",
   "  /",
   "  context",
   "  .",
   "  Don",
   "  associate",
   "  it",
   "  w",
   "  /",
   "  the",
   "  lhs",
   "  .",
   "  /",
   "  FYI",
   "  :",
   "  this",
   "  fixes",
   "  only",
   "  the",
   "  specific",
   "  case",
   "  where",
   "  the",
   "  assignment",
   "  is",
   "  the"
  ]
 },
 {
  "number": 113,
  "changes_set": [
   "  rivate",
   "  void",
   "  processRequireCall",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  ,",
   "  Node",
   "  parent",
   "  )",
   "  {",
   "  /",
   "  the",
   "  checks",
   "  for",
   "  broken",
   "  requires",
   "  turned",
   "  off",
   "  .",
   "  In",
   "  these",
   "  cases",
   "  ,",
   "  we",
   "  /",
   "  allow",
   "  broken",
   "  requires",
   "  to",
   "  be",
   "  preserved",
   "  by",
   "  the",
   "  first",
   "  run",
   "  to",
   "  /",
   "  let",
   "  them",
   "  be",
   "  caught",
   "  in",
   "  the",
   "  subsequent",
   "  run",
   "  .",
   "  if",
   "  (",
   "  provided",
   "  !=",
   "  null",
   "- ||",
   "- requiresLevel",
   "- .",
   "- isOn",
   "- (",
   "- )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  provided",
   "  !=",
   "  null",
   "  ||",
   "  requiresLevel",
   "  .",
   "  isOn",
   "  (",
   "  )",
   "  )",
   "  {",
   "  arent",
   "  .",
   "  detachFromParent",
   "  (",
   "  )",
   "  ;",
   "  ompiler",
   "  .",
   "  reportCodeChange",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 115,
  "changes_set": [
   "  rivate",
   "  CanInlineResult",
   "  canInlineReferenceDirectly",
   "  (",
   "  ode",
   "  block",
   "  =",
   "  fnNode",
   "  .",
   "  getLastChild",
   "  (",
   "  )",
   "  ;",
   "+ boolean",
   "+ hasSideEffects",
   "+ =",
   "+ false",
   "+ ;",
   "+ if",
   "+ (",
   "+ block",
   "+ .",
   "+ hasChildren",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "+ Preconditions",
   "+ .",
   "+ checkState",
   "+ (",
   "+ block",
   "+ .",
   "+ hasOneChild",
   "+ (",
   "+ )",
   "+ )",
   "+ ;",
   "+ Node",
   "+ stmt",
   "+ =",
   "+ block",
   "+ .",
   "+ getFirstChild",
   "+ (",
   "+ )",
   "+ ;",
   "+ if",
   "+ (",
   "+ stmt",
   "+ .",
   "+ isReturn",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "+ hasSideEffects",
   "+ =",
   "+ NodeUtil",
   "+ .",
   "+ mayHaveSideEffects",
   "+ (",
   "+ stmt",
   "+ .",
   "+ getFirstChild",
   "+ (",
   "+ )",
   "+ ,",
   "+ compiler",
   "+ )",
   "+ ;",
   "+ }",
   "+ }",
   "  /",
   "  CALL",
   "  NODE",
   "  :",
   "  [",
   "  NAME",
   "  ,",
   "  ARG1",
   "  ,",
   "  ARG2",
   "  ,",
   "  ...",
   "  ]",
   "  ode",
   "  cArg",
   "  =",
   "  callNode",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 115,
  "changes_set": [
   "  rivate",
   "  CanInlineResult",
   "  canInlineReferenceDirectly",
   "  (",
   "  /",
   "  For",
   "  each",
   "  named",
   "  parameter",
   "  check",
   "  if",
   "  a",
   "  mutable",
   "  argument",
   "  use",
   "  more",
   "  than",
   "  one",
   "  .",
   "  f",
   "  (",
   "  fnParam",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  f",
   "  (",
   "  cArg",
   "  !=",
   "  null",
   "  )",
   "  {",
   "+ if",
   "+ (",
   "+ hasSideEffects",
   "+ &&",
   "+ NodeUtil",
   "+ .",
   "+ canBeSideEffected",
   "+ (",
   "+ cArg",
   "+ )",
   "+ )",
   "+ {",
   "+ return",
   "+ CanInlineResult",
   "+ .",
   "+ NO",
   "+ ;",
   "+ }",
   "  /",
   "  Check",
   "  for",
   "  arguments",
   "  that",
   "  are",
   "  evaluated",
   "  more",
   "  than",
   "  once",
   "  .",
   "  /",
   "  Note",
   "  :",
   "  Unlike",
   "  block",
   "  inlining",
   "  ,",
   "  there",
   "  it",
   "  is",
   "  not",
   "  possible",
   "  that",
   "  a",
   "  /",
   "  parameter",
   "  reference",
   "  will",
   "  be",
   "  in",
   "  a",
   "  loop",
   "  ."
  ]
 },
 {
  "number": 116,
  "changes_set": [
   "  rivate",
   "  CanInlineResult",
   "  canInlineReferenceDirectly",
   "  (",
   "  /",
   "  For",
   "  each",
   "  named",
   "  parameter",
   "  check",
   "  if",
   "  a",
   "  mutable",
   "  argument",
   "  use",
   "  more",
   "  than",
   "  one",
   "  .",
   "  f",
   "  (",
   "  fnParam",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  f",
   "  (",
   "  cArg",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  if",
   "  (",
   "  hasSideEffects",
   "  &&",
   "  NodeUtil",
   "  .",
   "  canBeSideEffected",
   "  (",
   "  cArg",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- hasSideEffects",
   "- &&",
   "- NodeUtil",
   "- .",
   "- canBeSideEffected",
   "- (",
   "- cArg",
   "- )",
   "- )",
   "- {",
   "  return",
   "  CanInlineResult",
   "  .",
   "  NO",
   "  ;",
   "- return",
   "- CanInlineResult",
   "- .",
   "- NO",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  Check",
   "  for",
   "  arguments",
   "  that",
   "  are",
   "  evaluated",
   "  more",
   "  than",
   "  once",
   "  .",
   "  /",
   "  Note",
   "  :",
   "  Unlike",
   "  block",
   "  inlining",
   "  ,",
   "  there",
   "  it",
   "  is",
   "  not",
   "  possible",
   "  that",
   "  a"
  ]
 },
 {
  "number": 111,
  "changes_set": [
   "  verriderotected",
   "  JSType",
   "  caseTopType",
   "  (",
   "  JSType",
   "  topType",
   "  )",
   "  {",
   "  return",
   "  topType",
   "+ ;",
   "- .",
   "- isAllType",
   "- (",
   "- )",
   "- ?",
   "  return",
   "  topType",
   "  .",
   "  isAllType",
   "  (",
   "  )",
   "  ?",
   "  getNativeType",
   "  (",
   "  ARRAY_TYPE",
   "  )",
   "  :",
   "  topType",
   "  ;",
   "- getNativeType",
   "- (",
   "- ARRAY_TYPE",
   "- )",
   "- :",
   "- topType",
   "- ;"
  ]
 },
 {
  "number": 110,
  "changes_set": [
   "  rivate",
   "  void",
   "  findAliases",
   "  (",
   "  NodeTraversal",
   "  t",
   "  )",
   "  {",
   "  ode",
   "  n",
   "  =",
   "  v",
   "  .",
   "  getNode",
   "  (",
   "  )",
   "  ;",
   "  ode",
   "  parent",
   "  =",
   "  n",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  ;",
   "  oolean",
   "  isVar",
   "  =",
   "  parent",
   "  .",
   "  isVar",
   "  (",
   "- )",
   "- ;",
   "- boolean",
   "- isFunctionDecl",
   "- =",
   "- NodeUtil",
   "- .",
   "- isFunctionDeclaration",
   "- (",
   "- parent",
   "  )",
   "  ;",
   "  boolean",
   "  isFunctionDecl",
   "  =",
   "  NodeUtil",
   "  .",
   "  isFunctionDeclaration",
   "  (",
   "  parent",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  isVar",
   "  &&",
   "  n",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  !=",
   "  null",
   "  &&",
   "  n",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  .",
   "  isQualifiedName",
   "  (",
   "  )",
   "  )",
   "  {",
   "  ecordAlias",
   "  (",
   "  v",
   "  )",
   "  ;",
   "  else",
   "  if",
   "  (",
   "  v",
   "  .",
   "  isBleedingFunction",
   "  (",
   "  )",
   "  )",
   "  {"
  ]
 },
 {
  "number": 110,
  "changes_set": [
   "  rivate",
   "  void",
   "  findAliases",
   "  (",
   "  NodeTraversal",
   "  t",
   "  )",
   "  {",
   "  else",
   "  if",
   "  (",
   "  parent",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ==",
   "  Token",
   "  .",
   "  LP",
   "  )",
   "  {",
   "  /",
   "  Parameters",
   "  of",
   "  the",
   "  scope",
   "  function",
   "  also",
   "  get",
   "  a",
   "  BAD_PARAMETERS",
   "  /",
   "  error",
   "  .",
   "  }",
   "  else",
   "  if",
   "  (",
   "  isVar",
   "- ||",
   "- isFunctionDecl",
   "  )",
   "  {",
   "  }",
   "  else",
   "  if",
   "  (",
   "  isVar",
   "  ||",
   "  isFunctionDecl",
   "  )",
   "  {",
   "- boolean",
   "- isHoisted",
   "- =",
   "- NodeUtil",
   "- .",
   "- isHoistedFunctionDeclaration",
   "- (",
   "- parent",
   "- )",
   "- ;",
   "  boolean",
   "  isHoisted",
   "  =",
   "  NodeUtil",
   "  .",
   "  isHoistedFunctionDeclaration",
   "  (",
   "  parent",
   "  )",
   "  ;",
   "  ode",
   "  grandparent",
   "  =",
   "  parent",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  ;",
   "  Node",
   "  value",
   "  =",
   "+ n",
   "+ .",
   "+ hasChildren",
   "+ (",
   "+ )",
   "+ ?",
   "  v",
   "  .",
   "  getInitialValue",
   "  (",
   "  )",
   "- !=",
   "- null",
   "- ?",
   "+ .",
   "+ detachFromParent",
   "+ (",
   "+ )",
   "+ :",
   "  Node",
   "  value",
   "  =",
   "  v",
   "  .",
   "  getInitialValue",
   "  (",
   "  )",
   "  !=",
   "  null",
   "  ?",
   "  v",
   "  .",
   "  getInitialValue",
   "  (",
   "  )",
   "  :",
   "- v",
   "- .",
   "- getInitialValue",
   "- (",
   "- )",
   "- :",
   "  ull",
   "  ;",
   "  Node",
   "  varNode",
   "  =",
   "- null",
   "+ parent",
   "  ;",
   "  Node",
   "  varNode",
   "  =",
   "  null",
   "  ;",
   "  tring",
   "  name",
   "  =",
   "  n",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  ;",
   "  nt",
   "  nameCount",
   "  =",
   "  scopedAliasNames",
   "  .",
   "  count",
   "  (",
   "  name",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 110,
  "changes_set": [
   "  rivate",
   "  void",
   "  findAliases",
   "  (",
   "  NodeTraversal",
   "  t",
   "  )",
   "  {",
   "  /",
   "  First",
   "  ,",
   "  we",
   "  need",
   "  to",
   "  free",
   "  up",
   "  the",
   "  function",
   "  expression",
   "  (",
   "  EXPR",
   "  )",
   "  /",
   "  to",
   "  be",
   "  used",
   "  in",
   "  another",
   "  expression",
   "  .",
   "  if",
   "  (",
   "  isFunctionDecl",
   "  )",
   "  {",
   "- if",
   "- (",
   "- isFunctionDecl",
   "- )",
   "- {",
   "  /",
   "  Replace",
   "  \"function NAME() { ... }\"",
   "  with",
   "  \"var NAME;\"",
   "  .",
   "- Node",
   "- existingName",
   "- =",
   "- v",
   "- .",
   "- getNameNode",
   "- (",
   "- )",
   "- ;",
   "  Node",
   "  existingName",
   "  =",
   "  v",
   "  .",
   "  getNameNode",
   "  (",
   "  )",
   "  ;",
   "  /",
   "  We",
   "  can",
   "  keep",
   "  the",
   "  local",
   "  name",
   "  on",
   "  the",
   "  function",
   "  expression",
   "  ,",
   "  /",
   "  because",
   "  IE",
   "  is",
   "  buggy",
   "  and",
   "  will",
   "  leak",
   "  the",
   "  name",
   "  into",
   "  the",
   "  global"
  ]
 },
 {
  "number": 110,
  "changes_set": [
   "  rivate",
   "  void",
   "  findAliases",
   "  (",
   "  NodeTraversal",
   "  t",
   "  )",
   "  {",
   "  odeUtil",
   "  .",
   "  setDebugInformation",
   "  (",
   "  ewDecl",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ,",
   "  n",
   "  ,",
   "  name",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  isHoisted",
   "  )",
   "  {",
   "- if",
   "- (",
   "- isHoisted",
   "- )",
   "- {",
   "  grandparent",
   "  .",
   "  addChildToFront",
   "  (",
   "  newDecl",
   "  )",
   "  ;",
   "- grandparent",
   "- .",
   "- addChildToFront",
   "- (",
   "- newDecl",
   "- )",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  randparent",
   "  .",
   "  addChildBefore",
   "  (",
   "  newDecl",
   "  ,",
   "  varNode",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  /",
   "  Rewrite",
   "  \"var name = EXPR;\"",
   "  to",
   "  \"var name = $jscomp.scope.name;\""
  ]
 },
 {
  "number": 110,
  "changes_set": [
   "  ublic",
   "  Node",
   "  getChildBefore",
   "  (",
   "  Node",
   "  child",
   "  )",
   "  {",
   "  eturn",
   "  null",
   "  ;",
   "  ode",
   "  n",
   "  =",
   "  first",
   "  ;",
   "  if",
   "  (",
   "  n",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- n",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  throw",
   "  new",
   "  RuntimeException",
   "  (",
   "  \"node is not a child\"",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- RuntimeException",
   "- (",
   "- \"node is not a child\"",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  hile",
   "  (",
   "  n",
   "  .",
   "  next",
   "  !=",
   "  child",
   "  )",
   "  {",
   "  =",
   "  n",
   "  .",
   "  next",
   "  ;"
  ]
 },
 {
  "number": 118,
  "changes_set": [
   "  rivate",
   "  void",
   "  handleObjectLit",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  hild",
   "  !=",
   "  null",
   "  ;",
   "  hild",
   "  =",
   "  child",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  )",
   "  {",
   "  /",
   "  Maybe",
   "  STRING",
   "  ,",
   "  GET",
   "  ,",
   "  SETif",
   "  (",
   "  child",
   "  .",
   "  isQuotedString",
   "  (",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- child",
   "- .",
   "- isQuotedString",
   "- (",
   "- )",
   "- )",
   "- {",
   "  continue",
   "  ;",
   "- continue",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  We",
   "  should",
   "  never",
   "  see",
   "  a",
   "  mix",
   "  of",
   "  numbers",
   "  and",
   "  strings",
   "  .",
   "  tring",
   "  name",
   "  =",
   "  child",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 120,
  "changes_set": [
   "  oolean",
   "  isAssignedOnceInLifetime",
   "  (",
   "  )",
   "  {",
   "  or",
   "  (",
   "  BasicBlock",
   "  block",
   "  =",
   "  ref",
   "  .",
   "  getBasicBlock",
   "  (",
   "  )",
   "  ;",
   "  lock",
   "  !=",
   "  null",
   "  ;",
   "  block",
   "  =",
   "  block",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  )",
   "  {",
   "  f",
   "  (",
   "  block",
   "  .",
   "  isFunction",
   "  )",
   "  {",
   "  if",
   "  (",
   "  ref",
   "  .",
   "  getSymbol",
   "  (",
   "  )",
   "  .",
   "  getScope",
   "  (",
   "  )",
   "  !=",
   "  ref",
   "  .",
   "  scope",
   "  )",
   "  {",
   "- if",
   "- (",
   "- ref",
   "- .",
   "- getSymbol",
   "- (",
   "- )",
   "- .",
   "- getScope",
   "- (",
   "- )",
   "- !=",
   "- ref",
   "- .",
   "- scope",
   "- )",
   "- {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "- }",
   "  }",
   "  reak",
   "  ;",
   "  else",
   "  if",
   "  (",
   "  block",
   "  .",
   "  isLoop",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;"
  ]
 },
 {
  "number": 119,
  "changes_set": [
   "  ublic",
   "  void",
   "  collect",
   "  (",
   "  JSModule",
   "  module",
   "  ,",
   "  Scope",
   "  scope",
   "  ,",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  sSet",
   "  =",
   "  true",
   "  ;",
   "  ype",
   "  =",
   "  Name",
   "  .",
   "  Type",
   "  .",
   "  FUNCTION",
   "  ;",
   "  reak",
   "  ;",
   "  case",
   "  Token",
   "  .",
   "  CATCH",
   "  :",
   "- case",
   "- Token",
   "- .",
   "- CATCH",
   "- :",
   "  ase",
   "  Token",
   "  .",
   "  INC",
   "  :",
   "  ase",
   "  Token",
   "  .",
   "  DEC",
   "  :",
   "  sSet",
   "  =",
   "  true",
   "  ;"
  ]
 },
 {
  "number": 121,
  "changes_set": [
   "  rivate",
   "  void",
   "  inlineNonConstants",
   "  (",
   "  f",
   "  (",
   "  !",
   "  maybeModifiedArguments",
   "  &&",
   "  staleVars",
   "  .",
   "  contains",
   "  (",
   "  v",
   "  )",
   "  &&",
   "  eferenceInfo",
   "  .",
   "  isWellDefined",
   "  (",
   "  )",
   "  &&",
   "  referenceInfo",
   "  .",
   "  isAssignedOnceInLifetime",
   "  (",
   "  )",
   "- &&",
   "+ )",
   "+ {",
   "  referenceInfo",
   "  .",
   "  isAssignedOnceInLifetime",
   "  (",
   "  )",
   "  &&",
   "  /",
   "  Inlining",
   "  the",
   "  variable",
   "  based",
   "  solely",
   "  on",
   "  well",
   "  -",
   "  defined",
   "  and",
   "  assigned",
   "  /",
   "  once",
   "  is",
   "  *",
   "  NOT",
   "  *",
   "  correct",
   "  .",
   "  We",
   "  relax",
   "  the",
   "  correctness",
   "  requirement",
   "  if",
   "  /",
   "  the",
   "  variable",
   "  is",
   "  declared",
   "  constant",
   "  .",
   "  (",
   "  isInlineableDeclaredConstant",
   "  (",
   "  v",
   "  ,",
   "  referenceInfo",
   "  )",
   "  ||",
   "- (",
   "- isInlineableDeclaredConstant",
   "- (",
   "- v",
   "- ,",
   "- referenceInfo",
   "- )",
   "- ||",
   "- referenceInfo",
   "- .",
   "- isOnlyAssignmentSameScopeAsDeclaration",
   "- (",
   "- )",
   "- )",
   "- )",
   "- {",
   "  referenceInfo",
   "  .",
   "  isOnlyAssignmentSameScopeAsDeclaration",
   "  (",
   "  )",
   "  )",
   "  )",
   "  {",
   "  ist",
   "  <",
   "  Reference",
   "  >",
   "  refs",
   "  =",
   "  referenceInfo",
   "  .",
   "  references",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  1",
   "  ;",
   "  i",
   "  <",
   "  refs",
   "  .",
   "  size",
   "  (",
   "  )",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  ode",
   "  nameNode",
   "  =",
   "  refs",
   "  .",
   "  get",
   "  (",
   "  i",
   "  )",
   "  .",
   "  getNode",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 123,
  "changes_set": [
   "  oid",
   "  add",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  Context",
   "  context",
   "  )",
   "  {",
   "  ase",
   "  Token",
   "  .",
   "  HOOK",
   "  :",
   "  {",
   "  reconditions",
   "  .",
   "  checkState",
   "  (",
   "  childCount",
   "  ==",
   "  3",
   "  )",
   "  ;",
   "  nt",
   "  p",
   "  =",
   "  NodeUtil",
   "  .",
   "  precedence",
   "  (",
   "  type",
   "  )",
   "  ;",
   "  Context",
   "  rhsContext",
   "  =",
   "- getContextForNoInOperator",
   "- (",
   "- context",
   "+ Context",
   "- )",
   "+ .",
   "+ OTHER",
   "  ;",
   "  Context",
   "  rhsContext",
   "  =",
   "  getContextForNoInOperator",
   "  (",
   "  context",
   "  )",
   "  ;",
   "  ddExpr",
   "  (",
   "  first",
   "  ,",
   "  p",
   "  +",
   "  1",
   "  ,",
   "  context",
   "  )",
   "  ;",
   "  c",
   "  .",
   "  addOp",
   "  (",
   "  \"?\"",
   "  ,",
   "  true",
   "  )",
   "  ;",
   "  ddExpr",
   "  (",
   "  first",
   "  .",
   "  getNext",
   "  (",
   "  )",
   "  ,",
   "  1",
   "  ,",
   "  rhsContext",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 122,
  "changes_set": [
   "  rivate",
   "  Node",
   "  transformBlock",
   "  (",
   "  AstNode",
   "  node",
   "  )",
   "  {",
   "  Check",
   "  to",
   "  see",
   "  if",
   "  the",
   "  given",
   "  block",
   "  comment",
   "  looks",
   "  like",
   "  it",
   "  should",
   "  be",
   "  JSDoc",
   "  .",
   "  /",
   "  rivate",
   "  void",
   "  handleBlockComment",
   "  (",
   "  Comment",
   "  comment",
   "  )",
   "  {",
   "+ if",
   "+ (",
   "+ comment",
   "+ .",
   "+ getValue",
   "+ (",
   "+ )",
   "+ .",
   "+ indexOf",
   "+ ("
  ]
 },
 {
  "number": 122,
  "changes_set": [
   "  )",
   "  !=",
   "  -",
   "  1",
   "  )",
   "  {",
   "  Pattern",
   "  p",
   "  =",
   "  Pattern",
   "  .",
   "  compile",
   "  (",
   "- \"(/|(\\n[ \\t]*))\\\\*[ \\t]*Pattern p = Pattern.compile(\"",
   "- (",
   "- /",
   "- |",
   "- (",
   "- n",
   "- [",
   "- t",
   "- ]",
   "- *",
   "- )",
   "- )",
   "- *",
   "- [",
   "- t",
   "- ]",
   "- *"
  ]
 },
 {
  "number": 126,
  "changes_set": [
   "  oid",
   "  tryMinimizeExits",
   "  (",
   "  Node",
   "  n",
   "  ,",
   "  int",
   "  exitType",
   "  ,",
   "  String",
   "  labelName",
   "  )",
   "  {",
   "  can",
   "  cause",
   "  problems",
   "  if",
   "  it",
   "  changes",
   "  the",
   "  completion",
   "  type",
   "  of",
   "  the",
   "  finallyblock",
   "  .",
   "  See",
   "  ECMA",
   "  262",
   "  Sections",
   "  8.9",
   "  &",
   "  12.14",
   "+ /",
   "+ if",
   "+ (",
   "+ NodeUtil",
   "+ .",
   "+ hasFinally",
   "+ (",
   "+ n",
   "+ )",
   "+ )",
   "+ {",
   "+ Node",
   "+ finallyBlock",
   "+ =",
   "+ n",
   "+ .",
   "+ getLastChild",
   "+ (",
   "+ )",
   "+ ;",
   "+ tryMinimizeExits",
   "+ (",
   "+ finallyBlock",
   "+ ,",
   "+ exitType",
   "+ ,",
   "+ labelName",
   "+ )",
   "+ ;",
   "+ }",
   "+ /",
   "+ Just",
   "+ a",
   "+ bel"
  ]
 },
 {
  "number": 124,
  "changes_set": [
   "  rivate",
   "  boolean",
   "  isSafeReplacement",
   "  (",
   "  Node",
   "  node",
   "  ,",
   "  Node",
   "  replacement",
   "  )",
   "  {",
   "  reconditions",
   "  .",
   "  checkArgument",
   "  (",
   "  node",
   "  .",
   "  isGetProp",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  while",
   "  (",
   "  node",
   "  .",
   "  isGetProp",
   "  (",
   "  )",
   "  )",
   "  {",
   "- while",
   "- (",
   "- node",
   "- .",
   "- isGetProp",
   "- (",
   "- )",
   "- )",
   "- {",
   "  ode",
   "  =",
   "  node",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  f",
   "  (",
   "  node",
   "  .",
   "  isName",
   "  (",
   "  )",
   "  &",
   "  isNameAssignedTo",
   "  (",
   "  node",
   "  .",
   "  getString",
   "  (",
   "  )",
   "  ,",
   "  replacement",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;"
  ]
 },
 {
  "number": 127,
  "changes_set": [
   "  rivate",
   "  void",
   "  tryRemoveUnconditionalBranching",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  utEdges",
   "  .",
   "  get",
   "  (",
   "  0",
   "  )",
   "  .",
   "  getValue",
   "  (",
   "  )",
   "  ==",
   "  Branch",
   "  .",
   "  UNCOND",
   "  )",
   "  ;",
   "  ode",
   "  fallThrough",
   "  =",
   "  computeFollowing",
   "  (",
   "  n",
   "  )",
   "  ;",
   "  ode",
   "  nextCfgNode",
   "  =",
   "  outEdges",
   "  .",
   "  get",
   "  (",
   "  0",
   "  )",
   "  .",
   "  getDestination",
   "  (",
   "  )",
   "  .",
   "  getValue",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  nextCfgNode",
   "  ==",
   "  fallThrough",
   "- &&",
   "- !",
   "- inFinally",
   "- (",
   "- n",
   "- .",
   "- getParent",
   "- (",
   "- )",
   "- ,",
   "- n",
   "- )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  nextCfgNode",
   "  ==",
   "  fallThrough",
   "  &&",
   "  !",
   "  inFinally",
   "  (",
   "  n",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  ,",
   "  n",
   "  )",
   "  )",
   "  {",
   "  emoveNode",
   "  (",
   "  n",
   "  )",
   "  ;",
   "  private",
   "  boolean",
   "  inFinally",
   "  (",
   "  Node",
   "  parent",
   "  ,",
   "  Node",
   "  child",
   "  )",
   "  {",
   "- private",
   "- boolean",
   "- inFinally",
   "- (",
   "- Node",
   "- parent",
   "- ,",
   "- Node",
   "- child",
   "- )",
   "- {",
   "  if",
   "  (",
   "  parent",
   "  ==",
   "  null",
   "  ||",
   "  parent",
   "  .",
   "  isFunction",
   "  (",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- parent",
   "- ==",
   "- null",
   "- ||",
   "- parent",
   "- .",
   "- isFunction",
   "- (",
   "- )",
   "- )",
   "- {",
   "- return",
   "- false",
   "- ;",
   "  return",
   "  false",
   "  ;",
   "  }",
   "  else",
   "  if",
   "  (",
   "  NodeUtil",
   "  .",
   "  isTryFinallyNode",
   "  (",
   "  parent",
   "  ,",
   "  child",
   "  )",
   "  )",
   "  {",
   "- }",
   "- else",
   "- if",
   "- (",
   "- NodeUtil",
   "- .",
   "- isTryFinallyNode",
   "- (",
   "- parent",
   "- ,",
   "- child",
   "- )",
   "- )",
   "- {",
   "  return",
   "  true",
   "  ;",
   "- return",
   "- true",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  return",
   "  inFinally",
   "  (",
   "  parent",
   "  .",
   "  getParent",
   "  (",
   "  )",
   "  ,",
   "  parent",
   "  )",
   "  ;",
   "- return",
   "- inFinally",
   "- (",
   "- parent",
   "- .",
   "- getParent",
   "- (",
   "- )",
   "- ,",
   "- parent",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  rivate",
   "  Node",
   "  computeFollowing",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  ode",
   "  next",
   "  =",
   "  ControlFlowAnalysis",
   "  .",
   "  computeFollowNode",
   "  (",
   "  n",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 125,
  "changes_set": [
   "  rivate",
   "  void",
   "  visitNew",
   "  (",
   "  NodeTraversal",
   "  t",
   "  ,",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  SType",
   "  type",
   "  =",
   "  getJSType",
   "  (",
   "  constructor",
   "  )",
   "  .",
   "  restrictByNotNullOrUndefined",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  type",
   "  .",
   "  isConstructor",
   "  (",
   "  )",
   "  ||",
   "  type",
   "  .",
   "  isEmptyType",
   "  (",
   "  )",
   "  ||",
   "  type",
   "  .",
   "  isUnknownType",
   "  (",
   "  )",
   "  )",
   "  {",
   "  unctionType",
   "  fnType",
   "  =",
   "  type",
   "  .",
   "  toMaybeFunctionType",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  fnType",
   "  !=",
   "  null",
   "- &&",
   "- fnType",
   "- .",
   "- hasInstanceType",
   "- (",
   "- )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  fnType",
   "  !=",
   "  null",
   "  &&",
   "  fnType",
   "  .",
   "  hasInstanceType",
   "  (",
   "  )",
   "  )",
   "  {",
   "  isitParameterList",
   "  (",
   "  t",
   "  ,",
   "  n",
   "  ,",
   "  fnType",
   "  )",
   "  ;",
   "  nsureTyped",
   "  (",
   "  t",
   "  ,",
   "  n",
   "  ,",
   "  fnType",
   "  .",
   "  getInstanceType",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  else",
   "  {"
  ]
 },
 {
  "number": 128,
  "changes_set": [
   "  rivate",
   "  void",
   "  unrollBinaryOperator",
   "  (",
   "  tatic",
   "  boolean",
   "  isSimpleNumber",
   "  (",
   "  String",
   "  s",
   "  )",
   "  {",
   "  nt",
   "  len",
   "  =",
   "  s",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  len",
   "  ==",
   "  0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- len",
   "- ==",
   "- 0",
   "- )",
   "- {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "- }",
   "  }",
   "  or",
   "  (",
   "  int",
   "  index",
   "  =",
   "  0",
   "  ;",
   "  index",
   "  <",
   "  len",
   "  ;",
   "  index",
   "  ++",
   "  )",
   "  {",
   "  har",
   "  c",
   "  =",
   "  s",
   "  .",
   "  charAt",
   "  (",
   "  index",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  c",
   "  <",
   "  '0'",
   "  ||",
   "  c",
   "  >",
   "  '9'",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;",
   "  return",
   "  len",
   "- ==",
   "- 1",
   "- ||",
   "+ >",
   "+ 0",
   "+ &&",
   "  s",
   "  .",
   "  charAt",
   "  (",
   "  0",
   "  )",
   "  !=",
   "  '0'",
   "  ;",
   "  return",
   "  len",
   "  ==",
   "  1",
   "  ||",
   "  s",
   "  .",
   "  charAt",
   "  (",
   "  0",
   "  )",
   "  !=",
   "  '0'",
   "  ;",
   "  tatic",
   "  double",
   "  getSimpleNumber",
   "  (",
   "  String",
   "  s",
   "  )",
   "  {"
  ]
 },
 {
  "number": 5,
  "changes_set": [
   "  ublic",
   "  static",
   "  Locale",
   "  toLocale",
   "  (",
   "  final",
   "  String",
   "  str",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Invalid locale format: \"",
   "  +",
   "  str",
   "  )",
   "  ;",
   "  inal",
   "  char",
   "  ch0",
   "  =",
   "  str",
   "  .",
   "  charAt",
   "  (",
   "  0",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  ch0",
   "  ==",
   "  '_'",
   "  )",
   "  {",
   "  if",
   "  (",
   "- ch0",
   "- ==",
   "- '_'",
   "- )",
   "- {",
   "- if",
   "- (",
   "  len",
   "  <",
   "  3",
   "  )",
   "  {",
   "- if",
   "- (",
   "- len",
   "- <",
   "- 3",
   "- )",
   "- {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Invalid locale format: \"",
   "  +",
   "  str",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"Invalid locale format: \"",
   "- +",
   "- str",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  final",
   "  char",
   "  ch1",
   "  =",
   "  str",
   "  .",
   "  charAt",
   "  (",
   "  1",
   "  )",
   "  ;",
   "  final",
   "  char",
   "- ch1",
   "- =",
   "- str",
   "- .",
   "- charAt",
   "- (",
   "- 1",
   "- )",
   "- ;",
   "- final",
   "- char",
   "  ch2",
   "  =",
   "  str",
   "  .",
   "  charAt",
   "  (",
   "  2",
   "  )",
   "  ;",
   "- final",
   "- char",
   "+ if",
   "+ (",
   "+ !",
   "+ Character",
   "+ .",
   "+ isUpperCase",
   "+ (",
   "+ ch1",
   "+ )",
   "+ ||",
   "+ !",
   "+ Character",
   "+ .",
   "+ isUpperCase",
   "+ (",
   "  ch2",
   "- =",
   "- str",
   "- .",
   "- charAt",
   "- (",
   "- 2",
   "  )",
   "- ;",
   "- if",
   "- (",
   "- !",
   "- Character",
   "- .",
   "- isUpperCase",
   "- (",
   "- ch1",
   "  )",
   "- ||",
   "- !",
   "- Character",
   "- .",
   "- isUpperCase",
   "- (",
   "- ch2",
   "- )",
   "- )",
   "  {",
   "- if",
   "- (",
   "- !",
   "- Character",
   "- .",
   "- isUpperCase",
   "- (",
   "- ch1",
   "- )",
   "- ||",
   "- !",
   "- Character",
   "- .",
   "- isUpperCase",
   "- (",
   "- ch2",
   "- )",
   "- )",
   "- {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Invalid locale format: \"",
   "  +",
   "  str",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"Invalid locale format: \"",
   "- +",
   "- str",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  if",
   "  (",
   "  len",
   "  ==",
   "  3",
   "  )",
   "  {",
   "- if",
   "- (",
   "- len",
   "- ==",
   "- 3",
   "- )",
   "- {",
   "  return",
   "  new",
   "  Locale",
   "  (",
   "  \"\"",
   "  ,",
   "  str",
   "  .",
   "  substring",
   "  (",
   "  1",
   "  ,",
   "  3",
   "  )",
   "  )",
   "  ;",
   "- return",
   "- new",
   "- Locale",
   "- (",
   "- \"\"",
   "- ,",
   "- str",
   "- .",
   "- substring",
   "- (",
   "- 1",
   "- ,",
   "- 3",
   "- )",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  if",
   "  (",
   "  len",
   "  <",
   "  5",
   "  )",
   "  {",
   "- if",
   "- (",
   "- len",
   "- <",
   "- 5",
   "- )",
   "- {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Invalid locale format: \"",
   "  +",
   "  str",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"Invalid locale format: \"",
   "- +",
   "- str",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  if",
   "  (",
   "  str",
   "  .",
   "  charAt",
   "  (",
   "  3",
   "  )",
   "  !=",
   "  '_'",
   "  )",
   "  {",
   "- if",
   "- (",
   "- str",
   "- .",
   "- charAt",
   "- (",
   "- 3",
   "- )",
   "- !=",
   "- '_'",
   "- )",
   "- {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Invalid locale format: \"",
   "  +",
   "  str",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"Invalid locale format: \"",
   "- +",
   "- str",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  return",
   "  new",
   "  Locale",
   "  (",
   "  \"\"",
   "  ,",
   "  str",
   "  .",
   "  substring",
   "  (",
   "  1",
   "  ,",
   "  3",
   "  )",
   "  ,",
   "  str",
   "  .",
   "  substring",
   "  (",
   "  4",
   "  )",
   "  )",
   "  ;",
   "- return",
   "- new",
   "- Locale",
   "- (",
   "- \"\"",
   "- ,",
   "- str",
   "- .",
   "- substring",
   "- (",
   "- 1",
   "- ,",
   "- 3",
   "- )",
   "- ,",
   "- str",
   "- .",
   "- substring",
   "- (",
   "- 4",
   "- )",
   "- )",
   "- ;",
   "  }",
   "  else",
   "  {",
   "- }",
   "- else",
   "- {",
   "  inal",
   "  char",
   "  ch1",
   "  =",
   "  str",
   "  .",
   "  charAt",
   "  (",
   "  1",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  !",
   "  Character",
   "  .",
   "  isLowerCase",
   "  (",
   "  ch0",
   "  )",
   "  ||",
   "  !",
   "  Character",
   "  .",
   "  isLowerCase",
   "  (",
   "  ch1",
   "  )",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Invalid locale format: \"",
   "  +",
   "  str",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 5,
  "changes_set": [
   "  ublic",
   "  static",
   "  Locale",
   "  toLocale",
   "  (",
   "  final",
   "  String",
   "  str",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Invalid locale format: \"",
   "  +",
   "  str",
   "  )",
   "  ;",
   "  eturn",
   "  new",
   "  Locale",
   "  (",
   "  str",
   "  .",
   "  substring",
   "  (",
   "  0",
   "  ,",
   "  2",
   "  )",
   "  ,",
   "  str",
   "  .",
   "  substring",
   "  (",
   "  3",
   "  ,",
   "  5",
   "  )",
   "  ,",
   "  str",
   "  .",
   "  substring",
   "  (",
   "  6",
   "  )",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  /",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -"
  ]
 },
 {
  "number": 130,
  "changes_set": [
   "  rivate",
   "  void",
   "  inlineAliases",
   "  (",
   "  GlobalNamespace",
   "  namespace",
   "  )",
   "  {",
   "  ontinue",
   "  ;",
   "  if",
   "  (",
   "- !",
   "- name",
   "- .",
   "- inExterns",
   "- &&",
   "  name",
   "  .",
   "  globalSets",
   "  ==",
   "  1",
   "  &&",
   "  name",
   "  .",
   "  localSets",
   "  ==",
   "  0",
   "  &&",
   "  if",
   "  (",
   "  !",
   "  name",
   "  .",
   "  inExterns",
   "  &&",
   "  name",
   "  .",
   "  globalSets",
   "  ==",
   "  1",
   "  &&",
   "  name",
   "  .",
   "  localSets",
   "  ==",
   "  0",
   "  &&",
   "  ame",
   "  .",
   "  aliasingGets",
   "  >",
   "  0",
   "  )",
   "  {",
   "  /",
   "  {"
  ]
 },
 {
  "number": 4,
  "changes_set": [
   "  /",
   "  ublic",
   "  class",
   "  LookupTranslator",
   "  extends",
   "  CharSequenceTranslator",
   "  {",
   "  private",
   "  final",
   "  HashMap",
   "  <",
   "- String",
   "+ CharSequence",
   "  ,",
   "  CharSequence",
   "  >",
   "  lookupMap",
   "  ;",
   "  private",
   "  final",
   "  HashMap",
   "  <",
   "  String",
   "  ,",
   "  CharSequence",
   "  >",
   "  lookupMap",
   "  ;",
   "  rivate",
   "  final",
   "  int",
   "  shortest",
   "  ;",
   "  rivate",
   "  final",
   "  int",
   "  longest",
   "  ;"
  ]
 },
 {
  "number": 4,
  "changes_set": [
   "  aram",
   "  lookup",
   "  CharSequence",
   "  [",
   "  ]",
   "  [",
   "  ]",
   "  table",
   "  of",
   "  size",
   "  [",
   "  *",
   "  ]",
   "  [",
   "  2",
   "  ]",
   "  /",
   "  ublic",
   "  LookupTranslator",
   "  (",
   "  final",
   "  CharSequence",
   "  [",
   "  ]",
   "  ...",
   "  lookup",
   "  )",
   "  {",
   "  lookupMap",
   "  =",
   "  new",
   "  HashMap",
   "  <",
   "- String",
   "+ CharSequence",
   "  ,",
   "  CharSequence",
   "  >",
   "  (",
   "  )",
   "  ;",
   "  lookupMap",
   "  =",
   "  new",
   "  HashMap",
   "  <",
   "  String",
   "  ,",
   "  CharSequence",
   "  >",
   "  (",
   "  )",
   "  ;",
   "  nt",
   "  _shortest",
   "  =",
   "  Integer",
   "  .",
   "  MAX_VALUE",
   "  ;",
   "  nt",
   "  _longest",
   "  =",
   "  0",
   "  ;",
   "  f",
   "  (",
   "  lookup",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  or",
   "  (",
   "  final",
   "  CharSequence",
   "  [",
   "  ]",
   "  seq",
   "  :",
   "  lookup",
   "  )",
   "  {",
   "  this",
   "  .",
   "  lookupMap",
   "  .",
   "  put",
   "  (",
   "  seq",
   "  [",
   "  0",
   "  ]",
   "- .",
   "- toString",
   "- (",
   "- )",
   "  ,",
   "  seq",
   "  [",
   "  1",
   "  ]",
   "  )",
   "  ;",
   "  this",
   "  .",
   "  lookupMap",
   "  .",
   "  put",
   "  (",
   "  seq",
   "  [",
   "  0",
   "  ]",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  ,",
   "  seq",
   "  [",
   "  1",
   "  ]",
   "  )",
   "  ;",
   "  inal",
   "  int",
   "  sz",
   "  =",
   "  seq",
   "  [",
   "  0",
   "  ]",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  sz",
   "  <",
   "  _shortest",
   "  )",
   "  {",
   "  shortest",
   "  =",
   "  sz",
   "  ;"
  ]
 },
 {
  "number": 4,
  "changes_set": [
   "  ublic",
   "  int",
   "  translate",
   "  (",
   "  final",
   "  CharSequence",
   "  input",
   "  ,",
   "  final",
   "  int",
   "  index",
   "  ,",
   "  final",
   "  Writer",
   "  out",
   "  /",
   "  descend",
   "  so",
   "  as",
   "  to",
   "  get",
   "  a",
   "  greedy",
   "  algorithmor",
   "  (",
   "  int",
   "  i",
   "  =",
   "  max",
   "  ;",
   "  i",
   "  >=",
   "  shortest",
   "  ;",
   "  i",
   "  --",
   "  )",
   "  {",
   "  inal",
   "  CharSequence",
   "  subSeq",
   "  =",
   "  input",
   "  .",
   "  subSequence",
   "  (",
   "  index",
   "  ,",
   "  index",
   "  +",
   "  i",
   "  )",
   "  ;",
   "  final",
   "  CharSequence",
   "  result",
   "  =",
   "  lookupMap",
   "  .",
   "  get",
   "  (",
   "  subSeq",
   "- .",
   "- toString",
   "- (",
   "- )",
   "  )",
   "  ;",
   "  final",
   "  CharSequence",
   "  result",
   "  =",
   "  lookupMap",
   "  .",
   "  get",
   "  (",
   "  subSeq",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  result",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  ut",
   "  .",
   "  write",
   "  (",
   "  result",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  eturn",
   "  i",
   "  ;"
  ]
 },
 {
  "number": 129,
  "changes_set": [
   "  rivate",
   "  void",
   "  annotateCalls",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  ode",
   "  first",
   "  =",
   "  n",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ;",
   "  /",
   "  ignore",
   "  cast",
   "  nodes",
   "  .",
   "  while",
   "  (",
   "  first",
   "  .",
   "  isCast",
   "  (",
   "  )",
   "  )",
   "  {",
   "- while",
   "- (",
   "- first",
   "- .",
   "- isCast",
   "- (",
   "- )",
   "- )",
   "- {",
   "  first",
   "  =",
   "  first",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  ;",
   "- first",
   "- =",
   "- first",
   "- .",
   "- getFirstChild",
   "- (",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  f",
   "  (",
   "  !",
   "  NodeUtil",
   "  .",
   "  isGet",
   "  (",
   "  first",
   "  )",
   "  )",
   "  {",
   "  .",
   "  putBooleanProp",
   "  (",
   "  Node",
   "  .",
   "  FREE_CALL",
   "  ,",
   "  true",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 132,
  "changes_set": [
   "  rivate",
   "  Node",
   "  tryMinimizeIf",
   "  (",
   "  Node",
   "  n",
   "  )",
   "  {",
   "  /",
   "  evaluates",
   "  LHS",
   "  before",
   "  cond",
   "  ]",
   "  /",
   "  NOTE",
   "  -",
   "  there",
   "  are",
   "  some",
   "  circumstances",
   "  where",
   "  we",
   "  can",
   "  /",
   "  proceed",
   "  even",
   "  if",
   "  there",
   "  are",
   "  side",
   "  effects",
   "  ...",
   "  !",
   "  mayEffectMutableState",
   "  (",
   "  lhs",
   "  )",
   "- &&",
   "+ )",
   "+ {",
   "  !",
   "  mayEffectMutableState",
   "  (",
   "  lhs",
   "  )",
   "  &&",
   "  (",
   "  !",
   "  mayHaveSideEffects",
   "  (",
   "  cond",
   "  )",
   "  ||",
   "- (",
   "- !",
   "- mayHaveSideEffects",
   "- (",
   "- cond",
   "- )",
   "- ||",
   "- (",
   "- thenOp",
   "- .",
   "- isAssign",
   "- (",
   "- )",
   "- &&",
   "- thenOp",
   "- .",
   "- getFirstChild",
   "- (",
   "- )",
   "- .",
   "- isName",
   "- (",
   "- )",
   "- )",
   "- )",
   "- )",
   "- {",
   "  (",
   "  thenOp",
   "  .",
   "  isAssign",
   "  (",
   "  )",
   "  &&",
   "  thenOp",
   "  .",
   "  getFirstChild",
   "  (",
   "  )",
   "  .",
   "  isName",
   "  (",
   "  )",
   "  )",
   "  )",
   "  )",
   "  {",
   "  .",
   "  removeChild",
   "  (",
   "  cond",
   "  )",
   "  ;",
   "  ode",
   "  assignName",
   "  =",
   "  thenOp",
   "  .",
   "  removeFirstChild",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 133,
  "changes_set": [
   "  rivate",
   "  void",
   "  skipEOLs",
   "  (",
   "  )",
   "  {",
   "  /",
   "  rivate",
   "  String",
   "  getRemainingJSDocLine",
   "  (",
   "  )",
   "  {",
   "  tring",
   "  result",
   "  =",
   "  stream",
   "  .",
   "  getRemainingJSDocLine",
   "  (",
   "  )",
   "  ;",
   "  unreadToken",
   "  =",
   "  NO_UNREAD_TOKEN",
   "  ;",
   "- unreadToken",
   "- =",
   "- NO_UNREAD_TOKEN",
   "- ;",
   "  eturn",
   "  result",
   "  ;"
  ]
 },
 {
  "number": 7,
  "changes_set": [
   "  ublic",
   "  static",
   "  Number",
   "  createNumber",
   "  (",
   "  String",
   "  str",
   "  )",
   "  throws",
   "  NumberFormatException",
   "  {",
   "  f",
   "  (",
   "  StringUtils",
   "  .",
   "  isBlank",
   "  (",
   "  str",
   "  )",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  NumberFormatException",
   "  (",
   "  \"A blank string is not a valid number\"",
   "  )",
   "  ;",
   "+ if",
   "+ (",
   "+ str",
   "+ .",
   "+ startsWith",
   "+ (",
   "+ \"--\"",
   "+ )",
   "+ )",
   "+ {",
   "+ return",
   "+ null",
   "+ ;",
   "+ }",
   "  f",
   "  (",
   "  str",
   "  .",
   "  startsWith",
   "  (",
   "  \"0x\"",
   "  )",
   "  ||",
   "  str",
   "  .",
   "  startsWith",
   "  (",
   "  \"-0x\"",
   "  )",
   "  ||",
   "  str",
   "  .",
   "  startsWith",
   "  (",
   "  \"0X\"",
   "  )",
   "  ||",
   "  str",
   "  .",
   "  startsWith",
   "  (",
   "  \"-0X\"",
   "  )",
   "  )",
   "  {",
   "  nt",
   "  hexDigits",
   "  =",
   "  str",
   "  .",
   "  length",
   "  (",
   "  )",
   "  -",
   "  2",
   "  ;"
  ]
 },
 {
  "number": 7,
  "changes_set": [
   "  ublic",
   "  static",
   "  BigDecimal",
   "  createBigDecimal",
   "  (",
   "  String",
   "  str",
   "  )",
   "  {",
   "  f",
   "  (",
   "  StringUtils",
   "  .",
   "  isBlank",
   "  (",
   "  str",
   "  )",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  NumberFormatException",
   "  (",
   "  \"A blank string is not a valid number\"",
   "  )",
   "  ;",
   "- if",
   "- (",
   "- str",
   "- .",
   "- trim",
   "- (",
   "- )",
   "- .",
   "- startsWith",
   "- (",
   "- \"--\"",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  str",
   "  .",
   "  trim",
   "  (",
   "  )",
   "  .",
   "  startsWith",
   "  (",
   "  \"--\"",
   "  )",
   "  )",
   "  {",
   "  /",
   "  this",
   "  is",
   "  protection",
   "  for",
   "  poorness",
   "  in",
   "  java",
   "  .",
   "  lang",
   "  .",
   "  BigDecimal",
   "  .",
   "  /",
   "  it",
   "  accepts",
   "  this",
   "  as",
   "  a",
   "  legal",
   "  value",
   "  ,",
   "  but",
   "  it",
   "  does",
   "  not",
   "  appear",
   "  /",
   "  to",
   "  be",
   "  in",
   "  specification",
   "  of",
   "  class",
   "  .",
   "  OS",
   "  X",
   "  Java",
   "  parses",
   "  it",
   "  to",
   "  /",
   "  a",
   "  wrong",
   "  value",
   "  .",
   "  throw",
   "  new",
   "  NumberFormatException",
   "  (",
   "  str",
   "  +",
   "  \" is not a valid number.\"",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- NumberFormatException",
   "- (",
   "- str",
   "- +",
   "- \" is not a valid number.\"",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  new",
   "  BigDecimal",
   "  (",
   "  str",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 131,
  "changes_set": [
   "  ublic",
   "  static",
   "  boolean",
   "  isJSIdentifier",
   "  (",
   "  String",
   "  s",
   "  )",
   "  {",
   "  nt",
   "  length",
   "  =",
   "  s",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  length",
   "  ==",
   "  0",
   "- ||",
   "- Character",
   "- .",
   "- isIdentifierIgnorable",
   "- (",
   "- s",
   "- .",
   "- charAt",
   "- (",
   "- 0",
   "- )",
   "- )",
   "  ||",
   "  Character",
   "  .",
   "  isIdentifierIgnorable",
   "  (",
   "  s",
   "  .",
   "  charAt",
   "  (",
   "  0",
   "  )",
   "  )",
   "  ||",
   "  Character",
   "  .",
   "  isJavaIdentifierStart",
   "  (",
   "  s",
   "  .",
   "  charAt",
   "  (",
   "  0",
   "  )",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  1",
   "  ;",
   "  i",
   "  <",
   "  length",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  if",
   "  (",
   "- Character",
   "- .",
   "- isIdentifierIgnorable",
   "- (",
   "- s",
   "- .",
   "- charAt",
   "- (",
   "- i",
   "- )",
   "- )",
   "- ||",
   "  if",
   "  (",
   "  Character",
   "  .",
   "  isIdentifierIgnorable",
   "  (",
   "  s",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  )",
   "  )",
   "  ||",
   "  Character",
   "  .",
   "  isJavaIdentifierPart",
   "  (",
   "  s",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  )",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;"
  ]
 },
 {
  "number": 8,
  "changes_set": [
   "  tatic",
   "  String",
   "  getTimeZoneDisplay",
   "  (",
   "  TimeZone",
   "  tz",
   "  ,",
   "  boolean",
   "  daylight",
   "  ,",
   "  int",
   "  style",
   "  ,",
   "  Localrivate",
   "  static",
   "  class",
   "  TimeZoneNameRule",
   "  implements",
   "  Rule",
   "  {",
   "  rivate",
   "  final",
   "  Locale",
   "  mLocale",
   "  ;",
   "  rivate",
   "  final",
   "  int",
   "  mStyle",
   "  ;",
   "+ private",
   "+ final",
   "+ TimeZone",
   "+ zone",
   "+ ;",
   "  rivate",
   "  final",
   "  String",
   "  mStandard",
   "  ;",
   "  rivate",
   "  final",
   "  String",
   "  mDaylight",
   "  ;"
  ]
 },
 {
  "number": 8,
  "changes_set": [
   "  tatic",
   "  String",
   "  getTimeZoneDisplay",
   "  (",
   "  TimeZone",
   "  tz",
   "  ,",
   "  boolean",
   "  daylight",
   "  ,",
   "  int",
   "  style",
   "  ,",
   "  LocalimeZoneNameRule",
   "  (",
   "  TimeZone",
   "  timeZone",
   "  ,",
   "  Locale",
   "  locale",
   "  ,",
   "  int",
   "  style",
   "  )",
   "  {",
   "  Locale",
   "  =",
   "  locale",
   "  ;",
   "  Style",
   "  =",
   "  style",
   "  ;",
   "+ zone",
   "+ =",
   "+ timeZone",
   "+ ;",
   "  Standard",
   "  =",
   "  getTimeZoneDisplay",
   "  (",
   "  timeZone",
   "  ,",
   "  false",
   "  ,",
   "  style",
   "  ,",
   "  locale",
   "  )",
   "  ;",
   "  Daylight",
   "  =",
   "  getTimeZoneDisplay",
   "  (",
   "  timeZone",
   "  ,",
   "  true",
   "  ,",
   "  style",
   "  ,",
   "  locale",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 8,
  "changes_set": [
   "  verrideublic",
   "  void",
   "  appendTo",
   "  (",
   "  StringBuffer",
   "  buffer",
   "  ,",
   "  Calendar",
   "  calendar",
   "  )",
   "  {",
   "- TimeZone",
   "- zone",
   "- =",
   "- calendar",
   "- .",
   "- getTimeZone",
   "- (",
   "- )",
   "- ;",
   "  TimeZone",
   "  zone",
   "  =",
   "  calendar",
   "  .",
   "  getTimeZone",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  zone",
   "  .",
   "  useDaylightTime",
   "  (",
   "  )",
   "  &",
   "  calendar",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  DST_OFFSET",
   "  )",
   "  !=",
   "  0",
   "  )",
   "  {",
   "  uffer",
   "  .",
   "  append",
   "  (",
   "  getTimeZoneDisplay",
   "  (",
   "  zone",
   "  ,",
   "  true",
   "  ,",
   "  mStyle",
   "  ,",
   "  mLocale",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 10,
  "changes_set": [
   "  eturn",
   "  The",
   "  <",
   "  code",
   "  >",
   "  StringBuilder",
   "  <",
   "  /",
   "  code",
   "  >",
   "  /",
   "  rivate",
   "  static",
   "  StringBuilder",
   "  escapeRegex",
   "  (",
   "  StringBuilder",
   "  regex",
   "  ,",
   "  String",
   "  value",
   "  ,",
   "  boolean",
   "  unquote",
   "  )",
   "  {",
   "+ boolean",
   "+ wasWhite",
   "+ =",
   "+ false",
   "+ ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  value",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  ++",
   "  i",
   "  )",
   "  {",
   "  har",
   "  c",
   "  =",
   "  value",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  )",
   "  ;",
   "+ if",
   "+ (",
   "+ Character",
   "+ .",
   "+ isWhitespace",
   "+ (",
   "+ c",
   "+ )",
   "+ )",
   "+ {",
   "+ if",
   "+ (",
   "+ !",
   "+ wasWhite",
   "+ )",
   "+ {",
   "+ wasWhite",
   "+ =",
   "+ true",
   "+ ;",
   "+ regex",
   "+ .",
   "+ append",
   "+ (",
   "+ \"\\\\s*+\"",
   "+ )",
   "+ ;",
   "+ }",
   "+ continue",
   "+ ;",
   "+ }",
   "+ wasWhite",
   "+ =",
   "+ false",
   "+ ;",
   "  witch",
   "  (",
   "  c",
   "  )",
   "  {",
   "  ase",
   "  '\\''",
   "  :",
   "  f",
   "  (",
   "  unquote",
   "  )",
   "  {"
  ]
 },
 {
  "number": 11,
  "changes_set": [
   "  ublic",
   "  static",
   "  String",
   "  random",
   "  (",
   "  int",
   "  count",
   "  ,",
   "  int",
   "  start",
   "  ,",
   "  int",
   "  end",
   "  ,",
   "  boolean",
   "  letters",
   "  ,",
   "  booltart",
   "  =",
   "  ' '",
   "  ;",
   "  }",
   "  else",
   "  {",
   "- }",
   "- else",
   "- {",
   "- if",
   "- (",
   "- end",
   "- <=",
   "- start",
   "- )",
   "- {",
   "  if",
   "  (",
   "  end",
   "  <=",
   "  start",
   "  )",
   "  {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Parameter end (\"",
   "  +",
   "  end",
   "  +",
   "  \") must be greater than start (\"",
   "  +",
   "  start",
   "  +",
   "  \")\"",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"Parameter end (\"",
   "- +",
   "- end",
   "- +",
   "- \") must be greater than start (\"",
   "- +",
   "- start",
   "- +",
   "- \")\"",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  har",
   "  [",
   "  ]",
   "  buffer",
   "  =",
   "  new",
   "  char",
   "  [",
   "  count",
   "  ]",
   "  ;"
  ]
 },
 {
  "number": 9,
  "changes_set": [
   "  rivate",
   "  void",
   "  init",
   "  (",
   "  )",
   "  {",
   "  urrentFormatField",
   "  =",
   "  nextFormatField",
   "  ;",
   "  urrentStrategy",
   "  =",
   "  nextStrategy",
   "  ;",
   "- if",
   "- (",
   "- patternMatcher",
   "- .",
   "- regionStart",
   "- (",
   "- )",
   "- !=",
   "- patternMatcher",
   "- .",
   "- regionEnd",
   "- (",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  patternMatcher",
   "  .",
   "  regionStart",
   "  (",
   "  )",
   "  !=",
   "  patternMatcher",
   "  .",
   "  regionEnd",
   "  (",
   "  )",
   "  )",
   "  {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Failed to parse \\\"\"",
   "  +",
   "  pattern",
   "  +",
   "  \"\\\" ; gave up at index \"",
   "  +",
   "  patternMatcher",
   "  .",
   "  regionStart",
   "  (",
   "  )",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"Failed to parse \\\"\"",
   "- +",
   "- pattern",
   "- +",
   "- \"\\\" ; gave up at index \"",
   "- +",
   "- patternMatcher",
   "- .",
   "- regionStart",
   "- (",
   "- )",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  f",
   "  (",
   "  currentStrategy",
   "  .",
   "  addRegex",
   "  (",
   "  this",
   "  ,",
   "  regex",
   "  )",
   "  )",
   "  {",
   "  ollector",
   "  .",
   "  add",
   "  (",
   "  currentStrategy",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 13,
  "changes_set": [
   "  ink",
   "  java",
   "  .",
   "  io",
   "  .",
   "  ObjectInputStream",
   "  }",
   "  that",
   "  uses",
   "  a",
   "  custom",
   "  <",
   "  code",
   "  >",
   "  ClassLoader",
   "  <",
   "  /",
   "  code",
   "  >",
   "  to",
   "  resolve",
   "  a",
   "  class",
   "  .",
   "  If",
   "  the",
   "  specified",
   "  <",
   "  code",
   "  >",
   "  ClassLoader",
   "  <",
   "  /",
   "  code",
   "  >",
   "  is",
   "  not",
   "  able",
   "  to",
   "  resolve",
   "  the",
   "  class",
   "  ,",
   "  the",
   "  context",
   "  classloader",
   "  of",
   "  the",
   "  current",
   "  thread",
   "  will",
   "  be",
   "  used",
   "  .",
   "  This",
   "  way",
   "  ,",
   "  the",
   "  standard",
   "  deserialization",
   "  work",
   "  also",
   "  in",
   "  web",
   "  -",
   "  applicationcontainers",
   "  and",
   "  application",
   "  servers",
   "  ,",
   "  no",
   "  matter",
   "  in",
   "  which",
   "  of",
   "  the",
   "  <",
   "  code",
   "  >",
   "  ClassLoader",
   "  <",
   "  /",
   "  code",
   "  >",
   "  the",
   "  particular",
   "  class",
   "  that",
   "  encapsulatesserialization",
   "  /",
   "  deserialization",
   "  lives",
   "  .",
   "  <",
   "  /",
   "  p",
   "  >",
   "  <",
   "  p",
   "  >",
   "  For",
   "  more",
   "  in",
   "  -",
   "  depth",
   "  information",
   "  about",
   "  the",
   "  problem",
   "  for",
   "  which",
   "  thisclass",
   "  here",
   "  is",
   "  a",
   "  workaround",
   "  ,",
   "  see",
   "  the",
   "  JIRA",
   "  issue",
   "  LANG",
   "  -",
   "  626.",
   "  <",
   "  /",
   "  p",
   "  >",
   "  /",
   "  tatic",
   "  class",
   "  ClassLoaderAwareObjectInputStream",
   "  extends",
   "  ObjectInputStream",
   "  {",
   "  private",
   "  static",
   "  final",
   "  Map",
   "  <",
   "  String",
   "  ,",
   "  Class",
   "  <",
   "  ?",
   "  >",
   "  >",
   "  primitiveTypes",
   "  =",
   "- private",
   "- static",
   "- final",
   "- Map",
   "- <",
   "- String",
   "- ,",
   "- Class",
   "- <",
   "- ?",
   "- >",
   "- >",
   "- primitiveTypes",
   "- =",
   "- new",
   "- HashMap",
   "- <",
   "- String",
   "- ,",
   "- Class",
   "- <",
   "- ?",
   "- >",
   "- >",
   "- (",
   "- )",
   "- ;",
   "  new",
   "  HashMap",
   "  <",
   "  String",
   "  ,",
   "  Class",
   "  <",
   "  ?",
   "  >",
   "  >",
   "  (",
   "  )",
   "  ;",
   "  rivate",
   "  ClassLoader",
   "  classLoader",
   "  ;",
   "  *",
   "  *",
   "  Constructor",
   "  ."
  ]
 },
 {
  "number": 13,
  "changes_set": [
   "  ee",
   "  java",
   "  .",
   "  io",
   "  .",
   "  ObjectInputStream",
   "  /",
   "  ublic",
   "  ClassLoaderAwareObjectInputStream",
   "  (",
   "  InputStream",
   "  in",
   "  ,",
   "  ClassLoader",
   "  classLoader",
   "  )",
   "  throws",
   "  IOException",
   "  {",
   "  uper",
   "  (",
   "  in",
   "  )",
   "  ;",
   "  his",
   "  .",
   "  classLoader",
   "  =",
   "  classLoader",
   "  ;",
   "  primitiveTypes",
   "  .",
   "  put",
   "  (",
   "  \"byte\"",
   "  ,",
   "  byte",
   "  .",
   "  class",
   "  )",
   "  ;",
   "  primitiveTypes",
   "  .",
   "  put",
   "  (",
   "- \"byte\"",
   "- ,",
   "- byte",
   "- .",
   "- class",
   "- )",
   "- ;",
   "- primitiveTypes",
   "- .",
   "- put",
   "- (",
   "  \"short\"",
   "  ,",
   "  short",
   "- .",
   "- class",
   "- )",
   "- ;",
   "- primitiveTypes",
   "- .",
   "- put",
   "- (",
   "- \"short\"",
   "- ,",
   "- short",
   "- .",
   "- class",
   "- )",
   "- ;",
   "- primitiveTypes",
   "- .",
   "- put",
   "- (",
   "- \"int\"",
   "- ,",
   "- int",
   "  .",
   "  class",
   "  )",
   "  ;",
   "  primitiveTypes",
   "  .",
   "  put",
   "  (",
   "  \"int\"",
   "  ,",
   "  int",
   "  .",
   "  class",
   "  )",
   "  ;",
   "  primitiveTypes",
   "  .",
   "  put",
   "  (",
   "  \"long\"",
   "  ,",
   "  long",
   "  .",
   "  class",
   "  )",
   "  ;",
   "  primitiveTypes",
   "  .",
   "  put",
   "  (",
   "- \"long\"",
   "- ,",
   "- long",
   "- .",
   "- class",
   "- )",
   "- ;",
   "- primitiveTypes",
   "- .",
   "- put",
   "- (",
   "  \"float\"",
   "  ,",
   "  float",
   "- .",
   "- class",
   "- )",
   "- ;",
   "- primitiveTypes",
   "- .",
   "- put",
   "- (",
   "- \"float\"",
   "- ,",
   "- float",
   "- .",
   "- class",
   "- )",
   "- ;",
   "- primitiveTypes",
   "- .",
   "- put",
   "- (",
   "- \"double\"",
   "- ,",
   "- double",
   "  .",
   "  class",
   "  )",
   "  ;",
   "  primitiveTypes",
   "  .",
   "  put",
   "  (",
   "  \"double\"",
   "  ,",
   "  double",
   "  .",
   "  class",
   "  )",
   "  ;",
   "  primitiveTypes",
   "  .",
   "  put",
   "  (",
   "  \"boolean\"",
   "  ,",
   "  boolean",
   "  .",
   "  class",
   "  )",
   "  ;",
   "  primitiveTypes",
   "  .",
   "  put",
   "  (",
   "- \"boolean\"",
   "- ,",
   "- boolean",
   "- .",
   "- class",
   "- )",
   "- ;",
   "- primitiveTypes",
   "- .",
   "- put",
   "- (",
   "  \"char\"",
   "  ,",
   "  char",
   "- .",
   "- class",
   "- )",
   "- ;",
   "- primitiveTypes",
   "- .",
   "- put",
   "- (",
   "- \"char\"",
   "- ,",
   "- char",
   "- .",
   "- class",
   "- )",
   "- ;",
   "- primitiveTypes",
   "- .",
   "- put",
   "- (",
   "- \"void\"",
   "- ,",
   "- void",
   "  .",
   "  class",
   "  )",
   "  ;",
   "  primitiveTypes",
   "  .",
   "  put",
   "  (",
   "  \"void\"",
   "  ,",
   "  void",
   "  .",
   "  class",
   "  )",
   "  ;",
   "  *",
   "  *",
   "  Overriden",
   "  version",
   "  that",
   "  uses",
   "  the",
   "  parametrized",
   "  <",
   "  code",
   "  >",
   "  ClassLoader",
   "  <",
   "  /",
   "  code",
   "  >",
   "  or",
   "  the",
   "  <",
   "  code",
   "  >",
   "  ClassLoader",
   "  <",
   "  /",
   "  code",
   "  >",
   "  of",
   "  the",
   "  current",
   "  <",
   "  code",
   "  >",
   "  Thread",
   "  <",
   "  /",
   "  code",
   "  >",
   "  to",
   "  resolve",
   "  the",
   "  class",
   "  ."
  ]
 },
 {
  "number": 13,
  "changes_set": [
   "  verriderotected",
   "  Class",
   "  <",
   "  ?",
   "  >",
   "  resolveClass",
   "  (",
   "  ObjectStreamClass",
   "  desc",
   "  )",
   "  throws",
   "  IOException",
   "  ,",
   "  ClassNotFoundException",
   "  {",
   "  tring",
   "  name",
   "  =",
   "  desc",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  ;",
   "  ry",
   "  {",
   "  eturn",
   "  Class",
   "  .",
   "  forName",
   "  (",
   "  name",
   "  ,",
   "  false",
   "  ,",
   "  classLoader",
   "  )",
   "  ;",
   "  catch",
   "  (",
   "  ClassNotFoundException",
   "  ex",
   "  )",
   "  {",
   "  try",
   "  {",
   "- try",
   "- {",
   "  eturn",
   "  Class",
   "  .",
   "  forName",
   "  (",
   "  name",
   "  ,",
   "  false",
   "  ,",
   "  Thread",
   "  .",
   "  currentThread",
   "  (",
   "  )",
   "  .",
   "  getContextClassLoader",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  }",
   "  catch",
   "  (",
   "  ClassNotFoundException",
   "  cnfe",
   "  )",
   "  {",
   "- }",
   "- catch",
   "- (",
   "- ClassNotFoundException",
   "- cnfe",
   "- )",
   "- {",
   "- Class",
   "- <",
   "- ?",
   "- >",
   "- cls",
   "- =",
   "- primitiveTypes",
   "- .",
   "- get",
   "- (",
   "- name",
   "- )",
   "- ;",
   "  Class",
   "  <",
   "  ?",
   "  >",
   "  cls",
   "  =",
   "  primitiveTypes",
   "  .",
   "  get",
   "  (",
   "  name",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  cls",
   "  !=",
   "  null",
   "  )",
   "- if",
   "- (",
   "- cls",
   "- !=",
   "- null",
   "- )",
   "  return",
   "  cls",
   "  ;",
   "- return",
   "- cls",
   "- ;",
   "- elseelsethrow",
   "+ elsethrow",
   "- cnfe",
   "- ;",
   "- throw",
   "  cnfe",
   "  ;",
   "  }",
   "- }"
  ]
 },
 {
  "number": 12,
  "changes_set": [
   "  ublic",
   "  static",
   "  String",
   "  random",
   "  (",
   "  int",
   "  count",
   "  ,",
   "  int",
   "  start",
   "  ,",
   "  int",
   "  end",
   "  ,",
   "  boolean",
   "  letters",
   "  ,",
   "  boolelse",
   "  if",
   "  (",
   "  count",
   "  <",
   "  0",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Requested random string length \"",
   "  +",
   "  count",
   "  +",
   "  \" is less than 0.\"",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  chars",
   "  !=",
   "  null",
   "  &&",
   "  chars",
   "  .",
   "  length",
   "  ==",
   "  0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- chars",
   "- !=",
   "- null",
   "- &&",
   "- chars",
   "- .",
   "- length",
   "- ==",
   "- 0",
   "- )",
   "- {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"The chars array must not be empty\"",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"The chars array must not be empty\"",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  f",
   "  (",
   "  start",
   "  ==",
   "  0",
   "  &&",
   "  end",
   "  ==",
   "  0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  chars",
   "  !=",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- chars",
   "- !=",
   "- null",
   "- )",
   "- {",
   "  end",
   "  =",
   "  chars",
   "  .",
   "  length",
   "  ;",
   "- end",
   "- =",
   "- chars",
   "- .",
   "- length",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  f",
   "  (",
   "  !",
   "  letters",
   "  &&",
   "  !",
   "  numbers",
   "  )",
   "  {",
   "  nd",
   "  =",
   "  Integer",
   "  .",
   "  MAX_VALUE",
   "  ;",
   "  else",
   "  {",
   "  nd",
   "  =",
   "  'z'",
   "  +",
   "  1",
   "  ;",
   "  tart",
   "  =",
   "  ' '",
   "  ;",
   "  }",
   "- }",
   "  har",
   "  [",
   "  ]",
   "  buffer",
   "  =",
   "  new",
   "  char",
   "  [",
   "  count",
   "  ]",
   "  ;"
  ]
 },
 {
  "number": 17,
  "changes_set": [
   "  ublic",
   "  final",
   "  void",
   "  translate",
   "  (",
   "  CharSequence",
   "  input",
   "  ,",
   "  Writer",
   "  out",
   "  )",
   "  throws",
   "  IOException",
   "  {",
   "  eturn",
   "  ;",
   "  nt",
   "  pos",
   "  =",
   "  0",
   "  ;",
   "  int",
   "  len",
   "  =",
   "+ Character",
   "+ .",
   "+ codePointCount",
   "+ (",
   "+ input",
   "+ ,",
   "+ 0",
   "+ ,",
   "  input",
   "  .",
   "  length",
   "  (",
   "+ )",
   "  )",
   "  ;",
   "  int",
   "  len",
   "  =",
   "  input",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  hile",
   "  (",
   "  pos",
   "  <",
   "  len",
   "  )",
   "  {",
   "  nt",
   "  consumed",
   "  =",
   "  translate",
   "  (",
   "  input",
   "  ,",
   "  pos",
   "  ,",
   "  out",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  consumed",
   "  ==",
   "  0",
   "  )",
   "  {",
   "  har",
   "  [",
   "  ]",
   "  c",
   "  =",
   "  Character",
   "  .",
   "  toChars",
   "  (",
   "  Character",
   "  .",
   "  codePointAt",
   "  (",
   "  input",
   "  ,",
   "  pos",
   "  )",
   "  )",
   "  ;",
   "  ut",
   "  .",
   "  write",
   "  (",
   "  c",
   "  )",
   "  ;",
   "  pos",
   "  +=",
   "  c",
   "  .",
   "  length",
   "  ;",
   "- pos",
   "- +=",
   "- c",
   "- .",
   "- length",
   "- ;",
   "  continue",
   "  ;",
   "- continue",
   "- ;",
   "+ else",
   "+ {",
   "  /"
  ]
 },
 {
  "number": 14,
  "changes_set": [
   "  ublic",
   "  static",
   "  boolean",
   "  equals",
   "  (",
   "  CharSequence",
   "  cs1",
   "  ,",
   "  CharSequence",
   "  cs2",
   "  )",
   "  {",
   "  f",
   "  (",
   "  cs1",
   "  ==",
   "  null",
   "  ||",
   "  cs2",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;",
   "  if",
   "  (",
   "  cs1",
   "  instanceof",
   "  String",
   "  &&",
   "  cs2",
   "  instanceof",
   "  String",
   "  )",
   "  {",
   "- if",
   "- (",
   "- cs1",
   "- instanceof",
   "- String",
   "- &&",
   "- cs2",
   "- instanceof",
   "- String",
   "- )",
   "- {",
   "  eturn",
   "  cs1",
   "  .",
   "  equals",
   "  (",
   "  cs2",
   "  )",
   "  ;",
   "  }",
   "- }",
   "- return",
   "- CharSequenceUtils",
   "- .",
   "- regionMatches",
   "- (",
   "- cs1",
   "- ,",
   "- false",
   "- ,",
   "- 0",
   "- ,",
   "- cs2",
   "- ,",
   "- 0",
   "- ,",
   "- Math",
   "- .",
   "- max",
   "- (",
   "- cs1",
   "- .",
   "- length",
   "- (",
   "- )",
   "- ,",
   "- cs2",
   "- .",
   "- length",
   "- (",
   "- )",
   "- )",
   "- )",
   "- ;",
   "  return",
   "  CharSequenceUtils",
   "  .",
   "  regionMatches",
   "  (",
   "  cs1",
   "  ,",
   "  false",
   "  ,",
   "  0",
   "  ,",
   "  cs2",
   "  ,",
   "  0",
   "  ,",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  cs1",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ,",
   "  cs2",
   "  .",
   "  length",
   "  (",
   "  )",
   "  )",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 16,
  "changes_set": [
   "  ublic",
   "  static",
   "  Number",
   "  createNumber",
   "  (",
   "  String",
   "  str",
   "  )",
   "  throws",
   "  NumberFormatException",
   "  {",
   "  /",
   "  a",
   "  wrong",
   "  value",
   "  .",
   "  eturn",
   "  null",
   "  ;",
   "  if",
   "  (",
   "  str",
   "  .",
   "  startsWith",
   "  (",
   "  \"0x\"",
   "  )",
   "  ||",
   "  str",
   "  .",
   "  startsWith",
   "  (",
   "  \"-0x\"",
   "- )",
   "- ||",
   "- str",
   "- .",
   "- startsWith",
   "- (",
   "- \"0X\"",
   "- )",
   "- ||",
   "- str",
   "- .",
   "- startsWith",
   "- (",
   "- \"-0X\"",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  str",
   "  .",
   "  startsWith",
   "  (",
   "  \"0x\"",
   "  )",
   "  ||",
   "  str",
   "  .",
   "  startsWith",
   "  (",
   "  \"-0x\"",
   "  )",
   "  ||",
   "  str",
   "  .",
   "  startsWith",
   "  (",
   "  \"0X\"",
   "  )",
   "  ||",
   "  str",
   "  .",
   "  startsWith",
   "  (",
   "  \"-0X\"",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  createInteger",
   "  (",
   "  str",
   "  )",
   "  ;",
   "  har",
   "  lastChar",
   "  =",
   "  str",
   "  .",
   "  charAt",
   "  (",
   "  str",
   "  .",
   "  length",
   "  (",
   "  )",
   "  -",
   "  1",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 15,
  "changes_set": [
   "  rivate",
   "  static",
   "  boolean",
   "  isAssignable",
   "  (",
   "  Type",
   "  type",
   "  ,",
   "  ParameterizedType",
   "  toParameterizedoClass",
   "  ,",
   "  typeVarAssigns",
   "  )",
   "  ;",
   "  /",
   "  now",
   "  to",
   "  check",
   "  each",
   "  type",
   "  argumentfor",
   "  (",
   "+ Map",
   "+ .",
   "+ Entry",
   "+ <",
   "  TypeVariable",
   "  <",
   "  ?",
   "  >",
   "- var",
   "+ ,",
   "+ Type",
   "+ >",
   "+ entry",
   "  :",
   "  toTypeVarAssigns",
   "  .",
   "- keySet",
   "+ entrySet",
   "  (",
   "  )",
   "  )",
   "  {",
   "+ Type",
   "+ toTypeArg",
   "+ =",
   "+ entry",
   "+ .",
   "+ getValue",
   "+ (",
   "+ )",
   "+ ;",
   "+ Type",
   "+ fromTypeArg",
   "+ =",
   "+ fromTypeVarAssigns",
   "+ .",
   "+ get",
   "+ (",
   "+ entry",
   "+ .",
   "+ getKey",
   "+ (",
   "+ )",
   "+ )",
   "+ ;",
   "  for",
   "  (",
   "  TypeVariable",
   "  <",
   "  ?",
   "  >",
   "  var",
   "  :",
   "  toTypeVarAssigns",
   "  .",
   "  keySet",
   "  (",
   "  )",
   "  )",
   "  {",
   "  Type",
   "  toTypeArg",
   "  =",
   "  unrollVariableAssignments",
   "  (",
   "  var",
   "  ,",
   "  toTypeVarAssigns",
   "- )",
   "- ;",
   "- Type",
   "- toTypeArg",
   "- =",
   "- unrollVariableAssignments",
   "- (",
   "- var",
   "- ,",
   "- toTypeVarAssigns",
   "- )",
   "- ;",
   "- Type",
   "- fromTypeArg",
   "- =",
   "- unrollVariableAssignments",
   "- (",
   "- var",
   "- ,",
   "- fromTypeVarAssigns",
   "  )",
   "  ;",
   "  Type",
   "  fromTypeArg",
   "  =",
   "  unrollVariableAssignments",
   "  (",
   "  var",
   "  ,",
   "  fromTypeVarAssigns",
   "  )",
   "  ;",
   "  /",
   "  parameters",
   "  must",
   "  either",
   "  be",
   "  absent",
   "  from",
   "  the",
   "  subject",
   "  type",
   "  ,",
   "  within",
   "  /",
   "  the",
   "  bounds",
   "  of",
   "  the",
   "  wildcard",
   "  type",
   "  ,",
   "  or",
   "  be",
   "  an",
   "  exact",
   "  match",
   "  to",
   "  the"
  ]
 },
 {
  "number": 15,
  "changes_set": [
   "  rivate",
   "  static",
   "  Type",
   "  substituteTypeVariables",
   "  (",
   "  Type",
   "  type",
   "  ,",
   "  Map",
   "  <",
   "  TypeVariable",
   "  <",
   "  ?",
   "  >",
   "  ,",
   "  Typenew",
   "  HashMap",
   "  <",
   "  TypeVariable",
   "  <",
   "  ?",
   "  >",
   "  ,",
   "  Type",
   "  >",
   "  (",
   "  subtypeVarAssigns",
   "  )",
   "  ;",
   "  /",
   "  has",
   "  target",
   "  class",
   "  been",
   "  reached",
   "  ?",
   "  if",
   "  (",
   "+ cls",
   "+ .",
   "+ getTypeParameters",
   "+ (",
   "+ )",
   "+ .",
   "+ length",
   "+ >",
   "+ 0",
   "+ ||",
   "  toClass",
   "  .",
   "  equals",
   "  (",
   "  cls",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  toClass",
   "  .",
   "  equals",
   "  (",
   "  cls",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  typeVarAssigns",
   "  ;"
  ]
 },
 {
  "number": 21,
  "changes_set": [
   "  ublic",
   "  static",
   "  boolean",
   "  isSameLocalTime",
   "  (",
   "  Calendar",
   "  cal1",
   "  ,",
   "  Calendar",
   "  cal2",
   "  )",
   "  {",
   "  eturn",
   "  (",
   "  cal1",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  MILLISECOND",
   "  )",
   "  ==",
   "  cal2",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  MILLISECOND",
   "  )",
   "  &&",
   "  al1",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  SECOND",
   "  )",
   "  ==",
   "  cal2",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  SECOND",
   "  )",
   "  &&",
   "  al1",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  MINUTE",
   "  )",
   "  ==",
   "  cal2",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  MINUTE",
   "  )",
   "  &&",
   "  cal1",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "- HOUR_OF_DAY",
   "+ HOUR",
   "  )",
   "  ==",
   "  cal2",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "- HOUR_OF_DAY",
   "+ HOUR",
   "  )",
   "  &&",
   "  cal1",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  HOUR_OF_DAY",
   "  )",
   "  ==",
   "  cal2",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  HOUR_OF_DAY",
   "  )",
   "  &&",
   "  al1",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  DAY_OF_YEAR",
   "  )",
   "  ==",
   "  cal2",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  DAY_OF_YEAR",
   "  )",
   "  &&",
   "  al1",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  YEAR",
   "  )",
   "  ==",
   "  cal2",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  YEAR",
   "  )",
   "  &&",
   "  al1",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  ERA",
   "  )",
   "  ==",
   "  cal2",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  ERA",
   "  )",
   "  &&"
  ]
 },
 {
  "number": 19,
  "changes_set": [
   "  ublic",
   "  int",
   "  translate",
   "  (",
   "  CharSequence",
   "  input",
   "  ,",
   "  int",
   "  index",
   "  ,",
   "  Writer",
   "  out",
   "  )",
   "  throws",
   "  IOException",
   "  {",
   "  nt",
   "  seqEnd",
   "  =",
   "  input",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  /",
   "  Uses",
   "  -",
   "  2",
   "  to",
   "  ensure",
   "  there",
   "  is",
   "  something",
   "  after",
   "  the",
   "  &",
   "  if",
   "  (",
   "  input",
   "  .",
   "  charAt",
   "  (",
   "  index",
   "  )",
   "  ==",
   "  '&'",
   "  &&",
   "  index",
   "  <",
   "  seqEnd",
   "  -",
   "- 2",
   "+ 1",
   "  &&",
   "  input",
   "  .",
   "  charAt",
   "  (",
   "  index",
   "  +",
   "  1",
   "  )",
   "  ==",
   "  '#'",
   "  )",
   "  {",
   "  if",
   "  (",
   "  input",
   "  .",
   "  charAt",
   "  (",
   "  index",
   "  )",
   "  ==",
   "  '&'",
   "  &&",
   "  index",
   "  <",
   "  seqEnd",
   "  -",
   "  2",
   "  &&",
   "  input",
   "  .",
   "  charAt",
   "  (",
   "  index",
   "  +",
   "  1",
   "  )",
   "  ==",
   "  '#'",
   "  )",
   "  {",
   "  nt",
   "  start",
   "  =",
   "  index",
   "  +",
   "  2",
   "  ;",
   "  oolean",
   "  isHex",
   "  =",
   "  false",
   "  ;"
  ]
 },
 {
  "number": 19,
  "changes_set": [
   "  ublic",
   "  int",
   "  translate",
   "  (",
   "  CharSequence",
   "  input",
   "  ,",
   "  int",
   "  index",
   "  ,",
   "  Writer",
   "  out",
   "  )",
   "  throws",
   "  IOExceptisHex",
   "  =",
   "  true",
   "  ;",
   "  /",
   "  Check",
   "  there",
   "  more",
   "  than",
   "  just",
   "  an",
   "  x",
   "  after",
   "  the",
   "  &",
   "  if",
   "  (",
   "  start",
   "  ==",
   "  seqEnd",
   "  )",
   "  {",
   "- if",
   "- (",
   "- start",
   "- ==",
   "- seqEnd",
   "- )",
   "- {",
   "  return",
   "  0",
   "  ;",
   "- return",
   "- 0",
   "- ;",
   "- }",
   "  }",
   "  nt",
   "  end",
   "  =",
   "  start",
   "  ;",
   "  /",
   "  Note",
   "  that",
   "  this",
   "  supports",
   "  character",
   "  codes",
   "  without",
   "  a",
   "  ;",
   "  on",
   "  the",
   "  endwhile",
   "  (",
   "- end",
   "- <",
   "- seqEnd",
   "- &&",
   "- (",
   "- (",
   "  input",
   "  .",
   "  charAt",
   "  (",
   "  end",
   "  )",
   "+ !=",
   "+ ';'",
   "- >=",
   "- '0'",
   "- &&",
   "- input",
   "- .",
   "- charAt",
   "- (",
   "- end",
   "  )",
   "- <=",
   "- '9'",
   "- )",
   "- ||",
   "  while",
   "  (",
   "  end",
   "  <",
   "  seqEnd",
   "  &&",
   "  (",
   "  (",
   "  input",
   "  .",
   "  charAt",
   "  (",
   "  end",
   "  )",
   "  >=",
   "  '0'",
   "  &&",
   "  input",
   "  .",
   "  charAt",
   "  (",
   "  end",
   "  )",
   "  <=",
   "  '9'",
   "  )",
   "  ||",
   "  (",
   "  input",
   "  .",
   "  charAt",
   "  (",
   "  end",
   "  )",
   "  >=",
   "  'a'",
   "  &&",
   "  input",
   "  .",
   "  charAt",
   "  (",
   "  end",
   "  )",
   "  <=",
   "  'f'",
   "  )",
   "  ||",
   "  (",
   "  input",
   "  .",
   "  charAt",
   "  (",
   "  end",
   "  )",
   "  >=",
   "- 'a'",
   "- &&",
   "- input",
   "- .",
   "- charAt",
   "- (",
   "- end",
   "- )",
   "- <=",
   "- 'f'",
   "- )",
   "- ||",
   "- (",
   "- input",
   "- .",
   "- charAt",
   "- (",
   "- end",
   "- )",
   "- >=",
   "- 'A'",
   "- &&",
   "- input",
   "- .",
   "- charAt",
   "- (",
   "- end",
   "- )",
   "- <=",
   "- 'F'",
   "- )",
   "- )",
   "- )",
   "- (",
   "- input",
   "- .",
   "- charAt",
   "- (",
   "- end",
   "- )",
   "- >=",
   "  'A'",
   "  &&",
   "  input",
   "  .",
   "  charAt",
   "  (",
   "  end",
   "  )",
   "  <=",
   "  'F'",
   "  )",
   "  )",
   "  )",
   "  nd",
   "  ++",
   "  ;"
  ]
 },
 {
  "number": 19,
  "changes_set": [
   "  ublic",
   "  int",
   "  translate",
   "  (",
   "  CharSequence",
   "  input",
   "  ,",
   "  int",
   "  index",
   "  ,",
   "  Writer",
   "  out",
   "  )",
   "  throws",
   "  IOExceptiut",
   "  .",
   "  write",
   "  (",
   "  entityValue",
   "  )",
   "  ;",
   "  boolean",
   "  semiNext",
   "  =",
   "  (",
   "  end",
   "  !=",
   "  seqEnd",
   "  )",
   "  &&",
   "  (",
   "  input",
   "  .",
   "  charAt",
   "  (",
   "  end",
   "  )",
   "  ==",
   "  ';'",
   "  )",
   "  ;",
   "- boolean",
   "- semiNext",
   "- =",
   "- (",
   "- end",
   "- !=",
   "- seqEnd",
   "- )",
   "- &&",
   "- (",
   "- input",
   "- .",
   "- charAt",
   "- (",
   "- end",
   "- )",
   "- ==",
   "- ';'",
   "- )",
   "- ;",
   "  return",
   "  2",
   "  +",
   "  (",
   "  end",
   "  -",
   "  start",
   "  )",
   "  +",
   "  (",
   "  isHex",
   "  ?",
   "  1",
   "  :",
   "  0",
   "  )",
   "  +",
   "- (",
   "- semiNext",
   "- ?",
   "  1",
   "- :",
   "- 0",
   "- )",
   "  ;",
   "  return",
   "  2",
   "  +",
   "  (",
   "  end",
   "  -",
   "  start",
   "  )",
   "  +",
   "  (",
   "  isHex",
   "  ?",
   "  1",
   "  :",
   "  0",
   "  )",
   "  +",
   "  (",
   "  semiNext",
   "  ?",
   "  1",
   "  :",
   "  0",
   "  )",
   "  ;",
   "  eturn",
   "  0",
   "  ;"
  ]
 },
 {
  "number": 23,
  "changes_set": [
   "  /",
   "  ublic",
   "  class",
   "  ExtendedMessageFormat",
   "  extends",
   "  MessageFormat",
   "  {",
   "  rivate",
   "  static",
   "  final",
   "  long",
   "  serialVersionUID",
   "  =",
   "  -",
   "  2362048321261811743L",
   "- ;",
   "- private",
   "- static",
   "- final",
   "- int",
   "- HASH_SEED",
   "- =",
   "- 31",
   "  ;",
   "  private",
   "  static",
   "  final",
   "  int",
   "  HASH_SEED",
   "  =",
   "  31",
   "  ;",
   "  rivate",
   "  static",
   "  final",
   "  String",
   "  DUMMY_PATTERN",
   "  =",
   "  \"\"",
   "  ;",
   "  rivate",
   "  static",
   "  final",
   "  String",
   "  ESCAPED_QUOTE",
   "  =",
   "  \"''\"",
   "  ;"
  ]
 },
 {
  "number": 23,
  "changes_set": [
   "  verridepublic",
   "- boolean",
   "- equals",
   "- (",
   "- Object",
   "- obj",
   "- )",
   "- {",
   "- public",
   "  boolean",
   "  equals",
   "  (",
   "  Object",
   "  obj",
   "  )",
   "  {",
   "  if",
   "  (",
   "  obj",
   "  ==",
   "  this",
   "  )",
   "  {",
   "- if",
   "- (",
   "- obj",
   "- ==",
   "- this",
   "- )",
   "- {",
   "- return",
   "- true",
   "- ;",
   "  return",
   "  true",
   "  ;",
   "  }",
   "- }",
   "- if",
   "- (",
   "- obj",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  if",
   "  (",
   "  obj",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "  }",
   "- }",
   "- if",
   "- (",
   "- !",
   "- super",
   "- .",
   "- equals",
   "- (",
   "- obj",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  !",
   "  super",
   "  .",
   "  equals",
   "  (",
   "  obj",
   "  )",
   "  )",
   "  {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "  }",
   "- }",
   "- if",
   "- (",
   "- ObjectUtils",
   "- .",
   "- notEqual",
   "- (",
   "- getClass",
   "- (",
   "- )",
   "- ,",
   "- obj",
   "- .",
   "- getClass",
   "- (",
   "- )",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  ObjectUtils",
   "  .",
   "  notEqual",
   "  (",
   "  getClass",
   "  (",
   "  )",
   "  ,",
   "  obj",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  )",
   "  )",
   "  {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "  }",
   "- }",
   "- ExtendedMessageFormat",
   "- rhs",
   "- =",
   "- (",
   "- ExtendedMessageFormat",
   "- )",
   "- obj",
   "- ;",
   "  ExtendedMessageFormat",
   "  rhs",
   "  =",
   "  (",
   "  ExtendedMessageFormat",
   "  )",
   "  obj",
   "  ;",
   "  if",
   "  (",
   "  ObjectUtils",
   "  .",
   "  notEqual",
   "  (",
   "  toPattern",
   "  ,",
   "  rhs",
   "  .",
   "  toPattern",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- ObjectUtils",
   "- .",
   "- notEqual",
   "- (",
   "- toPattern",
   "- ,",
   "- rhs",
   "- .",
   "- toPattern",
   "- )",
   "- )",
   "- {",
   "- return",
   "- false",
   "- ;",
   "  return",
   "  false",
   "  ;",
   "  }",
   "- }",
   "- if",
   "- (",
   "- ObjectUtils",
   "- .",
   "- notEqual",
   "- (",
   "- registry",
   "- ,",
   "- rhs",
   "- .",
   "- registry",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  ObjectUtils",
   "  .",
   "  notEqual",
   "  (",
   "  registry",
   "  ,",
   "  rhs",
   "  .",
   "  registry",
   "  )",
   "  )",
   "  {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "- }",
   "  }",
   "  return",
   "  true",
   "  ;",
   "- return",
   "- true",
   "- ;",
   "- }",
   "  }",
   "  *",
   "  *",
   "  Return",
   "  the",
   "  hashcode",
   "  ."
  ]
 },
 {
  "number": 23,
  "changes_set": [
   "  verridepublic",
   "  int",
   "  hashCode",
   "  (",
   "  )",
   "  {",
   "- public",
   "- int",
   "- hashCode",
   "- (",
   "- )",
   "- {",
   "- int",
   "- result",
   "- =",
   "- super",
   "- .",
   "- hashCode",
   "- (",
   "- )",
   "- ;",
   "  int",
   "  result",
   "  =",
   "  super",
   "  .",
   "  hashCode",
   "  (",
   "  )",
   "  ;",
   "  result",
   "  =",
   "  HASH_SEED",
   "  *",
   "  result",
   "  +",
   "  ObjectUtils",
   "  .",
   "  hashCode",
   "  (",
   "  registry",
   "  )",
   "  ;",
   "  result",
   "  =",
   "  HASH_SEED",
   "  *",
   "  result",
   "  +",
   "  ObjectUtils",
   "  .",
   "  hashCode",
   "  (",
   "- registry",
   "- )",
   "- ;",
   "- result",
   "- =",
   "- HASH_SEED",
   "- *",
   "- result",
   "- +",
   "- ObjectUtils",
   "- .",
   "- hashCode",
   "- (",
   "- toPattern",
   "- )",
   "- ;",
   "- result",
   "- =",
   "- HASH_SEED",
   "- *",
   "- result",
   "- +",
   "- ObjectUtils",
   "- .",
   "- hashCode",
   "- (",
   "  toPattern",
   "  )",
   "  ;",
   "  return",
   "  result",
   "  ;",
   "- return",
   "- result",
   "- ;",
   "- }",
   "  }",
   "  *",
   "  *",
   "  Get",
   "  a",
   "  custom",
   "  format",
   "  from",
   "  a",
   "  format",
   "  description",
   "  ."
  ]
 },
 {
  "number": 22,
  "changes_set": [
   "  ublic",
   "  Fraction",
   "  pow",
   "  (",
   "  int",
   "  power",
   "  )",
   "  {",
   "  /",
   "  rivate",
   "  static",
   "  int",
   "  greatestCommonDivisor",
   "  (",
   "  int",
   "  u",
   "  ,",
   "  int",
   "  v",
   "  )",
   "  {",
   "  /",
   "  From",
   "  Commons",
   "  Math",
   "  :",
   "  if",
   "  (",
   "  (",
   "  u",
   "  ==",
   "  0",
   "  )",
   "  ||",
   "  (",
   "  v",
   "  ==",
   "  0",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  (",
   "  u",
   "  ==",
   "- 0",
   "- )",
   "- ||",
   "- (",
   "- v",
   "- ==",
   "- 0",
   "- )",
   "- )",
   "- {",
   "- if",
   "- (",
   "- (",
   "- u",
   "- ==",
   "- Integer",
   "- .",
   "- MIN_VALUE",
   "- )",
   "- ||",
   "- (",
   "- v",
   "- ==",
   "- Integer",
   "- .",
   "- MIN_VALUE",
   "- )",
   "- )",
   "- {",
   "- if",
   "- (",
   "- (",
   "- u",
   "- ==",
   "  Integer",
   "  .",
   "  MIN_VALUE",
   "  )",
   "  ||",
   "  (",
   "  v",
   "  ==",
   "  Integer",
   "  .",
   "  MIN_VALUE",
   "  )",
   "  )",
   "  {",
   "  throw",
   "  new",
   "  ArithmeticException",
   "  (",
   "  \"overflow: gcd is 2^31\"",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- ArithmeticException",
   "- (",
   "- \"overflow: gcd is 2^31\"",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  return",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  u",
   "  )",
   "  +",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  v",
   "  )",
   "  ;",
   "- return",
   "- Math",
   "- .",
   "- abs",
   "- (",
   "- u",
   "- )",
   "- +",
   "- Math",
   "- .",
   "- abs",
   "- (",
   "- v",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  if",
   "  either",
   "  operand",
   "  is",
   "  abs",
   "  1",
   "  ,",
   "  return",
   "  1",
   "  :",
   "  if",
   "  (",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  u",
   "  )",
   "- ==",
   "+ <=",
   "  1",
   "  ||",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  v",
   "  )",
   "- ==",
   "+ <=",
   "  1",
   "  )",
   "  {",
   "  if",
   "  (",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  u",
   "  )",
   "  ==",
   "  1",
   "  ||",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  v",
   "  )",
   "  ==",
   "  1",
   "  )",
   "  {",
   "  eturn",
   "  1",
   "  ;",
   "  /",
   "  keep",
   "  u",
   "  and",
   "  v",
   "  negative",
   "  ,",
   "  as",
   "  negative",
   "  integers",
   "  range",
   "  down",
   "  to"
  ]
 },
 {
  "number": 20,
  "changes_set": [
   "  ublic",
   "  static",
   "  String",
   "  join",
   "  (",
   "  Object",
   "  [",
   "  ]",
   "  array",
   "  ,",
   "  char",
   "  separator",
   "  ,",
   "  int",
   "  startIndex",
   "  ,",
   "  int",
   "  eneturn",
   "  EMPTY",
   "  ;",
   "  StringBuilder",
   "  buf",
   "  =",
   "  new",
   "  StringBuilder",
   "  (",
   "- noOfItems",
   "- *",
   "+ (",
   "+ array",
   "+ [",
   "+ startIndex",
   "+ ]",
   "+ ==",
   "+ null",
   "+ ?",
   "  16",
   "+ :",
   "+ array",
   "+ [",
   "+ startIndex",
   "+ ]",
   "+ .",
   "+ toString",
   "+ (",
   "+ )",
   "+ .",
   "+ length",
   "+ (",
   "+ )",
   "+ )",
   "+ +",
   "+ 1",
   "  )",
   "  ;",
   "  StringBuilder",
   "  buf",
   "  =",
   "  new",
   "  StringBuilder",
   "  (",
   "  noOfItems",
   "  *",
   "  16",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  startIndex",
   "  ;",
   "  i",
   "  <",
   "  endIndex",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  f",
   "  (",
   "  i",
   "  >",
   "  startIndex",
   "  )",
   "  {"
  ]
 },
 {
  "number": 20,
  "changes_set": [
   "  ublic",
   "  static",
   "  String",
   "  join",
   "  (",
   "  Object",
   "  [",
   "  ]",
   "  array",
   "  ,",
   "  String",
   "  separator",
   "  ,",
   "  int",
   "  startIndex",
   "  ,",
   "  inteturn",
   "  EMPTY",
   "  ;",
   "  StringBuilder",
   "  buf",
   "  =",
   "  new",
   "  StringBuilder",
   "  (",
   "- noOfItems",
   "- *",
   "+ (",
   "+ array",
   "+ [",
   "+ startIndex",
   "+ ]",
   "+ ==",
   "+ null",
   "+ ?",
   "  16",
   "+ :",
   "+ array",
   "+ [",
   "+ startIndex",
   "+ ]",
   "+ .",
   "+ toString",
   "+ (",
   "+ )",
   "+ .",
   "+ length",
   "+ (",
   "+ )",
   "+ )",
   "+ +",
   "+ separator",
   "+ .",
   "+ length",
   "+ (",
   "+ )",
   "  )",
   "  ;",
   "  StringBuilder",
   "  buf",
   "  =",
   "  new",
   "  StringBuilder",
   "  (",
   "  noOfItems",
   "  *",
   "  16",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  startIndex",
   "  ;",
   "  i",
   "  <",
   "  endIndex",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  f",
   "  (",
   "  i",
   "  >",
   "  startIndex",
   "  )",
   "  {"
  ]
 },
 {
  "number": 24,
  "changes_set": [
   "  ublic",
   "  static",
   "  boolean",
   "  isNumber",
   "  (",
   "  String",
   "  str",
   "  )",
   "  {",
   "  f",
   "  (",
   "  chars",
   "  [",
   "  i",
   "  ]",
   "  ==",
   "  'l'",
   "  |",
   "  chars",
   "  [",
   "  i",
   "  ]",
   "  ==",
   "  'L'",
   "  )",
   "  {",
   "  /",
   "  not",
   "  allowing",
   "  L",
   "  with",
   "  an",
   "  exponent",
   "  or",
   "  decimal",
   "  pointreturn",
   "  foundDigit",
   "  &&",
   "  !",
   "  hasExp",
   "- &&",
   "- !",
   "- hasDecPoint",
   "  ;",
   "  return",
   "  foundDigit",
   "  &&",
   "  !",
   "  hasExp",
   "  &&",
   "  !",
   "  hasDecPoint",
   "  ;",
   "  /",
   "  last",
   "  character",
   "  is",
   "  illegaleturn",
   "  false",
   "  ;"
  ]
 },
 {
  "number": 26,
  "changes_set": [
   "  eturn",
   "  the",
   "  formatted",
   "  string",
   "  /",
   "  ublic",
   "  String",
   "  format",
   "  (",
   "  Date",
   "  date",
   "  )",
   "  {",
   "  Calendar",
   "  c",
   "  =",
   "  new",
   "  GregorianCalendar",
   "  (",
   "  mTimeZone",
   "- ,",
   "- mLocale",
   "  )",
   "  ;",
   "  Calendar",
   "  c",
   "  =",
   "  new",
   "  GregorianCalendar",
   "  (",
   "  mTimeZone",
   "  ,",
   "  mLocale",
   "  )",
   "  ;",
   "  .",
   "  setTime",
   "  (",
   "  date",
   "  )",
   "  ;",
   "  eturn",
   "  applyRules",
   "  (",
   "  c",
   "  ,",
   "  new",
   "  StringBuffer",
   "  (",
   "  mMaxLengthEstimate",
   "  )",
   "  )",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 29,
  "changes_set": [
   "  eturn",
   "  the",
   "  version",
   "  ,",
   "  for",
   "  example",
   "  131",
   "  for",
   "  Java",
   "  1.3",
   "  .1",
   "  /",
   "  static",
   "- int",
   "+ float",
   "  toJavaVersionInt",
   "  (",
   "  String",
   "  version",
   "  )",
   "  {",
   "  static",
   "  int",
   "  toJavaVersionInt",
   "  (",
   "  String",
   "  version",
   "  )",
   "  {",
   "  eturn",
   "  toVersionInt",
   "  (",
   "  toJavaVersionIntArray",
   "  (",
   "  version",
   "  ,",
   "  JAVA_VERSION_TRIM_SIZE",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 30,
  "changes_set": [
   "  ublic",
   "  static",
   "  int",
   "  indexOfAny",
   "  (",
   "  CharSequence",
   "  cs",
   "  ,",
   "  char",
   "  [",
   "  ]",
   "  searchChars",
   "  )",
   "  {",
   "  eturn",
   "  INDEX_NOT_FOUND",
   "  ;",
   "  nt",
   "  csLen",
   "  =",
   "  cs",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  int",
   "  csLast",
   "  =",
   "  csLen",
   "  -",
   "  1",
   "  ;",
   "- int",
   "- csLast",
   "- =",
   "- csLen",
   "- -",
   "- 1",
   "- ;",
   "  nt",
   "  searchLen",
   "  =",
   "  searchChars",
   "  .",
   "  length",
   "- ;",
   "- int",
   "- searchLast",
   "- =",
   "- searchLen",
   "- -",
   "- 1",
   "  ;",
   "  int",
   "  searchLast",
   "  =",
   "  searchLen",
   "  -",
   "  1",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  csLen",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  har",
   "  ch",
   "  =",
   "  cs",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  j",
   "  =",
   "  0",
   "  ;",
   "  j",
   "  <",
   "  searchLen",
   "  ;",
   "  j",
   "  ++",
   "  )",
   "  {",
   "  f",
   "  (",
   "  searchChars",
   "  [",
   "  j",
   "  ]",
   "  ==",
   "  ch",
   "  )",
   "  {",
   "  if",
   "  (",
   "  i",
   "  <",
   "  csLast",
   "  &&",
   "  j",
   "  <",
   "  searchLast",
   "  &&",
   "  Character",
   "  .",
   "  isHighSurrogate",
   "  (",
   "  ch",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- i",
   "- <",
   "- csLast",
   "- &&",
   "- j",
   "- <",
   "- searchLast",
   "- &&",
   "- Character",
   "- .",
   "- isHighSurrogate",
   "- (",
   "- ch",
   "- )",
   "- )",
   "- {",
   "  /",
   "  ch",
   "  is",
   "  a",
   "  supplementary",
   "  characterif",
   "  (",
   "  searchChars",
   "  [",
   "  j",
   "  +",
   "  1",
   "  ]",
   "  ==",
   "  cs",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  +",
   "  1",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- searchChars",
   "- [",
   "- j",
   "- +",
   "- 1",
   "- ]",
   "- ==",
   "- cs",
   "- .",
   "- charAt",
   "- (",
   "- i",
   "- +",
   "- 1",
   "- )",
   "- )",
   "- {",
   "- return",
   "- i",
   "- ;",
   "  return",
   "  i",
   "  ;",
   "  }",
   "- }",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  eturn",
   "  i",
   "  ;",
   "  }",
   "- }"
  ]
 },
 {
  "number": 30,
  "changes_set": [
   "  ince",
   "  2.4",
   "  /",
   "  public",
   "  static",
   "  boolean",
   "  containsAny",
   "  (",
   "- String",
   "+ CharSequence",
   "  cs",
   "  ,",
   "  char",
   "  [",
   "  ]",
   "  searchChars",
   "  )",
   "  {",
   "  public",
   "  static",
   "  boolean",
   "  containsAny",
   "  (",
   "  String",
   "  cs",
   "  ,",
   "  char",
   "  [",
   "  ]",
   "  searchChars",
   "  )",
   "  {",
   "  f",
   "  (",
   "  isEmpty",
   "  (",
   "  cs",
   "  )",
   "  ||",
   "  ArrayUtils",
   "  .",
   "  isEmpty",
   "  (",
   "  searchChars",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;"
  ]
 },
 {
  "number": 30,
  "changes_set": [
   "  ublic",
   "  static",
   "  boolean",
   "  containsAny",
   "  (",
   "  CharSequence",
   "  cs",
   "  ,",
   "  char",
   "  [",
   "  ]",
   "  searchChars",
   "  )",
   "  {",
   "  har",
   "  ch",
   "  =",
   "  cs",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  j",
   "  =",
   "  0",
   "  ;",
   "  j",
   "  <",
   "  searchLength",
   "  ;",
   "  j",
   "  ++",
   "  )",
   "  {",
   "  f",
   "  (",
   "  searchChars",
   "  [",
   "  j",
   "  ]",
   "  ==",
   "  ch",
   "  )",
   "  {",
   "  if",
   "  (",
   "+ i",
   "+ <",
   "+ csLast",
   "+ &&",
   "+ j",
   "+ <",
   "+ searchLast",
   "+ &&",
   "+ ch",
   "+ >=",
   "  Character",
   "  .",
   "- isHighSurrogate",
   "- (",
   "+ MIN_HIGH_SURROGATE",
   "+ &&",
   "  ch",
   "- )",
   "+ <=",
   "+ Character",
   "+ .",
   "+ MAX_HIGH_SURROGATE",
   "  )",
   "  {",
   "  if",
   "  (",
   "  Character",
   "  .",
   "  isHighSurrogate",
   "  (",
   "  ch",
   "  )",
   "- )",
   "- {",
   "- if",
   "- (",
   "- j",
   "- ==",
   "- searchLast",
   "  )",
   "  {",
   "  if",
   "  (",
   "  j",
   "  ==",
   "  searchLast",
   "  )",
   "  {",
   "  /",
   "  missing",
   "  low",
   "  surrogate",
   "  ,",
   "  fine",
   "  ,",
   "  like",
   "  String",
   "  .",
   "  indexOf",
   "  (",
   "  String",
   "  )",
   "- return",
   "- true",
   "- ;",
   "- return",
   "- true",
   "- ;",
   "- }",
   "- }",
   "  if",
   "  (",
   "- i",
   "- <",
   "- csLast",
   "- &&",
   "  searchChars",
   "  [",
   "  j",
   "  +",
   "  1",
   "  ]",
   "  ==",
   "  cs",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  +",
   "  1",
   "  )",
   "  )",
   "  {",
   "+ return",
   "+ true",
   "+ ;",
   "+ }",
   "  if",
   "  (",
   "  i",
   "  <",
   "  csLast",
   "  &&",
   "  searchChars",
   "  [",
   "  j",
   "  +",
   "  1",
   "  ]",
   "  ==",
   "  cs",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  +",
   "  1",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  true",
   "  ;",
   "  else",
   "  {"
  ]
 },
 {
  "number": 30,
  "changes_set": [
   "  ince",
   "  2.4",
   "  /",
   "  public",
   "  static",
   "  boolean",
   "  containsAny",
   "  (",
   "- String",
   "+ CharSequence",
   "  cs",
   "  ,",
   "  String",
   "  searchChars",
   "  )",
   "  {",
   "  public",
   "  static",
   "  boolean",
   "  containsAny",
   "  (",
   "  String",
   "  cs",
   "  ,",
   "  String",
   "  searchChars",
   "  )",
   "  {",
   "  f",
   "  (",
   "  searchChars",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;"
  ]
 },
 {
  "number": 30,
  "changes_set": [
   "  ublic",
   "  static",
   "  int",
   "  indexOfAnyBut",
   "  (",
   "  CharSequence",
   "  cs",
   "  ,",
   "  char",
   "  [",
   "  ]",
   "  searchChars",
   "  )",
   "  {",
   "  eturn",
   "  INDEX_NOT_FOUND",
   "  ;",
   "  nt",
   "  csLen",
   "  =",
   "  cs",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  int",
   "  csLast",
   "  =",
   "  csLen",
   "  -",
   "  1",
   "  ;",
   "- int",
   "- csLast",
   "- =",
   "- csLen",
   "- -",
   "- 1",
   "- ;",
   "  nt",
   "  searchLen",
   "  =",
   "  searchChars",
   "  .",
   "  length",
   "- ;",
   "- int",
   "- searchLast",
   "- =",
   "- searchLen",
   "- -",
   "- 1",
   "  ;",
   "  int",
   "  searchLast",
   "  =",
   "  searchLen",
   "  -",
   "  1",
   "  ;",
   "  uter",
   "  :",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  csLen",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  har",
   "  ch",
   "  =",
   "  cs",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  j",
   "  =",
   "  0",
   "  ;",
   "  j",
   "  <",
   "  searchLen",
   "  ;",
   "  j",
   "  ++",
   "  )",
   "  {",
   "  f",
   "  (",
   "  searchChars",
   "  [",
   "  j",
   "  ]",
   "  ==",
   "  ch",
   "  )",
   "  {",
   "  if",
   "  (",
   "  i",
   "  <",
   "  csLast",
   "  &&",
   "  j",
   "  <",
   "  searchLast",
   "  &&",
   "  Character",
   "  .",
   "  isHighSurrogate",
   "  (",
   "  ch",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "- i",
   "- <",
   "- csLast",
   "- &&",
   "- j",
   "- <",
   "- searchLast",
   "- &&",
   "- Character",
   "- .",
   "- isHighSurrogate",
   "- (",
   "- ch",
   "- )",
   "- )",
   "- {",
   "- if",
   "- (",
   "- searchChars",
   "- [",
   "- j",
   "- +",
   "- 1",
   "- ]",
   "- ==",
   "- cs",
   "- .",
   "- charAt",
   "- (",
   "- i",
   "- +",
   "- 1",
   "- )",
   "- )",
   "- {",
   "- if",
   "- (",
   "  searchChars",
   "  [",
   "  j",
   "  +",
   "  1",
   "  ]",
   "  ==",
   "  cs",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  +",
   "  1",
   "  )",
   "  )",
   "  {",
   "  continue",
   "  outer",
   "  ;",
   "- continue",
   "- outer",
   "- ;",
   "  }",
   "- }",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  ontinue",
   "  outer",
   "  ;",
   "  }",
   "- }",
   "  eturn",
   "  i",
   "  ;"
  ]
 },
 {
  "number": 30,
  "changes_set": [
   "  ublic",
   "  static",
   "  int",
   "  indexOfAnyBut",
   "  (",
   "  String",
   "  str",
   "  ,",
   "  String",
   "  searchChars",
   "  )",
   "  {",
   "  nt",
   "  strLen",
   "  =",
   "  str",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  strLen",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  har",
   "  ch",
   "  =",
   "  str",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  )",
   "  ;",
   "+ if",
   "+ (",
   "- boolean",
   "- chFound",
   "- =",
   "  searchChars",
   "  .",
   "  indexOf",
   "  (",
   "  ch",
   "  )",
   "- >=",
   "+ <",
   "  0",
   "- ;",
   "+ )",
   "+ {",
   "  boolean",
   "  chFound",
   "  =",
   "  searchChars",
   "  .",
   "  indexOf",
   "  (",
   "  ch",
   "  )",
   "  >=",
   "  0",
   "  ;",
   "  if",
   "  (",
   "  i",
   "  +",
   "  1",
   "  <",
   "  strLen",
   "  &&",
   "  Character",
   "  .",
   "  isHighSurrogate",
   "  (",
   "  ch",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- i",
   "- +",
   "- 1",
   "- <",
   "- strLen",
   "- &&",
   "- Character",
   "- .",
   "- isHighSurrogate",
   "- (",
   "- ch",
   "- )",
   "- )",
   "- {",
   "- char",
   "- ch2",
   "- =",
   "- str",
   "- .",
   "- charAt",
   "- (",
   "- i",
   "- +",
   "- 1",
   "- )",
   "- ;",
   "  char",
   "  ch2",
   "  =",
   "  str",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  +",
   "  1",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  chFound",
   "  &&",
   "  searchChars",
   "  .",
   "  indexOf",
   "  (",
   "  ch2",
   "  )",
   "  <",
   "  0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- chFound",
   "- &&",
   "- searchChars",
   "- .",
   "- indexOf",
   "- (",
   "- ch2",
   "- )",
   "- <",
   "- 0",
   "- )",
   "- {",
   "  eturn",
   "  i",
   "  ;",
   "  }",
   "  }",
   "- }",
   "  else",
   "- {",
   "- }",
   "- else",
   "- {",
   "- if",
   "- (",
   "- !",
   "- chFound",
   "- )",
   "  {",
   "  if",
   "  (",
   "  !",
   "  chFound",
   "  )",
   "  {",
   "  return",
   "  i",
   "  ;",
   "- return",
   "- i",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  INDEX_NOT_FOUND",
   "  ;"
  ]
 },
 {
  "number": 30,
  "changes_set": [
   "  ublic",
   "  static",
   "  boolean",
   "  containsNone",
   "  (",
   "  CharSequence",
   "  cs",
   "  ,",
   "  char",
   "  [",
   "  ]",
   "  searchChars",
   "  )",
   "  {",
   "  eturn",
   "  true",
   "  ;",
   "  nt",
   "  csLen",
   "  =",
   "  cs",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  int",
   "  csLast",
   "  =",
   "  csLen",
   "  -",
   "  1",
   "  ;",
   "- int",
   "- csLast",
   "- =",
   "- csLen",
   "- -",
   "- 1",
   "- ;",
   "  nt",
   "  searchLen",
   "  =",
   "  searchChars",
   "  .",
   "  length",
   "- ;",
   "- int",
   "- searchLast",
   "- =",
   "- searchLen",
   "- -",
   "- 1",
   "  ;",
   "  int",
   "  searchLast",
   "  =",
   "  searchLen",
   "  -",
   "  1",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  csLen",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  har",
   "  ch",
   "  =",
   "  cs",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  j",
   "  =",
   "  0",
   "  ;",
   "  j",
   "  <",
   "  searchLen",
   "  ;",
   "  j",
   "  ++",
   "  )",
   "  {",
   "  f",
   "  (",
   "  searchChars",
   "  [",
   "  j",
   "  ]",
   "  ==",
   "  ch",
   "  )",
   "  {",
   "  if",
   "  (",
   "  Character",
   "  .",
   "  isHighSurrogate",
   "  (",
   "  ch",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "- Character",
   "- .",
   "- isHighSurrogate",
   "- (",
   "- ch",
   "- )",
   "- )",
   "- {",
   "- if",
   "- (",
   "- j",
   "- ==",
   "- searchLast",
   "- )",
   "- {",
   "- if",
   "- (",
   "  j",
   "  ==",
   "  searchLast",
   "  )",
   "  {",
   "  /",
   "  missing",
   "  low",
   "  surrogate",
   "  ,",
   "  fine",
   "  ,",
   "  like",
   "  String",
   "  .",
   "  indexOf",
   "  (",
   "  String",
   "  )",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "  }",
   "- }",
   "- if",
   "- (",
   "- i",
   "- <",
   "- csLast",
   "- &&",
   "- searchChars",
   "- [",
   "- j",
   "- +",
   "- 1",
   "- ]",
   "- ==",
   "- cs",
   "- .",
   "- charAt",
   "- (",
   "- i",
   "- +",
   "- 1",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  i",
   "  <",
   "  csLast",
   "  &&",
   "  searchChars",
   "  [",
   "  j",
   "  +",
   "  1",
   "  ]",
   "  ==",
   "  cs",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  +",
   "  1",
   "  )",
   "  )",
   "  {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "  }",
   "- }",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  /",
   "  ch",
   "  is",
   "  in",
   "  the",
   "  Basic",
   "  Multilingual",
   "  Planeeturn",
   "  false",
   "  ;",
   "  }",
   "- }"
  ]
 },
 {
  "number": 28,
  "changes_set": [
   "  ublic",
   "  int",
   "  translate",
   "  (",
   "  CharSequence",
   "  input",
   "  ,",
   "  int",
   "  index",
   "  ,",
   "  Writer",
   "  out",
   "  )",
   "  throws",
   "  IOExceptieturn",
   "  0",
   "  ;",
   "  if",
   "  (",
   "  entityValue",
   "  >",
   "  0xFFFF",
   "  )",
   "  {",
   "- if",
   "- (",
   "- entityValue",
   "- >",
   "- 0xFFFF",
   "- )",
   "- {",
   "- char",
   "- [",
   "- ]",
   "- chrs",
   "- =",
   "- Character",
   "- .",
   "- toChars",
   "- (",
   "- entityValue",
   "- )",
   "- ;",
   "  char",
   "  [",
   "  ]",
   "  chrs",
   "  =",
   "  Character",
   "  .",
   "  toChars",
   "  (",
   "  entityValue",
   "  )",
   "  ;",
   "  out",
   "  .",
   "  write",
   "  (",
   "  chrs",
   "  [",
   "  0",
   "  ]",
   "  )",
   "  ;",
   "  out",
   "  .",
   "  write",
   "  (",
   "  chrs",
   "  [",
   "- 0",
   "- ]",
   "- )",
   "- ;",
   "- out",
   "- .",
   "- write",
   "- (",
   "- chrs",
   "- [",
   "  1",
   "  ]",
   "  )",
   "  ;",
   "- out",
   "- .",
   "- write",
   "- (",
   "- chrs",
   "- [",
   "- 1",
   "- ]",
   "- )",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  ut",
   "  .",
   "  write",
   "  (",
   "  entityValue",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  eturn",
   "  2",
   "  +",
   "  (",
   "  end",
   "  -",
   "  start",
   "  )",
   "  +",
   "  (",
   "  isHex",
   "  ?",
   "  1",
   "  :",
   "  0",
   "  )",
   "  +",
   "  1",
   "  ;",
   "  eturn",
   "  0",
   "  ;"
  ]
 },
 {
  "number": 27,
  "changes_set": [
   "  ublic",
   "  static",
   "  Number",
   "  createNumber",
   "  (",
   "  String",
   "  str",
   "  )",
   "  throws",
   "  NumberFormatException",
   "  {",
   "  f",
   "  (",
   "  decPos",
   "  >",
   "  -",
   "  1",
   "  )",
   "  {",
   "  f",
   "  (",
   "  expPos",
   "  >",
   "  -",
   "  1",
   "  )",
   "  {",
   "  if",
   "  (",
   "  expPos",
   "  <",
   "  decPos",
   "- ||",
   "- expPos",
   "- >",
   "- str",
   "- .",
   "- length",
   "- (",
   "- )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  expPos",
   "  <",
   "  decPos",
   "  ||",
   "  expPos",
   "  >",
   "  str",
   "  .",
   "  length",
   "  (",
   "  )",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  NumberFormatException",
   "  (",
   "  str",
   "  +",
   "  \" is not a valid number.\"",
   "  )",
   "  ;",
   "  ec",
   "  =",
   "  str",
   "  .",
   "  substring",
   "  (",
   "  decPos",
   "  +",
   "  1",
   "  ,",
   "  expPos",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 27,
  "changes_set": [
   "  ublic",
   "  static",
   "  Number",
   "  createNumber",
   "  (",
   "  String",
   "  str",
   "  )",
   "  throws",
   "  NumberFormatException",
   "  {",
   "  ant",
   "  =",
   "  str",
   "  .",
   "  substring",
   "  (",
   "  0",
   "  ,",
   "  decPos",
   "  )",
   "  ;",
   "  else",
   "  {",
   "  f",
   "  (",
   "  expPos",
   "  >",
   "  -",
   "  1",
   "  )",
   "  {",
   "  if",
   "  (",
   "  expPos",
   "  >",
   "  str",
   "  .",
   "  length",
   "  (",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- expPos",
   "- >",
   "- str",
   "- .",
   "- length",
   "- (",
   "- )",
   "- )",
   "- {",
   "  throw",
   "  new",
   "  NumberFormatException",
   "  (",
   "  str",
   "  +",
   "  \" is not a valid number.\"",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- NumberFormatException",
   "- (",
   "- str",
   "- +",
   "- \" is not a valid number.\"",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  ant",
   "  =",
   "  str",
   "  .",
   "  substring",
   "  (",
   "  0",
   "  ,",
   "  expPos",
   "  )",
   "  ;",
   "  else",
   "  {",
   "  ant",
   "  =",
   "  str",
   "  ;"
  ]
 },
 {
  "number": 31,
  "changes_set": [
   "  ublic",
   "  static",
   "  boolean",
   "  containsAny",
   "  (",
   "  CharSequence",
   "  cs",
   "  ,",
   "  char",
   "  [",
   "  ]",
   "  searchChars",
   "  )",
   "  {",
   "  nt",
   "  csLength",
   "  =",
   "  cs",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  nt",
   "  searchLength",
   "  =",
   "  searchChars",
   "  .",
   "  length",
   "  ;",
   "  int",
   "  csLastIndex",
   "  =",
   "  csLength",
   "- -",
   "- 1",
   "- ;",
   "- int",
   "- csLastIndex",
   "- =",
   "- csLength",
   "- -",
   "- 1",
   "- ;",
   "- int",
   "- searchLastIndex",
   "- =",
   "- searchLength",
   "  -",
   "  1",
   "  ;",
   "  int",
   "  searchLastIndex",
   "  =",
   "  searchLength",
   "  -",
   "  1",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  csLength",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  har",
   "  ch",
   "  =",
   "  cs",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  j",
   "  =",
   "  0",
   "  ;",
   "  j",
   "  <",
   "  searchLength",
   "  ;",
   "  j",
   "  ++",
   "  )",
   "  {",
   "  f",
   "  (",
   "  searchChars",
   "  [",
   "  j",
   "  ]",
   "  ==",
   "  ch",
   "  )",
   "  {",
   "  if",
   "  (",
   "  i",
   "  <",
   "  csLastIndex",
   "  &&",
   "  j",
   "  <",
   "  searchLastIndex",
   "  &&",
   "  ch",
   "  >=",
   "  Character",
   "  .",
   "  MIN_HIGH_SURROGATE",
   "  &&",
   "  ch",
   "  <=",
   "  Character",
   "  .",
   "  MAX_HIGH_SURROGATE",
   "  )",
   "  {",
   "- if",
   "- (",
   "- i",
   "- <",
   "- csLastIndex",
   "- &&",
   "- j",
   "- <",
   "- searchLastIndex",
   "- &&",
   "- ch",
   "- >=",
   "- Character",
   "- .",
   "- MIN_HIGH_SURROGATE",
   "- &&",
   "- ch",
   "- <=",
   "- Character",
   "- .",
   "- MAX_HIGH_SURROGATE",
   "- )",
   "- {",
   "  /",
   "  ch",
   "  is",
   "  a",
   "  supplementary",
   "  characterif",
   "  (",
   "  searchChars",
   "  [",
   "  j",
   "  +",
   "  1",
   "  ]",
   "  ==",
   "  cs",
   "  .",
   "  charAt",
   "  (",
   "  i",
   "  +",
   "  1",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- searchChars",
   "- [",
   "- j",
   "- +",
   "- 1",
   "- ]",
   "- ==",
   "- cs",
   "- .",
   "- charAt",
   "- (",
   "- i",
   "- +",
   "- 1",
   "- )",
   "- )",
   "- {",
   "- return",
   "- true",
   "- ;",
   "  return",
   "  true",
   "  ;",
   "  }",
   "- }",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  /",
   "  ch",
   "  is",
   "  in",
   "  the",
   "  Basic",
   "  Multilingual",
   "  Planeeturn",
   "  true",
   "  ;",
   "  }",
   "- }"
  ]
 },
 {
  "number": 32,
  "changes_set": [
   "  ince",
   "  2.3",
   "  /",
   "+ private",
   "+ static",
   "+ final",
   "+ ThreadLocal",
   "+ <",
   "+ Set",
   "+ <",
   "+ IDKey",
   "+ >",
   "+ >",
   "+ REGISTRY",
   "+ =",
   "+ new",
   "+ ThreadLocal",
   "+ <",
   "+ Set",
   "+ <",
   "+ IDKey",
   "+ >",
   "+ >",
   "+ (",
   "+ )",
   "+ {"
  ]
 },
 {
  "number": 32,
  "changes_set": [
   "+ verrideprotected",
   "- verrideprivate",
   "- static",
   "- final",
   "- ThreadLocal",
   "- <",
   "  Set",
   "  <",
   "  IDKey",
   "  >",
   "- >",
   "- REGISTRY",
   "- =",
   "+ initialValue",
   "+ (",
   "+ )",
   "+ {",
   "+ return",
   "  new",
   "+ HashSet",
   "- ThreadLocal",
   "- <",
   "- Set",
   "  <",
   "  IDKey",
   "  >",
   "- >",
   "  (",
   "  )",
   "+ ;",
   "+ }",
   "+ }",
   "  ;",
   "  private",
   "  static",
   "  final",
   "  ThreadLocal",
   "  <",
   "  Set",
   "  <",
   "  IDKey",
   "  >",
   "  >",
   "  REGISTRY",
   "  =",
   "  new",
   "  ThreadLocal",
   "  <",
   "  Set",
   "  <",
   "  IDKey",
   "  >",
   "  >",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  N",
   "  .",
   "  B",
   "  .",
   "  we",
   "  cannot",
   "  store",
   "  the",
   "  actual",
   "  objects",
   "  in",
   "  a",
   "  HashSet",
   "  ,",
   "  as",
   "  that",
   "  would",
   "  use",
   "  the",
   "  very",
   "  hashCode",
   "  (",
   "  )"
  ]
 },
 {
  "number": 32,
  "changes_set": [
   "  ince",
   "  2.3",
   "  /",
   "  tatic",
   "  boolean",
   "  isRegistered",
   "  (",
   "  Object",
   "  value",
   "  )",
   "  {",
   "+ return",
   "- Set",
   "- <",
   "- IDKey",
   "- >",
   "- registry",
   "- =",
   "  getRegistry",
   "  (",
   "+ )",
   "+ .",
   "+ contains",
   "+ (",
   "+ new",
   "+ IDKey",
   "+ (",
   "+ value",
   "+ )",
   "  )",
   "  ;",
   "  Set",
   "  <",
   "  IDKey",
   "  >",
   "  registry",
   "  =",
   "  getRegistry",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  registry",
   "  !=",
   "  null",
   "  &&",
   "  registry",
   "  .",
   "  contains",
   "  (",
   "  new",
   "  IDKey",
   "  (",
   "  value",
   "  )",
   "  )",
   "  ;",
   "- return",
   "- registry",
   "- !=",
   "- null",
   "- &&",
   "- registry",
   "- .",
   "- contains",
   "- (",
   "- new",
   "- IDKey",
   "- (",
   "- value",
   "- )",
   "- )",
   "- ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 32,
  "changes_set": [
   "  ublic",
   "  static",
   "  int",
   "  reflectionHashCode",
   "  (",
   "  Object",
   "  object",
   "  ,",
   "  String",
   "  [",
   "  ]",
   "  excludeFields",
   "  )",
   "  {",
   "  The",
   "  object",
   "  to",
   "  register",
   "  .",
   "  /",
   "  tatic",
   "  void",
   "  register",
   "  (",
   "  Object",
   "  value",
   "  )",
   "  {",
   "  synchronized",
   "  (",
   "  HashCodeBuilder",
   "  .",
   "  class",
   "  )",
   "  {",
   "- synchronized",
   "- (",
   "- HashCodeBuilder",
   "- .",
   "- class",
   "- )",
   "- {",
   "- if",
   "- (",
   "- getRegistry",
   "- (",
   "- )",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  if",
   "  (",
   "  getRegistry",
   "  (",
   "  )",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  REGISTRY",
   "  .",
   "  set",
   "  (",
   "  new",
   "  HashSet",
   "  <",
   "  IDKey",
   "  >",
   "  (",
   "  )",
   "  )",
   "  ;",
   "- REGISTRY",
   "- .",
   "- set",
   "- (",
   "- new",
   "- HashSet",
   "- <",
   "- IDKey",
   "- >",
   "- (",
   "- )",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  etRegistry",
   "  (",
   "  )",
   "  .",
   "  add",
   "  (",
   "  new",
   "  IDKey",
   "  (",
   "  value",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 32,
  "changes_set": [
   "  ince",
   "  2.3",
   "  /",
   "  tatic",
   "  void",
   "  unregister",
   "  (",
   "  Object",
   "  value",
   "  )",
   "  {",
   "- Set",
   "- <",
   "- IDKey",
   "- >",
   "- s",
   "- =",
   "  getRegistry",
   "  (",
   "+ )",
   "+ .",
   "+ remove",
   "+ (",
   "+ new",
   "+ IDKey",
   "+ (",
   "+ value",
   "+ )",
   "  )",
   "  ;",
   "  Set",
   "  <",
   "  IDKey",
   "  >",
   "  s",
   "  =",
   "  getRegistry",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  s",
   "  !=",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- s",
   "- !=",
   "- null",
   "- )",
   "- {",
   "- s",
   "- .",
   "- remove",
   "- (",
   "- new",
   "- IDKey",
   "- (",
   "- value",
   "- )",
   "- )",
   "- ;",
   "  s",
   "  .",
   "  remove",
   "  (",
   "  new",
   "  IDKey",
   "  (",
   "  value",
   "  )",
   "  )",
   "  ;",
   "  synchronized",
   "  (",
   "  HashCodeBuilder",
   "  .",
   "  class",
   "  )",
   "  {",
   "- synchronized",
   "- (",
   "- HashCodeBuilder",
   "- .",
   "- class",
   "- )",
   "- {",
   "- if",
   "- (",
   "- s",
   "- .",
   "- isEmpty",
   "- (",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  s",
   "  .",
   "  isEmpty",
   "  (",
   "  )",
   "  )",
   "  {",
   "  REGISTRY",
   "  .",
   "  remove",
   "  (",
   "  )",
   "  ;",
   "- REGISTRY",
   "- .",
   "- remove",
   "- (",
   "- )",
   "- ;",
   "- }",
   "- }",
   "- }",
   "  }",
   "  }",
   "  }",
   "  *",
   "  *"
  ]
 },
 {
  "number": 33,
  "changes_set": [
   "  rivate",
   "  static",
   "  String",
   "  toCanonicalName",
   "  (",
   "  String",
   "  className",
   "  )",
   "  {",
   "  lass",
   "  <",
   "  ?",
   "  >",
   "  [",
   "  ]",
   "  classes",
   "  =",
   "  new",
   "  Class",
   "  [",
   "  array",
   "  .",
   "  length",
   "  ]",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  array",
   "  .",
   "  length",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  classes",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  array",
   "  [",
   "  i",
   "  ]",
   "- ==",
   "- null",
   "- ?",
   "- null",
   "- :",
   "- array",
   "- [",
   "- i",
   "- ]",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  ;",
   "  classes",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  array",
   "  [",
   "  i",
   "  ]",
   "  ==",
   "  null",
   "  ?",
   "  null",
   "  :",
   "  array",
   "  [",
   "  i",
   "  ]",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  ;",
   "  eturn",
   "  classes",
   "  ;"
  ]
 },
 {
  "number": 34,
  "changes_set": [
   "  eturn",
   "  Set",
   "  the",
   "  registry",
   "  of",
   "  objects",
   "  being",
   "  traversed",
   "  /",
   "  tatic",
   "  Map",
   "  <",
   "  Object",
   "  ,",
   "  Object",
   "  >",
   "  getRegistry",
   "  (",
   "  )",
   "  {",
   "  return",
   "  REGISTRY",
   "  .",
   "  get",
   "  (",
   "  )",
   "+ !=",
   "+ null",
   "+ ?",
   "+ REGISTRY",
   "+ .",
   "+ get",
   "+ (",
   "+ )",
   "+ :",
   "+ Collections",
   "+ .",
   "+ <",
   "+ Object",
   "+ ,",
   "+ Object",
   "+ >",
   "+ emptyMap",
   "+ (",
   "+ )",
   "  ;",
   "  return",
   "  REGISTRY",
   "  .",
   "  get",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 34,
  "changes_set": [
   "  /",
   "  tatic",
   "  boolean",
   "  isRegistered",
   "  (",
   "  Object",
   "  value",
   "  )",
   "  {",
   "  ap",
   "  <",
   "  Object",
   "  ,",
   "  Object",
   "  >",
   "  m",
   "  =",
   "  getRegistry",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  m",
   "- !=",
   "- null",
   "- &&",
   "- m",
   "  .",
   "  containsKey",
   "  (",
   "  value",
   "  )",
   "  ;",
   "  return",
   "  m",
   "  !=",
   "  null",
   "  &&",
   "  m",
   "  .",
   "  containsKey",
   "  (",
   "  value",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 37,
  "changes_set": [
   "  ublic",
   "  static",
   "  boolean",
   "  isEmpty",
   "  (",
   "  boolean",
   "  [",
   "  ]",
   "  array",
   "  )",
   "  {",
   "  inal",
   "  Class",
   "  <",
   "  ?",
   "  >",
   "  type1",
   "  =",
   "  array1",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  .",
   "  getComponentType",
   "  (",
   "  )",
   "  ;",
   "  [",
   "  ]",
   "  joinedArray",
   "  =",
   "  (",
   "  T",
   "  [",
   "  ]",
   "  )",
   "  Array",
   "  .",
   "  newInstance",
   "  (",
   "  type1",
   "  ,",
   "  array1",
   "  .",
   "  length",
   "  +",
   "  array2",
   "  .",
   "  length",
   "  )",
   "  ;",
   "  ystem",
   "  .",
   "  arraycopy",
   "  (",
   "  array1",
   "  ,",
   "  0",
   "  ,",
   "  joinedArray",
   "  ,",
   "  0",
   "  ,",
   "  array1",
   "  .",
   "  length",
   "  )",
   "  ;",
   "  try",
   "  {",
   "- try",
   "- {",
   "  ystem",
   "  .",
   "  arraycopy",
   "  (",
   "  array2",
   "  ,",
   "  0",
   "  ,",
   "  joinedArray",
   "  ,",
   "  array1",
   "  .",
   "  length",
   "  ,",
   "  array2",
   "  .",
   "  length",
   "  )",
   "  ;",
   "- }",
   "- catch",
   "- (",
   "- ArrayStoreException",
   "- ase",
   "- )",
   "- {",
   "  }",
   "  catch",
   "  (",
   "  ArrayStoreException",
   "  ase",
   "  )",
   "  {",
   "  /",
   "  Check",
   "  if",
   "  problem",
   "  is",
   "  incompatible",
   "  typesfinal",
   "  Class",
   "  <",
   "  ?",
   "  >",
   "  type2",
   "  =",
   "  array2",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  .",
   "  getComponentType",
   "  (",
   "  )",
   "  ;",
   "- final",
   "- Class",
   "- <",
   "- ?",
   "- >",
   "- type2",
   "- =",
   "- array2",
   "- .",
   "- getClass",
   "- (",
   "- )",
   "- .",
   "- getComponentType",
   "- (",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- !",
   "- type1",
   "- .",
   "- isAssignableFrom",
   "- (",
   "- type2",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  !",
   "  type1",
   "  .",
   "  isAssignableFrom",
   "  (",
   "  type2",
   "  )",
   "  )",
   "  {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Cannot store \"",
   "  +",
   "  type2",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  +",
   "  \" in an array of \"",
   "  +",
   "  type1",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"Cannot store \"",
   "- +",
   "- type2",
   "- .",
   "- getName",
   "- (",
   "- )",
   "- +",
   "- \" in an array of \"",
   "- +",
   "- type1",
   "- .",
   "- getName",
   "- (",
   "- )",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  throw",
   "  ase",
   "  ;"
  ]
 },
 {
  "number": 35,
  "changes_set": [
   "  ublic",
   "  static",
   "  boolean",
   "  isEmpty",
   "  (",
   "  boolean",
   "  [",
   "  ]",
   "  array",
   "  )",
   "  {",
   "  else",
   "  if",
   "  (",
   "  element",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  ype",
   "  =",
   "  element",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  ;",
   "  else",
   "  {",
   "+ type",
   "+ =",
   "+ Object",
   "+ .",
   "+ class",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"Arguments cannot both be null\"",
   "- )",
   "  ;",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Arguments cannot both be null\"",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 35,
  "changes_set": [
   "  rivate",
   "  static",
   "  Object",
   "  copyArrayGrow1",
   "  (",
   "  Object",
   "  array",
   "  ,",
   "  Class",
   "  <",
   "  ?",
   "  >",
   "  newArrayComponentTypelse",
   "  if",
   "  (",
   "  element",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  lss",
   "  =",
   "  element",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  ;",
   "  else",
   "  {",
   "- throw",
   "+ return",
   "+ (",
   "+ T",
   "+ [",
   "+ ]",
   "+ )",
   "  new",
   "- IllegalArgumentException",
   "- (",
   "- \"Array and element cannot both be null\"",
   "- )",
   "+ Object",
   "+ [",
   "+ ]",
   "+ {",
   "+ null",
   "+ }",
   "  ;",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Array and element cannot both be null\"",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 42,
  "changes_set": [
   "  ublic",
   "  String",
   "  escape",
   "  (",
   "  String",
   "  str",
   "  )",
   "  {",
   "  ublic",
   "  void",
   "  escape",
   "  (",
   "  Writer",
   "  writer",
   "  ,",
   "  String",
   "  str",
   "  )",
   "  throws",
   "  IOException",
   "  {",
   "  nt",
   "  len",
   "  =",
   "  str",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  len",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "- int",
   "+ char",
   "  c",
   "  =",
   "- Character",
   "+ str",
   "  .",
   "- codePointAt",
   "+ charAt",
   "  (",
   "- str",
   "- ,",
   "  i",
   "  )",
   "  ;",
   "  int",
   "  c",
   "  =",
   "  Character",
   "  .",
   "  codePointAt",
   "  (",
   "  str",
   "  ,",
   "  i",
   "  )",
   "  ;",
   "  tring",
   "  entityName",
   "  =",
   "  this",
   "  .",
   "  entityName",
   "  (",
   "  c",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  entityName",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  if",
   "  (",
   "  c",
   "+ >",
   "+ 0x7F",
   "- >=",
   "- 0x010000",
   "- &&",
   "- i",
   "- <",
   "- len",
   "- -",
   "- 1",
   "  )",
   "  {",
   "  if",
   "  (",
   "  c",
   "  >=",
   "  0x010000",
   "  &&",
   "  i",
   "  <",
   "  len",
   "  -",
   "  1",
   "  )",
   "  {",
   "  writer",
   "  .",
   "  write",
   "  (",
   "  \"&#\"",
   "  )",
   "  ;",
   "  writer",
   "  .",
   "  write",
   "  (",
   "- \"&#\"",
   "- )",
   "- ;",
   "- writer",
   "- .",
   "- write",
   "- (",
   "- Integer",
   "- .",
   "- toString",
   "- (",
   "- c",
   "- ,",
   "- 10",
   "- )",
   "- )",
   "- ;",
   "- writer",
   "- .",
   "- write",
   "- (",
   "  Integer",
   "  .",
   "  toString",
   "  (",
   "  c",
   "  ,",
   "  10",
   "  )",
   "  )",
   "  ;",
   "  writer",
   "  .",
   "  write",
   "  (",
   "  ';'",
   "  )",
   "  ;",
   "- writer",
   "- .",
   "- write",
   "- (",
   "- ';'",
   "- )",
   "- ;",
   "  i",
   "  ++",
   "  ;",
   "- i",
   "- ++",
   "- ;",
   "- }",
   "- else",
   "- if",
   "- (",
   "- c",
   "- >",
   "- 0x7F",
   "- )",
   "- {",
   "  }",
   "  else",
   "  if",
   "  (",
   "  c",
   "  >",
   "  0x7F",
   "  )",
   "  {",
   "  riter",
   "  .",
   "  write",
   "  (",
   "  \"&#\"",
   "  )",
   "  ;",
   "  riter",
   "  .",
   "  write",
   "  (",
   "  Integer",
   "  .",
   "  toString",
   "  (",
   "  c",
   "  ,",
   "  10",
   "  )",
   "  )",
   "  ;",
   "  riter",
   "  .",
   "  write",
   "  (",
   "  ';'",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 43,
  "changes_set": [
   "  rivate",
   "  StringBuffer",
   "  appendQuotedString",
   "  (",
   "  String",
   "  pattern",
   "  ,",
   "  ParsePosition",
   "  pos",
   "  ,",
   "  nt",
   "  start",
   "  =",
   "  pos",
   "  .",
   "  getIndex",
   "  (",
   "  )",
   "  ;",
   "  har",
   "  [",
   "  ]",
   "  c",
   "  =",
   "  pattern",
   "  .",
   "  toCharArray",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  escapingOn",
   "  &&",
   "  c",
   "  [",
   "  start",
   "  ]",
   "  ==",
   "  QUOTE",
   "  )",
   "  {",
   "  next",
   "  (",
   "  pos",
   "  )",
   "  ;",
   "- next",
   "- (",
   "- pos",
   "- )",
   "- ;",
   "  eturn",
   "  appendTo",
   "  ==",
   "  null",
   "  ?",
   "  null",
   "  :",
   "  appendTo",
   "  .",
   "  append",
   "  (",
   "  QUOTE",
   "  )",
   "  ;",
   "  nt",
   "  lastHold",
   "  =",
   "  start",
   "  ;"
  ]
 },
 {
  "number": 36,
  "changes_set": [
   "  ublic",
   "  static",
   "  Number",
   "  createNumber",
   "  (",
   "  String",
   "  str",
   "  )",
   "  throws",
   "  NumberFormatException",
   "  {",
   "  ec",
   "  =",
   "  null",
   "  ;",
   "  if",
   "  (",
   "  !",
   "  Character",
   "  .",
   "  isDigit",
   "  (",
   "  lastChar",
   "  )",
   "- &&",
   "- lastChar",
   "- !=",
   "- '.'",
   "  )",
   "  {",
   "  if",
   "  (",
   "  !",
   "  Character",
   "  .",
   "  isDigit",
   "  (",
   "  lastChar",
   "  )",
   "  &&",
   "  lastChar",
   "  !=",
   "  '.'",
   "  )",
   "  {",
   "  f",
   "  (",
   "  expPos",
   "  >",
   "  -",
   "  1",
   "  &&",
   "  expPos",
   "  <",
   "  str",
   "  .",
   "  length",
   "  (",
   "  )",
   "  -",
   "  1",
   "  )",
   "  {",
   "  xp",
   "  =",
   "  str",
   "  .",
   "  substring",
   "  (",
   "  expPos",
   "  +",
   "  1",
   "  ,",
   "  str",
   "  .",
   "  length",
   "  (",
   "  )",
   "  -",
   "  1",
   "  )",
   "  ;",
   "  else",
   "  {"
  ]
 },
 {
  "number": 36,
  "changes_set": [
   "  ublic",
   "  static",
   "  boolean",
   "  isNumber",
   "  (",
   "  String",
   "  str",
   "  )",
   "  {",
   "  /",
   "  can",
   "  have",
   "  an",
   "  E",
   "  at",
   "  the",
   "  last",
   "  byteeturn",
   "  false",
   "  ;",
   "  if",
   "  (",
   "  chars",
   "  [",
   "  i",
   "  ]",
   "  ==",
   "  '.'",
   "  )",
   "  {",
   "  if",
   "  (",
   "- chars",
   "- [",
   "- i",
   "- ]",
   "- ==",
   "- '.'",
   "- )",
   "- {",
   "- if",
   "- (",
   "  hasDecPoint",
   "  ||",
   "  hasExp",
   "  )",
   "  {",
   "- if",
   "- (",
   "- hasDecPoint",
   "- ||",
   "- hasExp",
   "- )",
   "- {"
  ]
 },
 {
  "number": 39,
  "changes_set": [
   "  rivate",
   "  static",
   "  String",
   "  replaceEach",
   "  (",
   "  String",
   "  text",
   "  ,",
   "  String",
   "  [",
   "  ]",
   "  searchList",
   "  ,",
   "  String",
   "  [",
   "  ]",
   "  rep",
   "  /",
   "  count",
   "  the",
   "  replacement",
   "  text",
   "  elements",
   "  that",
   "  are",
   "  larger",
   "  than",
   "  their",
   "  corresponding",
   "  text",
   "  being",
   "  replacedor",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  searchList",
   "  .",
   "  length",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  if",
   "  (",
   "  searchList",
   "  [",
   "  i",
   "  ]",
   "  ==",
   "  null",
   "  ||",
   "  replacementList",
   "  [",
   "  i",
   "  ]",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- searchList",
   "- [",
   "- i",
   "- ]",
   "- ==",
   "- null",
   "- ||",
   "- replacementList",
   "- [",
   "- i",
   "- ]",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  continue",
   "  ;",
   "- continue",
   "- ;",
   "- }",
   "  }",
   "  nt",
   "  greater",
   "  =",
   "  replacementList",
   "  [",
   "  i",
   "  ]",
   "  .",
   "  length",
   "  (",
   "  )",
   "  -",
   "  searchList",
   "  [",
   "  i",
   "  ]",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  greater",
   "  >",
   "  0",
   "  )",
   "  {",
   "  ncrease",
   "  +=",
   "  3",
   "  *",
   "  greater",
   "  ;"
  ]
 },
 {
  "number": 41,
  "changes_set": [
   "  ublic",
   "  static",
   "  String",
   "  getShortClassName",
   "  (",
   "  String",
   "  className",
   "  )",
   "  {",
   "  eturn",
   "  StringUtils",
   "  .",
   "  EMPTY",
   "  ;",
   "  StringBuffer",
   "  arrayPrefix",
   "  =",
   "  new",
   "  StringBuffer",
   "  (",
   "  )",
   "  ;",
   "- StringBuffer",
   "- arrayPrefix",
   "- =",
   "- new",
   "- StringBuffer",
   "- (",
   "- )",
   "- ;",
   "  /",
   "  Handle",
   "  array",
   "  encodingif",
   "  (",
   "  className",
   "  .",
   "  startsWith",
   "  (",
   "  \"[\"",
   "  )",
   "- )",
   "- {",
   "- if",
   "- (",
   "- className",
   "- .",
   "- startsWith",
   "- (",
   "- \"[\"",
   "- )",
   "- )",
   "- {",
   "- while",
   "- (",
   "- className",
   "- .",
   "- charAt",
   "- (",
   "- 0",
   "- )",
   "- ==",
   "- '['",
   "  )",
   "  {",
   "  while",
   "  (",
   "  className",
   "  .",
   "  charAt",
   "  (",
   "  0",
   "  )",
   "  ==",
   "  '['",
   "  )",
   "  {",
   "  className",
   "  =",
   "  className",
   "  .",
   "  substring",
   "  (",
   "  1",
   "  )",
   "  ;",
   "- className",
   "- =",
   "- className",
   "- .",
   "- substring",
   "- (",
   "- 1",
   "- )",
   "- ;",
   "- arrayPrefix",
   "- .",
   "- append",
   "- (",
   "- \"[]\"",
   "- )",
   "- ;",
   "  arrayPrefix",
   "  .",
   "  append",
   "  (",
   "  \"[]\"",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  /",
   "  Strip",
   "  Object",
   "  type",
   "  encodingif",
   "- (",
   "- className",
   "- .",
   "- charAt",
   "- (",
   "- 0",
   "- )",
   "- ==",
   "- 'L'",
   "- &&",
   "- className",
   "- .",
   "- charAt",
   "- (",
   "- className",
   "- .",
   "- length",
   "- (",
   "- )",
   "- -",
   "- 1",
   "- )",
   "- ==",
   "- ';'",
   "- )",
   "- {",
   "- if",
   "  (",
   "  className",
   "  .",
   "  charAt",
   "  (",
   "  0",
   "  )",
   "  ==",
   "  'L'",
   "  &&",
   "  className",
   "  .",
   "  charAt",
   "  (",
   "  className",
   "  .",
   "  length",
   "  (",
   "  )",
   "  -",
   "  1",
   "  )",
   "  ==",
   "  ';'",
   "  )",
   "  {",
   "  className",
   "  =",
   "  className",
   "  .",
   "  substring",
   "  (",
   "  1",
   "  ,",
   "  className",
   "  .",
   "  length",
   "  (",
   "  )",
   "  -",
   "  1",
   "  )",
   "  ;",
   "- className",
   "- =",
   "- className",
   "- .",
   "- substring",
   "- (",
   "- 1",
   "- ,",
   "- className",
   "- .",
   "- length",
   "- (",
   "- )",
   "- -",
   "- 1",
   "- )",
   "- ;",
   "  }",
   "  }",
   "- }",
   "- }",
   "- if",
   "- (",
   "- reverseAbbreviationMap",
   "- .",
   "- containsKey",
   "- (",
   "- className",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  reverseAbbreviationMap",
   "  .",
   "  containsKey",
   "  (",
   "  className",
   "  )",
   "  )",
   "  {",
   "  className",
   "  =",
   "  reverseAbbreviationMap",
   "  .",
   "  get",
   "  (",
   "  className",
   "  )",
   "  ;",
   "- className",
   "- =",
   "- reverseAbbreviationMap",
   "- .",
   "- get",
   "- (",
   "- className",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  nt",
   "  lastDotIdx",
   "  =",
   "  className",
   "  .",
   "  lastIndexOf",
   "  (",
   "  PACKAGE_SEPARATOR_CHAR",
   "  )",
   "  ;",
   "  nt",
   "  innerIdx",
   "  =",
   "  className",
   "  .",
   "  indexOf",
   "  ("
  ]
 },
 {
  "number": 41,
  "changes_set": [
   "  ublic",
   "  static",
   "  String",
   "  getShortClassName",
   "  (",
   "  String",
   "  className",
   "  )",
   "  {",
   "  f",
   "  (",
   "  innerIdx",
   "  !=",
   "  -",
   "  1",
   "  )",
   "  {",
   "  ut",
   "  =",
   "  out",
   "  .",
   "  replace",
   "  (",
   "  INNER_CLASS_SEPARATOR_CHAR",
   "  ,",
   "  PACKAGE_SEPARATOR_CHAR",
   "  )",
   "  ;",
   "  return",
   "  out",
   "- +",
   "- arrayPrefix",
   "  ;",
   "  return",
   "  out",
   "  +",
   "  arrayPrefix",
   "  ;",
   "  /",
   "  Package",
   "  name"
  ]
 },
 {
  "number": 41,
  "changes_set": [
   "  eturn",
   "  the",
   "  package",
   "  name",
   "  or",
   "  an",
   "  empty",
   "  string",
   "  /",
   "  ublic",
   "  static",
   "  String",
   "  getPackageName",
   "  (",
   "  String",
   "  className",
   "  )",
   "  {",
   "  if",
   "  (",
   "  className",
   "  ==",
   "  null",
   "- ||",
   "- className",
   "- .",
   "- length",
   "- (",
   "- )",
   "- ==",
   "- 0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  className",
   "  ==",
   "  null",
   "  ||",
   "  className",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ==",
   "  0",
   "  )",
   "  {",
   "  eturn",
   "  StringUtils",
   "  .",
   "  EMPTY",
   "  ;",
   "  /",
   "  Strip",
   "  array",
   "  encodingwhile",
   "  (",
   "  className",
   "  .",
   "  charAt",
   "  (",
   "  0",
   "  )",
   "  ==",
   "  '['",
   "  )",
   "  {",
   "- while",
   "- (",
   "- className",
   "- .",
   "- charAt",
   "- (",
   "- 0",
   "- )",
   "- ==",
   "- '['",
   "- )",
   "- {",
   "- className",
   "- =",
   "- className",
   "- .",
   "- substring",
   "- (",
   "- 1",
   "- )",
   "- ;",
   "  className",
   "  =",
   "  className",
   "  .",
   "  substring",
   "  (",
   "  1",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  /",
   "  Strip",
   "  Object",
   "  type",
   "  encodingif",
   "- (",
   "- className",
   "- .",
   "- charAt",
   "- (",
   "- 0",
   "- )",
   "- ==",
   "- 'L'",
   "- &&",
   "- className",
   "- .",
   "- charAt",
   "- (",
   "- className",
   "- .",
   "- length",
   "- (",
   "- )",
   "- -",
   "- 1",
   "- )",
   "- ==",
   "- ';'",
   "- )",
   "- {",
   "- if",
   "  (",
   "  className",
   "  .",
   "  charAt",
   "  (",
   "  0",
   "  )",
   "  ==",
   "  'L'",
   "  &&",
   "  className",
   "  .",
   "  charAt",
   "  (",
   "  className",
   "  .",
   "  length",
   "  (",
   "  )",
   "  -",
   "  1",
   "  )",
   "  ==",
   "  ';'",
   "  )",
   "  {",
   "  className",
   "  =",
   "  className",
   "  .",
   "  substring",
   "  (",
   "  1",
   "  )",
   "  ;",
   "- className",
   "- =",
   "- className",
   "- .",
   "- substring",
   "- (",
   "- 1",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  nt",
   "  i",
   "  =",
   "  className",
   "  .",
   "  lastIndexOf",
   "  (",
   "  PACKAGE_SEPARATOR_CHAR",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  i",
   "  ==",
   "  -",
   "  1",
   "  )",
   "  {"
  ]
 },
 {
  "number": 40,
  "changes_set": [
   "  ublic",
   "  static",
   "  boolean",
   "  containsIgnoreCase",
   "  (",
   "  String",
   "  str",
   "  ,",
   "  String",
   "  searchStr",
   "  )",
   "  {",
   "  f",
   "  (",
   "  str",
   "  ==",
   "  null",
   "  ||",
   "  searchStr",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;",
   "- int",
   "- len",
   "- =",
   "+ return",
   "+ contains",
   "+ (",
   "+ str",
   "+ .",
   "+ toUpperCase",
   "+ (",
   "+ )",
   "+ ,",
   "  searchStr",
   "  .",
   "- length",
   "+ toUpperCase",
   "  (",
   "+ )",
   "  )",
   "  ;",
   "  int",
   "  len",
   "  =",
   "  searchStr",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  int",
   "  max",
   "  =",
   "  str",
   "  .",
   "  length",
   "  (",
   "  )",
   "  -",
   "  len",
   "  ;",
   "- int",
   "- max",
   "- =",
   "- str",
   "- .",
   "- length",
   "- (",
   "- )",
   "- -",
   "- len",
   "- ;",
   "- for",
   "- (",
   "- int",
   "- i",
   "- =",
   "- 0",
   "- ;",
   "- i",
   "- <=",
   "- max",
   "- ;",
   "- i",
   "- ++",
   "- )",
   "- {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <=",
   "  max",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  if",
   "  (",
   "  str",
   "  .",
   "  regionMatches",
   "  (",
   "  true",
   "  ,",
   "  i",
   "  ,",
   "  searchStr",
   "  ,",
   "  0",
   "  ,",
   "  len",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- str",
   "- .",
   "- regionMatches",
   "- (",
   "- true",
   "- ,",
   "- i",
   "- ,",
   "- searchStr",
   "- ,",
   "- 0",
   "- ,",
   "- len",
   "- )",
   "- )",
   "- {",
   "- return",
   "- true",
   "- ;",
   "  return",
   "  true",
   "  ;",
   "  }",
   "  }",
   "- }",
   "- }",
   "- return",
   "- false",
   "- ;",
   "  return",
   "  false",
   "  ;",
   "  /",
   "  IndexOfAny",
   "  chars"
  ]
 },
 {
  "number": 44,
  "changes_set": [
   "  ublic",
   "  static",
   "  Number",
   "  createNumber",
   "  (",
   "  String",
   "  val",
   "  )",
   "  throws",
   "  NumberFormatException",
   "  {",
   "  f",
   "  (",
   "  val",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ==",
   "  0",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  NumberFormatException",
   "  (",
   "  \"\\\"\\\" is not a valid number.\"",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  val",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ==",
   "  1",
   "  &&",
   "  !",
   "  Character",
   "  .",
   "  isDigit",
   "  (",
   "  val",
   "  .",
   "  charAt",
   "  (",
   "  0",
   "  )",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- val",
   "- .",
   "- length",
   "- (",
   "- )",
   "- ==",
   "- 1",
   "- &&",
   "- !",
   "- Character",
   "- .",
   "- isDigit",
   "- (",
   "- val",
   "- .",
   "- charAt",
   "- (",
   "- 0",
   "- )",
   "- )",
   "- )",
   "- {",
   "  throw",
   "  new",
   "  NumberFormatException",
   "  (",
   "  val",
   "  +",
   "  \" is not a valid number.\"",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- NumberFormatException",
   "- (",
   "- val",
   "- +",
   "- \" is not a valid number.\"",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  f",
   "  (",
   "  val",
   "  .",
   "  startsWith",
   "  (",
   "  \"--\"",
   "  )",
   "  )",
   "  {",
   "  /",
   "  this",
   "  is",
   "  protection",
   "  for",
   "  poorness",
   "  in",
   "  java",
   "  .",
   "  lang",
   "  .",
   "  BigDecimal",
   "  .",
   "  /",
   "  it",
   "  accepts",
   "  this",
   "  as",
   "  a",
   "  legal",
   "  value",
   "  ,",
   "  but",
   "  it",
   "  does",
   "  not",
   "  appear"
  ]
 },
 {
  "number": 45,
  "changes_set": [
   "  ublic",
   "  static",
   "  String",
   "  abbreviate",
   "  (",
   "  String",
   "  str",
   "  ,",
   "  int",
   "  lower",
   "  ,",
   "  int",
   "  upper",
   "  ,",
   "  String",
   "  appendT",
   "  /",
   "  if",
   "  the",
   "  lower",
   "  value",
   "  is",
   "  greater",
   "  than",
   "  the",
   "  length",
   "  of",
   "  the",
   "  string",
   "  ,",
   "  /",
   "  set",
   "  to",
   "  the",
   "  length",
   "  of",
   "  the",
   "  stringif",
   "  (",
   "  lower",
   "  >",
   "  str",
   "  .",
   "  length",
   "  (",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- lower",
   "- >",
   "- str",
   "- .",
   "- length",
   "- (",
   "- )",
   "- )",
   "- {",
   "  lower",
   "  =",
   "  str",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "- lower",
   "- =",
   "- str",
   "- .",
   "- length",
   "- (",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  if",
   "  the",
   "  upper",
   "  value",
   "  is",
   "  -",
   "  1",
   "  (",
   "  i",
   "  .",
   "  e",
   "  .",
   "  no",
   "  limit",
   "  )",
   "  or",
   "  is",
   "  greater",
   "  /",
   "  than",
   "  the",
   "  length",
   "  of",
   "  the",
   "  string",
   "  ,",
   "  set",
   "  to",
   "  the",
   "  length",
   "  of",
   "  the",
   "  stringf",
   "  (",
   "  upper",
   "  ==",
   "  -",
   "  1",
   "  ||",
   "  upper",
   "  >",
   "  str",
   "  .",
   "  length",
   "  (",
   "  )",
   "  )",
   "  {"
  ]
 },
 {
  "number": 47,
  "changes_set": [
   "  ublic",
   "  StrBuilder",
   "  appendFixedWidthPadLeft",
   "  (",
   "  Object",
   "  obj",
   "  ,",
   "  int",
   "  width",
   "  ,",
   "  char",
   "  padChar",
   "  )",
   "  {",
   "  f",
   "  (",
   "  width",
   "  >",
   "  0",
   "  )",
   "  {",
   "  nsureCapacity",
   "  (",
   "  size",
   "  +",
   "  width",
   "  )",
   "  ;",
   "  tring",
   "  str",
   "  =",
   "  (",
   "  obj",
   "  ==",
   "  null",
   "  ?",
   "  getNullText",
   "  (",
   "  )",
   "  :",
   "  obj",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  str",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- str",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  str",
   "  =",
   "  \"\"",
   "  ;",
   "- str",
   "- =",
   "- \"\"",
   "- ;",
   "- }",
   "  }",
   "  nt",
   "  strLen",
   "  =",
   "  str",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  strLen",
   "  >=",
   "  width",
   "  )",
   "  {",
   "  tr",
   "  .",
   "  getChars",
   "  (",
   "  strLen",
   "  -",
   "  width",
   "  ,",
   "  strLen",
   "  ,",
   "  buffer",
   "  ,",
   "  size",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 47,
  "changes_set": [
   "  ublic",
   "  StrBuilder",
   "  appendFixedWidthPadRight",
   "  (",
   "  Object",
   "  obj",
   "  ,",
   "  int",
   "  width",
   "  ,",
   "  char",
   "  padChar",
   "  )",
   "  f",
   "  (",
   "  width",
   "  >",
   "  0",
   "  )",
   "  {",
   "  nsureCapacity",
   "  (",
   "  size",
   "  +",
   "  width",
   "  )",
   "  ;",
   "  tring",
   "  str",
   "  =",
   "  (",
   "  obj",
   "  ==",
   "  null",
   "  ?",
   "  getNullText",
   "  (",
   "  )",
   "  :",
   "  obj",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  str",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- str",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  str",
   "  =",
   "  \"\"",
   "  ;",
   "- str",
   "- =",
   "- \"\"",
   "- ;",
   "- }",
   "  }",
   "  nt",
   "  strLen",
   "  =",
   "  str",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  strLen",
   "  >=",
   "  width",
   "  )",
   "  {",
   "  tr",
   "  .",
   "  getChars",
   "  (",
   "  0",
   "  ,",
   "  width",
   "  ,",
   "  buffer",
   "  ,",
   "  size",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 48,
  "changes_set": [
   "  ublic",
   "  EqualsBuilder",
   "  append",
   "  (",
   "  Object",
   "  lhs",
   "  ,",
   "  Object",
   "  rhs",
   "  )",
   "  {",
   "  lass",
   "  lhsClass",
   "  =",
   "  lhs",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  !",
   "  lhsClass",
   "  .",
   "  isArray",
   "  (",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  lhs",
   "  instanceof",
   "  java",
   "  .",
   "  math",
   "  .",
   "  BigDecimal",
   "  )",
   "  {",
   "- if",
   "- (",
   "- lhs",
   "- instanceof",
   "- java",
   "- .",
   "- math",
   "- .",
   "- BigDecimal",
   "- )",
   "- {",
   "- isEquals",
   "- =",
   "- (",
   "- (",
   "- (",
   "- java",
   "- .",
   "- math",
   "- .",
   "- BigDecimal",
   "- )",
   "- lhs",
   "- )",
   "- .",
   "- compareTo",
   "- (",
   "- rhs",
   "- )",
   "- ==",
   "- 0",
   "- )",
   "- ;",
   "  isEquals",
   "  =",
   "  (",
   "  (",
   "  (",
   "  java",
   "  .",
   "  math",
   "  .",
   "  BigDecimal",
   "  )",
   "  lhs",
   "  )",
   "  .",
   "  compareTo",
   "  (",
   "  rhs",
   "  )",
   "  ==",
   "  0",
   "  )",
   "  ;",
   "  }",
   "  else",
   "  {",
   "- }",
   "- else",
   "- {",
   "  /",
   "  The",
   "  simple",
   "  case",
   "  ,",
   "  not",
   "  an",
   "  array",
   "  ,",
   "  just",
   "  test",
   "  the",
   "  elementsEquals",
   "  =",
   "  lhs",
   "  .",
   "  equals",
   "  (",
   "  rhs",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  else",
   "  if",
   "  (",
   "  lhs",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  !=",
   "  rhs",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  )",
   "  {",
   "  /",
   "  Here",
   "  when",
   "  we",
   "  compare",
   "  different",
   "  dimensions",
   "  ,",
   "  for",
   "  example",
   "  :",
   "  a",
   "  boolean",
   "  [",
   "  ]",
   "  [",
   "  ]",
   "  to",
   "  a",
   "  boolean",
   "  [",
   "  ]",
   "  his",
   "  .",
   "  setEquals",
   "  (",
   "  false",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 52,
  "changes_set": [
   "  rivate",
   "  static",
   "  void",
   "  escapeJavaStyleString",
   "  (",
   "  Writer",
   "  out",
   "  ,",
   "  String",
   "  str",
   "  ,",
   "  boolean",
   "  escapeut",
   "  .",
   "  write",
   "  (",
   "  '\\\\'",
   "  )",
   "  ;",
   "  ut",
   "  .",
   "  write",
   "  (",
   "  '\\\\'",
   "  )",
   "  ;",
   "  reak",
   "  ;",
   "  case",
   "  '/'",
   "  :",
   "- case",
   "- '/'",
   "- :",
   "- out",
   "- .",
   "- write",
   "- (",
   "- '\\\\'",
   "- )",
   "- ;",
   "  out",
   "  .",
   "  write",
   "  (",
   "  '\\\\'",
   "  )",
   "  ;",
   "  out",
   "  .",
   "  write",
   "  (",
   "  '/'",
   "  )",
   "  ;",
   "- out",
   "- .",
   "- write",
   "- (",
   "- '/'",
   "- )",
   "- ;",
   "- break",
   "- ;",
   "  break",
   "  ;",
   "  efault",
   "  :",
   "  ut",
   "  .",
   "  write",
   "  (",
   "  ch",
   "  )",
   "  ;",
   "  reak",
   "  ;"
  ]
 },
 {
  "number": 53,
  "changes_set": [
   "  rivate",
   "  static",
   "  void",
   "  modify",
   "  (",
   "  Calendar",
   "  val",
   "  ,",
   "  int",
   "  field",
   "  ,",
   "  boolean",
   "  round",
   "  )",
   "  {",
   "  nt",
   "  millisecs",
   "  =",
   "  val",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  MILLISECOND",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  !",
   "  round",
   "  ||",
   "  millisecs",
   "  <",
   "  500",
   "  )",
   "  {",
   "  ime",
   "  =",
   "  time",
   "  -",
   "  millisecs",
   "  ;",
   "  }",
   "- }",
   "  f",
   "  (",
   "  field",
   "  ==",
   "  Calendar",
   "  .",
   "  SECOND",
   "  )",
   "  {",
   "  one",
   "  =",
   "  true",
   "  ;",
   "+ }",
   "  /",
   "  truncate",
   "  secondsnt",
   "  seconds",
   "  =",
   "  val",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  SECOND",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  !",
   "  done",
   "  &&",
   "  (",
   "  !",
   "  round",
   "  ||",
   "  seconds",
   "  <",
   "  30",
   "  )",
   "  )",
   "  {",
   "  ime",
   "  =",
   "  time",
   "  -",
   "  (",
   "  seconds",
   "  *",
   "  1000L",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  f",
   "  (",
   "  field",
   "  ==",
   "  Calendar",
   "  .",
   "  MINUTE",
   "  )",
   "  {",
   "  one",
   "  =",
   "  true",
   "  ;",
   "+ }",
   "  /",
   "  truncate",
   "  minutes"
  ]
 },
 {
  "number": 46,
  "changes_set": [
   "  eturn",
   "  String",
   "  with",
   "  escaped",
   "  values",
   "  ,",
   "  <",
   "  code",
   "  >",
   "  null",
   "  <",
   "  /",
   "  code",
   "  >",
   "  if",
   "  null",
   "  string",
   "  input",
   "  /",
   "  ublic",
   "  static",
   "  String",
   "  escapeJava",
   "  (",
   "  String",
   "  str",
   "  )",
   "  {",
   "  return",
   "  escapeJavaStyleString",
   "  (",
   "  str",
   "  ,",
   "  false",
   "- ,",
   "- false",
   "  )",
   "  ;",
   "  return",
   "  escapeJavaStyleString",
   "  (",
   "  str",
   "  ,",
   "  false",
   "  ,",
   "  false",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 46,
  "changes_set": [
   "  hrows",
   "  IOException",
   "  if",
   "  error",
   "  occurs",
   "  on",
   "  underlying",
   "  Writer",
   "  /",
   "  ublic",
   "  static",
   "  void",
   "  escapeJava",
   "  (",
   "  Writer",
   "  out",
   "  ,",
   "  String",
   "  str",
   "  )",
   "  throws",
   "  IOException",
   "  {",
   "  escapeJavaStyleString",
   "  (",
   "  out",
   "  ,",
   "  str",
   "  ,",
   "  false",
   "- ,",
   "- false",
   "  )",
   "  ;",
   "  escapeJavaStyleString",
   "  (",
   "  out",
   "  ,",
   "  str",
   "  ,",
   "  false",
   "  ,",
   "  false",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 46,
  "changes_set": [
   "  eturn",
   "  String",
   "  with",
   "  escaped",
   "  values",
   "  ,",
   "  <",
   "  code",
   "  >",
   "  null",
   "  <",
   "  /",
   "  code",
   "  >",
   "  if",
   "  null",
   "  string",
   "  input",
   "  /",
   "  ublic",
   "  static",
   "  String",
   "  escapeJavaScript",
   "  (",
   "  String",
   "  str",
   "  )",
   "  {",
   "  return",
   "  escapeJavaStyleString",
   "  (",
   "  str",
   "  ,",
   "  true",
   "- ,",
   "- true",
   "  )",
   "  ;",
   "  return",
   "  escapeJavaStyleString",
   "  (",
   "  str",
   "  ,",
   "  true",
   "  ,",
   "  true",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 46,
  "changes_set": [
   "  hrows",
   "  IOException",
   "  if",
   "  error",
   "  occurs",
   "  on",
   "  underlying",
   "  Writer",
   "  *",
   "  /",
   "  ublic",
   "  static",
   "  void",
   "  escapeJavaScript",
   "  (",
   "  Writer",
   "  out",
   "  ,",
   "  String",
   "  str",
   "  )",
   "  throws",
   "  IOException",
   "  {",
   "  escapeJavaStyleString",
   "  (",
   "  out",
   "  ,",
   "  str",
   "  ,",
   "  true",
   "- ,",
   "- true",
   "  )",
   "  ;",
   "  escapeJavaStyleString",
   "  (",
   "  out",
   "  ,",
   "  str",
   "  ,",
   "  true",
   "  ,",
   "  true",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 46,
  "changes_set": [
   "  eturn",
   "  the",
   "  escaped",
   "  string",
   "  /",
   "  private",
   "  static",
   "  String",
   "  escapeJavaStyleString",
   "  (",
   "  String",
   "  str",
   "  ,",
   "  boolean",
   "  escapeSingleQuotes",
   "- ,",
   "- boolean",
   "- escapeForwardSlash",
   "  )",
   "  {",
   "  private",
   "  static",
   "  String",
   "  escapeJavaStyleString",
   "  (",
   "  String",
   "  str",
   "  ,",
   "  boolean",
   "  escapeSingleQuotes",
   "  ,",
   "  boolean",
   "  escapeForwardSlash",
   "  )",
   "  {",
   "  f",
   "  (",
   "  str",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  eturn",
   "  null",
   "  ;",
   "  ry",
   "  {",
   "  tringWriter",
   "  writer",
   "  =",
   "  new",
   "  StringWriter",
   "  (",
   "  str",
   "  .",
   "  length",
   "  (",
   "  )",
   "  *",
   "  2",
   "  )",
   "  ;",
   "  escapeJavaStyleString",
   "  (",
   "  writer",
   "  ,",
   "  str",
   "  ,",
   "  escapeSingleQuotes",
   "- ,",
   "- escapeForwardSlash",
   "  )",
   "  ;",
   "  escapeJavaStyleString",
   "  (",
   "  writer",
   "  ,",
   "  str",
   "  ,",
   "  escapeSingleQuotes",
   "  ,",
   "  escapeForwardSlash",
   "  )",
   "  ;",
   "  eturn",
   "  writer",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  ;",
   "  catch",
   "  (",
   "  IOException",
   "  ioe",
   "  )",
   "  {",
   "  /",
   "  this",
   "  should",
   "  never",
   "  ever",
   "  happen",
   "  while",
   "  writing",
   "  to",
   "  a",
   "  StringWriter"
  ]
 },
 {
  "number": 46,
  "changes_set": [
   "  hrows",
   "  IOException",
   "  if",
   "  an",
   "  IOException",
   "  occurs",
   "  /",
   "  private",
   "  static",
   "  void",
   "  escapeJavaStyleString",
   "  (",
   "  Writer",
   "  out",
   "  ,",
   "  String",
   "  str",
   "  ,",
   "  boolean",
   "  escapeSingleQuote",
   "- ,",
   "+ )",
   "+ throws",
   "+ IOException",
   "+ {",
   "  private",
   "  static",
   "  void",
   "  escapeJavaStyleString",
   "  (",
   "  Writer",
   "  out",
   "  ,",
   "  String",
   "  str",
   "  ,",
   "  boolean",
   "  escapeSingleQuote",
   "  ,",
   "  boolean",
   "  escapeForwardSlash",
   "  )",
   "  throws",
   "  IOException",
   "  {",
   "- boolean",
   "- escapeForwardSlash",
   "- )",
   "- throws",
   "- IOException",
   "- {",
   "  f",
   "  (",
   "  out",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"The Writer must not be null\"",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 46,
  "changes_set": [
   "  rivate",
   "  static",
   "  void",
   "  escapeJavaStyleString",
   "  (",
   "  Writer",
   "  out",
   "  ,",
   "  String",
   "  str",
   "  ,",
   "  boolean",
   "  escapeut",
   "  .",
   "  write",
   "  (",
   "  '\\\\'",
   "  )",
   "  ;",
   "  reak",
   "  ;",
   "  ase",
   "  '/'",
   "  :",
   "  if",
   "  (",
   "  escapeForwardSlash",
   "  )",
   "  {",
   "- if",
   "- (",
   "- escapeForwardSlash",
   "- )",
   "- {",
   "  ut",
   "  .",
   "  write",
   "  (",
   "  '\\\\'",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  ut",
   "  .",
   "  write",
   "  (",
   "  '/'",
   "  )",
   "  ;",
   "  reak",
   "  ;",
   "  efault",
   "  :"
  ]
 },
 {
  "number": 50,
  "changes_set": [
   "  ublic",
   "  static",
   "  synchronized",
   "  FastDateFormat",
   "  getDateInstance",
   "  (",
   "  int",
   "  style",
   "  ,",
   "  TimeZone",
   "  tiey",
   "  =",
   "  new",
   "  Pair",
   "  (",
   "  key",
   "  ,",
   "  timeZone",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  locale",
   "- ==",
   "+ !=",
   "  null",
   "  )",
   "  {",
   "+ key",
   "+ =",
   "+ new",
   "+ Pair",
   "+ (",
   "+ key",
   "+ ,",
   "+ locale",
   "+ )",
   "+ ;",
   "  if",
   "  (",
   "  locale",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  locale",
   "  =",
   "  Locale",
   "  .",
   "  getDefault",
   "  (",
   "- )",
   "- ;",
   "- locale",
   "- =",
   "- Locale",
   "- .",
   "- getDefault",
   "- (",
   "- )",
   "- ;",
   "- key",
   "- =",
   "- new",
   "- Pair",
   "- (",
   "- key",
   "- ,",
   "- locale",
   "  )",
   "  ;",
   "  key",
   "  =",
   "  new",
   "  Pair",
   "  (",
   "  key",
   "  ,",
   "  locale",
   "  )",
   "  ;",
   "  astDateFormat",
   "  format",
   "  =",
   "  (",
   "  FastDateFormat",
   "  )",
   "  cDateInstanceCache",
   "  .",
   "  get",
   "  (",
   "  key",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  format",
   "  ==",
   "  null",
   "  )",
   "  {",
   "+ if",
   "+ (",
   "+ locale",
   "+ ==",
   "+ null",
   "+ )",
   "+ {",
   "+ locale",
   "+ =",
   "+ Locale",
   "+ .",
   "+ getDefault",
   "+ (",
   "+ )",
   "+ ;",
   "+ }",
   "  ry",
   "  {",
   "  impleDateFormat",
   "  formatter",
   "  =",
   "  (",
   "  SimpleDateFormat",
   "  )",
   "  DateFormat",
   "  .",
   "  getDateInstance",
   "  (",
   "  style",
   "  ,",
   "  locale",
   "  )",
   "  ;",
   "  tring",
   "  pattern",
   "  =",
   "  formatter",
   "  .",
   "  toPattern",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 50,
  "changes_set": [
   "  ublic",
   "  static",
   "  synchronized",
   "  FastDateFormat",
   "  getDateTimeInstance",
   "  (",
   "  int",
   "  dateStyle",
   "  ,",
   "  intf",
   "  (",
   "  timeZone",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  ey",
   "  =",
   "  new",
   "  Pair",
   "  (",
   "  key",
   "  ,",
   "  timeZone",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  locale",
   "- ==",
   "+ !=",
   "  null",
   "  )",
   "  {",
   "+ key",
   "+ =",
   "+ new",
   "+ Pair",
   "+ (",
   "+ key",
   "+ ,",
   "+ locale",
   "+ )",
   "+ ;",
   "  if",
   "  (",
   "  locale",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  locale",
   "  =",
   "  Locale",
   "  .",
   "  getDefault",
   "  (",
   "- )",
   "- ;",
   "- locale",
   "- =",
   "- Locale",
   "- .",
   "- getDefault",
   "- (",
   "- )",
   "- ;",
   "- key",
   "- =",
   "- new",
   "- Pair",
   "- (",
   "- key",
   "- ,",
   "- locale",
   "  )",
   "  ;",
   "  key",
   "  =",
   "  new",
   "  Pair",
   "  (",
   "  key",
   "  ,",
   "  locale",
   "  )",
   "  ;",
   "  astDateFormat",
   "  format",
   "  =",
   "  (",
   "  FastDateFormat",
   "  )",
   "  cDateTimeInstanceCache",
   "  .",
   "  get",
   "  (",
   "  key",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  format",
   "  ==",
   "  null",
   "  )",
   "  {",
   "+ if",
   "+ (",
   "+ locale",
   "+ ==",
   "+ null",
   "+ )",
   "+ {",
   "+ locale",
   "+ =",
   "+ Locale",
   "+ .",
   "+ getDefault",
   "+ (",
   "+ )",
   "+ ;",
   "+ }",
   "  ry",
   "  {",
   "  impleDateFormat",
   "  formatter",
   "  =",
   "  (",
   "  SimpleDateFormat",
   "  )",
   "  DateFormat",
   "  .",
   "  getDateTimeInstance",
   "  (",
   "  dateStyle",
   "  ,",
   "  timeStyle",
   "  ,",
   "  ocale",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 51,
  "changes_set": [
   "  ublic",
   "  static",
   "  boolean",
   "  toBoolean",
   "  (",
   "  String",
   "  str",
   "  )",
   "  {",
   "  str",
   "  .",
   "  charAt",
   "  (",
   "  1",
   "  )",
   "  ==",
   "  'E'",
   "  ||",
   "  str",
   "  .",
   "  charAt",
   "  (",
   "  1",
   "  )",
   "  ==",
   "  'e'",
   "  )",
   "  &&",
   "  str",
   "  .",
   "  charAt",
   "  (",
   "  2",
   "  )",
   "  ==",
   "  'S'",
   "  ||",
   "  str",
   "  .",
   "  charAt",
   "  (",
   "  2",
   "  )",
   "  ==",
   "  's'",
   "  )",
   "  ;",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "  ase",
   "  4",
   "  :",
   "  {",
   "  har",
   "  ch",
   "  =",
   "  str",
   "  .",
   "  charAt",
   "  (",
   "  0",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 49,
  "changes_set": [
   "  eturn",
   "  a",
   "  new",
   "  reduced",
   "  fraction",
   "  instance",
   "  ,",
   "  or",
   "  this",
   "  if",
   "  no",
   "  simplification",
   "  possible",
   "  /",
   "  ublic",
   "  Fraction",
   "  reduce",
   "  (",
   "  )",
   "  {",
   "  if",
   "  (",
   "  numerator",
   "  ==",
   "  0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- numerator",
   "- ==",
   "- 0",
   "- )",
   "- {",
   "  return",
   "  equals",
   "  (",
   "  ZERO",
   "  )",
   "  ?",
   "  this",
   "  :",
   "  ZERO",
   "  ;",
   "- return",
   "- equals",
   "- (",
   "- ZERO",
   "- )",
   "- ?",
   "- this",
   "- :",
   "- ZERO",
   "- ;",
   "- }",
   "  }",
   "  nt",
   "  gcd",
   "  =",
   "  greatestCommonDivisor",
   "  (",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  numerator",
   "  )",
   "  ,",
   "  denominator",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  gcd",
   "  ==",
   "  1",
   "  )",
   "  {",
   "  eturn",
   "  this",
   "  ;"
  ]
 },
 {
  "number": 54,
  "changes_set": [
   "  ublic",
   "  static",
   "  Locale",
   "  toLocale",
   "  (",
   "  String",
   "  str",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Invalid locale format: \"",
   "  +",
   "  str",
   "  )",
   "  ;",
   "  har",
   "  ch3",
   "  =",
   "  str",
   "  .",
   "  charAt",
   "  (",
   "  3",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  ch3",
   "  ==",
   "  '_'",
   "  )",
   "  {",
   "- if",
   "- (",
   "- ch3",
   "- ==",
   "- '_'",
   "- )",
   "- {",
   "  return",
   "  new",
   "  Locale",
   "  (",
   "  str",
   "  .",
   "  substring",
   "  (",
   "  0",
   "  ,",
   "  2",
   "  )",
   "  ,",
   "  \"\"",
   "  ,",
   "  str",
   "  .",
   "  substring",
   "  (",
   "  4",
   "  )",
   "  )",
   "  ;",
   "- return",
   "- new",
   "- Locale",
   "- (",
   "- str",
   "- .",
   "- substring",
   "- (",
   "- 0",
   "- ,",
   "- 2",
   "- )",
   "- ,",
   "- \"\"",
   "- ,",
   "- str",
   "- .",
   "- substring",
   "- (",
   "- 4",
   "- )",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  har",
   "  ch4",
   "  =",
   "  str",
   "  .",
   "  charAt",
   "  (",
   "  4",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  ch3",
   "  <",
   "  'A'",
   "  ||",
   "  ch3",
   "  >",
   "  'Z'",
   "  ||",
   "  ch4",
   "  <",
   "  'A'",
   "  ||",
   "  ch4",
   "  >",
   "  'Z'",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Invalid locale format: \"",
   "  +",
   "  str",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 57,
  "changes_set": [
   "  eturn",
   "  true",
   "  if",
   "  the",
   "  locale",
   "  is",
   "  a",
   "  known",
   "  locale",
   "  /",
   "  ublic",
   "  static",
   "  boolean",
   "  isAvailableLocale",
   "  (",
   "  Locale",
   "  locale",
   "  )",
   "  {",
   "  return",
   "- availableLocaleList",
   "+ cAvailableLocaleSet",
   "- (",
   "- )",
   "  .",
   "  contains",
   "  (",
   "  locale",
   "  )",
   "  ;",
   "  return",
   "  availableLocaleList",
   "  (",
   "  )",
   "  .",
   "  contains",
   "  (",
   "  locale",
   "  )",
   "  ;",
   "  /",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -"
  ]
 },
 {
  "number": 58,
  "changes_set": [
   "  ublic",
   "  static",
   "  Number",
   "  createNumber",
   "  (",
   "  String",
   "  str",
   "  )",
   "  throws",
   "  NumberFormatException",
   "  {",
   "  ase",
   "  'L'",
   "  :",
   "  f",
   "  (",
   "  dec",
   "  ==",
   "  null",
   "  &",
   "  exp",
   "  ==",
   "  null",
   "  &&",
   "+ isDigits",
   "+ (",
   "+ numeric",
   "+ .",
   "+ substring",
   "+ (",
   "+ 1",
   "+ )",
   "+ )",
   "+ &&",
   "  (",
   "  numeric",
   "  .",
   "  charAt",
   "  (",
   "  0",
   "  )",
   "  ==",
   "  '-'",
   "- &&",
   "+ ||",
   "+ Character",
   "+ .",
   "- isDigits",
   "+ isDigit",
   "  (",
   "  numeric",
   "  .",
   "- substring",
   "+ charAt",
   "  (",
   "- 1",
   "+ 0",
   "  )",
   "- )",
   "- ||",
   "- isDigits",
   "- (",
   "- numeric",
   "  )",
   "  )",
   "  )",
   "  {",
   "  &&",
   "  (",
   "  numeric",
   "  .",
   "  charAt",
   "  (",
   "  0",
   "  )",
   "  ==",
   "  '-'",
   "  &&",
   "  isDigits",
   "  (",
   "  numeric",
   "  .",
   "  substring",
   "  (",
   "  1",
   "  )",
   "  )",
   "  ||",
   "  isDigits",
   "  (",
   "  numeric",
   "  )",
   "  )",
   "  )",
   "  {",
   "  ry",
   "  {",
   "  eturn",
   "  createLong",
   "  (",
   "  numeric",
   "  )",
   "  ;",
   "  catch",
   "  (",
   "  NumberFormatException",
   "  nfe",
   "  )",
   "  {"
  ]
 },
 {
  "number": 56,
  "changes_set": [
   "  ee",
   "  java",
   "  .",
   "  io",
   "  .",
   "  Serializable",
   "  /",
   "  rivate",
   "  static",
   "  final",
   "  long",
   "  serialVersionUID",
   "  =",
   "  1L",
   "  ;",
   "  *",
   "  *",
   "  FULL",
   "  locale",
   "  dependent",
   "  date",
   "  or",
   "  time",
   "  style",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  final",
   "  int",
   "  FULL",
   "  =",
   "  DateFormat",
   "  .",
   "  FULL",
   "  ;",
   "  *",
   "  *",
   "  LONG",
   "  locale",
   "  dependent",
   "  date",
   "  or",
   "  time",
   "  style",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  final",
   "  int",
   "  LONG",
   "  =",
   "  DateFormat",
   "  .",
   "  LONG",
   "  ;",
   "  *",
   "  *",
   "  MEDIUM",
   "  locale",
   "  dependent",
   "  date",
   "  or",
   "  time",
   "  style",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  final",
   "  int",
   "  MEDIUM",
   "  =",
   "  DateFormat",
   "  .",
   "  MEDIUM",
   "  ;",
   "  *",
   "  *",
   "  SHORT",
   "  locale",
   "  dependent",
   "  date",
   "  or",
   "  time",
   "  style",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  final",
   "  int",
   "  SHORT",
   "  =",
   "  DateFormat",
   "  .",
   "  SHORT",
   "  ;",
   "  rivate",
   "  static",
   "  String",
   "  cDefaultPattern",
   "  ;",
   "  rivate",
   "  static",
   "  Map",
   "  cInstanceCache",
   "  =",
   "  new",
   "  HashMap",
   "  (",
   "  7",
   "  )",
   "  ;",
   "  rivate",
   "  static",
   "  Map",
   "  cDateInstanceCache",
   "  =",
   "  new",
   "  HashMap",
   "  (",
   "  7",
   "  )",
   "  ;",
   "  rivate",
   "  static",
   "  Map",
   "  cTimeInstanceCache",
   "  =",
   "  new",
   "  HashMap",
   "  (",
   "  7",
   "  )",
   "  ;",
   "  rivate",
   "  static",
   "  Map",
   "  cDateTimeInstanceCache",
   "  =",
   "  new",
   "  HashMap",
   "  (",
   "  7",
   "  )",
   "  ;",
   "  rivate",
   "  static",
   "  Map",
   "  cTimeZoneDisplayCache",
   "  =",
   "  new",
   "  HashMap",
   "  (",
   "  7",
   "  )",
   "  ;",
   "  *",
   "  *",
   "  The",
   "  pattern",
   "  .",
   "  /",
   "  rivate",
   "  final",
   "  String",
   "  mPattern",
   "  ;",
   "  *",
   "  *",
   "  The",
   "  time",
   "  zone",
   "  .",
   "  /",
   "  rivate",
   "  final",
   "  TimeZone",
   "  mTimeZone",
   "  ;",
   "  *",
   "  *",
   "  Whether",
   "  the",
   "  time",
   "  zone",
   "  overrides",
   "  any",
   "  on",
   "  Calendars",
   "  .",
   "  /",
   "  rivate",
   "  final",
   "  boolean",
   "  mTimeZoneForced",
   "  ;",
   "  *",
   "  *",
   "  The",
   "  locale",
   "  .",
   "  /",
   "  rivate",
   "  final",
   "  Locale",
   "  mLocale",
   "  ;",
   "  *",
   "  *",
   "  Whether",
   "  the",
   "  locale",
   "  overrides",
   "  the",
   "  default",
   "  .",
   "  /",
   "  rivate",
   "  final",
   "  boolean",
   "  mLocaleForced",
   "  ;",
   "  *",
   "  *",
   "  The",
   "  parsed",
   "  rules",
   "  .",
   "  /",
   "+ private",
   "+ Rule",
   "+ [",
   "+ ]",
   "+ mRules",
   "+ ;",
   "  private",
   "  transient",
   "  Rule",
   "  [",
   "  ]",
   "  mRules",
   "  ;",
   "- private",
   "- transient",
   "- Rule",
   "- [",
   "- ]",
   "- mRules",
   "- ;",
   "  *",
   "  *",
   "  The",
   "  estimated",
   "  maximum",
   "  length",
   "  .",
   "  /",
   "  private",
   "- transient",
   "  int",
   "  mMaxLengthEstimate",
   "  ;",
   "  private",
   "  transient",
   "  int",
   "  mMaxLengthEstimate",
   "  ;",
   "  /",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -",
   "  *",
   "  *",
   "  <",
   "  p",
   "  >",
   "  Gets",
   "  a",
   "  formatter",
   "  instance",
   "  using",
   "  the",
   "  default",
   "  pattern",
   "  in",
   "  thedefault",
   "  locale",
   "  .",
   "  <",
   "  /",
   "  p",
   "  >"
  ]
 },
 {
  "number": 56,
  "changes_set": [
   "  ublic",
   "  int",
   "  hashCode",
   "  (",
   "  )",
   "  {",
   "  ublic",
   "  String",
   "  toString",
   "  (",
   "  )",
   "  {",
   "  eturn",
   "  \"FastDateFormat[\"",
   "  +",
   "  mPattern",
   "  +",
   "  \"]\"",
   "  ;",
   "  /",
   "  Serializing",
   "  /",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -",
   "  private",
   "  void",
   "  readObject",
   "  (",
   "  ObjectInputStream",
   "  in",
   "  )",
   "  throws",
   "  IOException",
   "  ,",
   "  ClassNotFoundException",
   "  {",
   "- private",
   "- void",
   "- readObject",
   "- (",
   "- ObjectInputStream",
   "- in",
   "- )",
   "- throws",
   "- IOException",
   "- ,",
   "- ClassNotFoundException",
   "- {",
   "- in",
   "- .",
   "- defaultReadObject",
   "- (",
   "- )",
   "- ;",
   "  in",
   "  .",
   "  defaultReadObject",
   "  (",
   "  )",
   "  ;",
   "  init",
   "  (",
   "  )",
   "  ;",
   "- init",
   "- (",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  Rules",
   "  /",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -",
   "  *",
   "  *",
   "  <",
   "  p",
   "  >",
   "  Inner",
   "  class",
   "  defining",
   "  a",
   "  rule",
   "  .",
   "  <",
   "  /",
   "  p",
   "  >",
   "  /",
   "  rivate",
   "  interface",
   "  Rule",
   "  {",
   "  *",
   "  *",
   "  Returns",
   "  the",
   "  estimated",
   "  lentgh",
   "  of",
   "  the",
   "  result",
   "  ."
  ]
 },
 {
  "number": 64,
  "changes_set": [
   "  hrows",
   "  NullPointerException",
   "  if",
   "  other",
   "  is",
   "  <",
   "  code",
   "  >",
   "  null",
   "  <",
   "  /",
   "  code",
   "  >",
   "  /",
   "  ublic",
   "  int",
   "  compareTo",
   "  (",
   "  Object",
   "  other",
   "  )",
   "  {",
   "  if",
   "  (",
   "  other",
   "  ==",
   "  this",
   "  )",
   "  {",
   "- if",
   "- (",
   "- other",
   "- ==",
   "- this",
   "- )",
   "- {",
   "- return",
   "- 0",
   "- ;",
   "  return",
   "  0",
   "  ;",
   "  }",
   "- }",
   "- if",
   "- (",
   "- other",
   "- .",
   "- getClass",
   "- (",
   "- )",
   "- !=",
   "- this",
   "- .",
   "- getClass",
   "- (",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  other",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  !=",
   "  this",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  other",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  .",
   "  equals",
   "  (",
   "  this",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- other",
   "- .",
   "- getClass",
   "- (",
   "- )",
   "- .",
   "- getName",
   "- (",
   "- )",
   "- .",
   "- equals",
   "- (",
   "- this",
   "- .",
   "- getClass",
   "- (",
   "- )",
   "- .",
   "- getName",
   "- (",
   "- )",
   "- )",
   "- )",
   "- {",
   "- return",
   "- iValue",
   "- -",
   "- getValueInOtherClassLoader",
   "- (",
   "- other",
   "- )",
   "- ;",
   "  return",
   "  iValue",
   "  -",
   "  getValueInOtherClassLoader",
   "  (",
   "  other",
   "  )",
   "  ;",
   "  }",
   "- }",
   "- throw",
   "- new",
   "- ClassCastException",
   "- (",
   "  throw",
   "  new",
   "  ClassCastException",
   "  (",
   "  \"Different enum class '\"",
   "  +",
   "  ClassUtils",
   "  .",
   "  getShortClassName",
   "  (",
   "  other",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  )",
   "  +",
   "  \"'\"",
   "  )",
   "  ;",
   "- \"Different enum class '\"",
   "- +",
   "- ClassUtils",
   "- .",
   "- getShortClassName",
   "- (",
   "- other",
   "- .",
   "- getClass",
   "- (",
   "- )",
   "- )",
   "- +",
   "- \"'\"",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  iValue",
   "  -",
   "  (",
   "  (",
   "  ValuedEnum",
   "  )",
   "  other",
   "  )",
   "  .",
   "  iValue",
   "  ;"
  ]
 },
 {
  "number": 64,
  "changes_set": [
   "  eturn",
   "  the",
   "  value",
   "  /",
   "  private",
   "  int",
   "  getValueInOtherClassLoader",
   "  (",
   "  Object",
   "  other",
   "  )",
   "  {",
   "- private",
   "- int",
   "- getValueInOtherClassLoader",
   "- (",
   "- Object",
   "- other",
   "- )",
   "- {",
   "  try",
   "  {",
   "- try",
   "- {",
   "- Method",
   "- mth",
   "- =",
   "- other",
   "- .",
   "- getClass",
   "- (",
   "- )",
   "- .",
   "- getMethod",
   "- (",
   "- \"getValue\"",
   "- ,",
   "- null",
   "- )",
   "- ;",
   "  Method",
   "  mth",
   "  =",
   "  other",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  .",
   "  getMethod",
   "  (",
   "  \"getValue\"",
   "  ,",
   "  null",
   "  )",
   "  ;",
   "  Integer",
   "  value",
   "  =",
   "  (",
   "  Integer",
   "  )",
   "  mth",
   "  .",
   "  invoke",
   "  (",
   "  other",
   "  ,",
   "  null",
   "  )",
   "  ;",
   "- Integer",
   "- value",
   "- =",
   "- (",
   "- Integer",
   "- )",
   "- mth",
   "- .",
   "- invoke",
   "- (",
   "- other",
   "- ,",
   "- null",
   "- )",
   "- ;",
   "  return",
   "  value",
   "  .",
   "  intValue",
   "  (",
   "  )",
   "  ;",
   "- return",
   "- value",
   "- .",
   "- intValue",
   "- (",
   "- )",
   "- ;",
   "- }",
   "- catch",
   "- (",
   "- NoSuchMethodException",
   "- e",
   "- )",
   "- {",
   "  }",
   "  catch",
   "  (",
   "  NoSuchMethodException",
   "  e",
   "  )",
   "  {",
   "  /",
   "  ignore",
   "  -",
   "  should",
   "  never",
   "  happen",
   "  }",
   "  catch",
   "  (",
   "  IllegalAccessException",
   "  e",
   "  )",
   "  {",
   "- }",
   "- catch",
   "- (",
   "- IllegalAccessException",
   "- e",
   "- )",
   "- {",
   "  /",
   "  ignore",
   "  -",
   "  should",
   "  never",
   "  happen",
   "- }",
   "- catch",
   "- (",
   "- InvocationTargetException",
   "- e",
   "- )",
   "- {",
   "  }",
   "  catch",
   "  (",
   "  InvocationTargetException",
   "  e",
   "  )",
   "  {",
   "  /",
   "  ignore",
   "  -",
   "  should",
   "  never",
   "  happen",
   "  }",
   "- }",
   "  throw",
   "  new",
   "  IllegalStateException",
   "  (",
   "  \"This should not happen\"",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- IllegalStateException",
   "- (",
   "- \"This should not happen\"",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  *",
   "  *",
   "  <",
   "  p",
   "  >",
   "  Human",
   "  readable",
   "  description",
   "  of",
   "  this",
   "  <",
   "  code",
   "  >",
   "  Enum",
   "  <",
   "  /",
   "  code",
   "  >",
   "  item",
   "  .",
   "  <",
   "  /",
   "  p",
   "  >"
  ]
 },
 {
  "number": 55,
  "changes_set": [
   "  ublic",
   "  void",
   "  stop",
   "  (",
   "  )",
   "  {",
   "  f",
   "  (",
   "  this",
   "  .",
   "  runningState",
   "  !=",
   "  STATE_RUNNING",
   "  &&",
   "  this",
   "  .",
   "  runningState",
   "  !=",
   "  STATE_SUSPENDED",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalStateException",
   "  (",
   "  \"Stopwatch is not running. \"",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  this",
   "  .",
   "  runningState",
   "  ==",
   "  STATE_RUNNING",
   "  )",
   "  {",
   "- if",
   "- (",
   "- this",
   "- .",
   "- runningState",
   "- ==",
   "- STATE_RUNNING",
   "- )",
   "- {",
   "  topTime",
   "  =",
   "  System",
   "  .",
   "  currentTimeMillis",
   "  (",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  his",
   "  .",
   "  runningState",
   "  =",
   "  STATE_STOPPED",
   "  ;"
  ]
 },
 {
  "number": 59,
  "changes_set": [
   "  ublic",
   "  StrBuilder",
   "  appendFixedWidthPadRight",
   "  (",
   "  Object",
   "  obj",
   "  ,",
   "  int",
   "  width",
   "  ,",
   "  char",
   "  padChar",
   "  )",
   "  tring",
   "  str",
   "  =",
   "  (",
   "  obj",
   "  ==",
   "  null",
   "  ?",
   "  getNullText",
   "  (",
   "  )",
   "  :",
   "  obj",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  nt",
   "  strLen",
   "  =",
   "  str",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  strLen",
   "  >=",
   "  width",
   "  )",
   "  {",
   "  str",
   "  .",
   "  getChars",
   "  (",
   "  0",
   "  ,",
   "- width",
   "+ strLen",
   "  ,",
   "  buffer",
   "  ,",
   "  size",
   "  )",
   "  ;",
   "  str",
   "  .",
   "  getChars",
   "  (",
   "  0",
   "  ,",
   "  width",
   "  ,",
   "  buffer",
   "  ,",
   "  size",
   "  )",
   "  ;",
   "  else",
   "  {",
   "  nt",
   "  padLen",
   "  =",
   "  width",
   "  -",
   "  strLen",
   "  ;",
   "  tr",
   "  .",
   "  getChars",
   "  (",
   "  0",
   "  ,",
   "  strLen",
   "  ,",
   "  buffer",
   "  ,",
   "  size",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 62,
  "changes_set": [
   "  ublic",
   "  String",
   "  unescape",
   "  (",
   "  String",
   "  str",
   "  )",
   "  {",
   "  else",
   "  {",
   "  ntityValue",
   "  =",
   "  Integer",
   "  .",
   "  parseInt",
   "  (",
   "  entityName",
   "  .",
   "  substring",
   "  (",
   "  1",
   "  )",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  entityValue",
   "  >",
   "  0xFFFF",
   "  )",
   "  {",
   "- if",
   "- (",
   "- entityValue",
   "- >",
   "- 0xFFFF",
   "- )",
   "- {",
   "  entityValue",
   "  =",
   "  -",
   "  1",
   "  ;",
   "- entityValue",
   "- =",
   "- -",
   "- 1",
   "- ;",
   "- }",
   "  }",
   "  catch",
   "  (",
   "  NumberFormatException",
   "  ex",
   "  )",
   "  {",
   "  ntityValue",
   "  =",
   "  -",
   "  1",
   "  ;"
  ]
 },
 {
  "number": 62,
  "changes_set": [
   "  ublic",
   "  void",
   "  unescape",
   "  (",
   "  Writer",
   "  writer",
   "  ,",
   "  String",
   "  string",
   "  )",
   "  throws",
   "  IOException",
   "  {",
   "  ase",
   "  'X'",
   "  :",
   "  ase",
   "  'x'",
   "  :",
   "  {",
   "  ntityValue",
   "  =",
   "  Integer",
   "  .",
   "  parseInt",
   "  (",
   "  entityContent",
   "  .",
   "  substring",
   "  (",
   "  2",
   "  )",
   "  ,",
   "  16",
   "  )",
   "  ;",
   "  break",
   "  ;",
   "- break",
   "- ;",
   "  efault",
   "  :",
   "  {",
   "  ntityValue",
   "  =",
   "  Integer",
   "  .",
   "  parseInt",
   "  (",
   "  entityContent",
   "  .",
   "  substring",
   "  (",
   "  1",
   "  )",
   "  ,",
   "  10",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  entityValue",
   "  >",
   "  0xFFFF",
   "  )",
   "  {",
   "- if",
   "- (",
   "- entityValue",
   "- >",
   "- 0xFFFF",
   "- )",
   "- {",
   "  entityValue",
   "  =",
   "  -",
   "  1",
   "  ;",
   "- entityValue",
   "- =",
   "- -",
   "- 1",
   "- ;",
   "- }",
   "  }",
   "  catch",
   "  (",
   "  NumberFormatException",
   "  e",
   "  )",
   "  {",
   "  entityValue",
   "  =",
   "  -",
   "  1",
   "  ;",
   "- entityValue",
   "- =",
   "- -",
   "- 1",
   "- ;",
   "  else",
   "  {"
  ]
 },
 {
  "number": 60,
  "changes_set": [
   "  ublic",
   "  String",
   "  midString",
   "  (",
   "  int",
   "  index",
   "  ,",
   "  int",
   "  length",
   "  )",
   "  {",
   "  /",
   "  ublic",
   "  boolean",
   "  contains",
   "  (",
   "  char",
   "  ch",
   "  )",
   "  {",
   "  har",
   "  [",
   "  ]",
   "  thisBuf",
   "  =",
   "  buffer",
   "  ;",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "- this",
   "+ thisBuf",
   "  .",
   "- size",
   "+ length",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  this",
   "  .",
   "  size",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  f",
   "  (",
   "  thisBuf",
   "  [",
   "  i",
   "  ]",
   "  ==",
   "  ch",
   "  )",
   "  {",
   "  eturn",
   "  true",
   "  ;"
  ]
 },
 {
  "number": 60,
  "changes_set": [
   "  ublic",
   "  int",
   "  indexOf",
   "  (",
   "  char",
   "  ch",
   "  ,",
   "  int",
   "  startIndex",
   "  )",
   "  {",
   "  eturn",
   "  -",
   "  1",
   "  ;",
   "  har",
   "  [",
   "  ]",
   "  thisBuf",
   "  =",
   "  buffer",
   "  ;",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  startIndex",
   "  ;",
   "  i",
   "  <",
   "- size",
   "+ thisBuf",
   "+ .",
   "+ length",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  startIndex",
   "  ;",
   "  i",
   "  <",
   "  size",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  f",
   "  (",
   "  thisBuf",
   "  [",
   "  i",
   "  ]",
   "  ==",
   "  ch",
   "  )",
   "  {",
   "  eturn",
   "  i",
   "  ;"
  ]
 },
 {
  "number": 61,
  "changes_set": [
   "  ublic",
   "  int",
   "  indexOf",
   "  (",
   "  String",
   "  str",
   "  ,",
   "  int",
   "  startIndex",
   "  )",
   "  {",
   "  eturn",
   "  -",
   "  1",
   "  ;",
   "  har",
   "  [",
   "  ]",
   "  thisBuf",
   "  =",
   "  buffer",
   "  ;",
   "  int",
   "  len",
   "  =",
   "- size",
   "+ thisBuf",
   "+ .",
   "+ length",
   "  -",
   "  strLen",
   "- +",
   "- 1",
   "  ;",
   "  int",
   "  len",
   "  =",
   "  size",
   "  -",
   "  strLen",
   "  +",
   "  1",
   "  ;",
   "  uter",
   "  :",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  startIndex",
   "  ;",
   "  i",
   "  <",
   "  len",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  or",
   "  (",
   "  int",
   "  j",
   "  =",
   "  0",
   "  ;",
   "  j",
   "  <",
   "  strLen",
   "  ;",
   "  j",
   "  ++",
   "  )",
   "  {"
  ]
 },
 {
  "number": 63,
  "changes_set": [
   "  ublic",
   "  static",
   "  String",
   "  formatPeriod",
   "  (",
   "  long",
   "  startMillis",
   "  ,",
   "  long",
   "  endMillis",
   "  ,",
   "  String",
   "  formaays",
   "  -=",
   "  1",
   "  ;",
   "  hile",
   "  (",
   "  days",
   "  <",
   "  0",
   "  )",
   "  {",
   "+ days",
   "+ +=",
   "+ 31",
   "- end",
   "- .",
   "- add",
   "- (",
   "- Calendar",
   "- .",
   "- MONTH",
   "- ,",
   "- -",
   "- 1",
   "- )",
   "  ;",
   "  end",
   "  .",
   "  add",
   "  (",
   "  Calendar",
   "  .",
   "  MONTH",
   "  ,",
   "  -",
   "  1",
   "  )",
   "  ;",
   "  days",
   "  +=",
   "  end",
   "  .",
   "  getActualMaximum",
   "  (",
   "  Calendar",
   "  .",
   "  DAY_OF_MONTH",
   "  )",
   "  ;",
   "- days",
   "- +=",
   "- end",
   "- .",
   "- getActualMaximum",
   "- (",
   "- Calendar",
   "- .",
   "- DAY_OF_MONTH",
   "- )",
   "- ;",
   "  /",
   "  days",
   "  +=",
   "  31",
   "  ;"
  ]
 },
 {
  "number": 63,
  "changes_set": [
   "  tatic",
   "  String",
   "  format",
   "  (",
   "  Token",
   "  [",
   "  ]",
   "  tokens",
   "  ,",
   "  int",
   "  years",
   "  ,",
   "  int",
   "  months",
   "  ,",
   "  int",
   "  days",
   "  ,",
   "  int",
   "  hours",
   "  ,",
   "  eturn",
   "  buffer",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  ;",
   "+ static",
   "+ int",
   "+ reduceAndCorrect",
   "+ (",
   "+ Calendar",
   "+ start",
   "+ ,",
   "+ Calendar",
   "+ end",
   "+ ,",
   "+ int",
   "+ field",
   "+ ,",
   "+ int",
   "+ difference",
   "+ )",
   "+ {",
   "+ end",
   "+ .",
   "+ add",
   "+ (",
   "+ field",
   "+ ,",
   "+ -",
   "+ 1",
   "+ *",
   "+ difference",
   "+ )",
   "+ ;",
   "+ int",
   "+ endValue",
   "+ =",
   "+ end",
   "+ .",
   "+ get",
   "+ (",
   "+ field",
   "+ )",
   "+ ;",
   "+ int",
   "+ startValue",
   "+ =",
   "+ start",
   "+ .",
   "+ get",
   "+ (",
   "+ field",
   "+ )",
   "+ ;",
   "+ if",
   "+ (",
   "+ endValue",
   "+ <",
   "+ startValue",
   "+ )",
   "+ {",
   "+ int",
   "+ newdiff",
   "+ =",
   "+ startValue",
   "+ -",
   "+ endValue",
   "+ ;",
   "+ end",
   "+ .",
   "+ add",
   "+ (",
   "+ field",
   "+ ,",
   "+ newdiff",
   "+ )",
   "+ ;",
   "+ return",
   "+ newdiff",
   "+ ;",
   "+ }",
   "+ else",
   "+ {",
   "+ return",
   "+ 0",
   "+ ;",
   "+ }",
   "+ }",
   "  tatic",
   "  final",
   "  Object",
   "  y",
   "  =",
   "  \"y\"",
   "  ;",
   "  tatic",
   "  final",
   "  Object",
   "  M",
   "  =",
   "  \"M\"",
   "  ;"
  ]
 },
 {
  "number": 65,
  "changes_set": [
   "  rivate",
   "  static",
   "  void",
   "  modify",
   "  (",
   "  Calendar",
   "  val",
   "  ,",
   "  int",
   "  field",
   "  ,",
   "  boolean",
   "  round",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  ArithmeticException",
   "  (",
   "  \"Calendar value too large for accurate calculations\"",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  field",
   "  ==",
   "  Calendar",
   "  .",
   "  MILLISECOND",
   "  )",
   "  {",
   "- if",
   "- (",
   "- field",
   "- ==",
   "- Calendar",
   "- .",
   "- MILLISECOND",
   "- )",
   "- {",
   "  return",
   "  ;",
   "- return",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -",
   "  Fix",
   "  for",
   "  LANG",
   "  -",
   "  59",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  START",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -",
   "  /",
   "  see",
   "  http",
   "  :"
  ]
 },
 {
  "number": 65,
  "changes_set": [
   "  rivate",
   "  static",
   "  void",
   "  modify",
   "  (",
   "  Calendar",
   "  val",
   "  ,",
   "  int",
   "  field",
   "  ,",
   "  boolean",
   "  round",
   "  )",
   "  {",
   "  /",
   "  Manually",
   "  truncate",
   "  milliseconds",
   "  ,",
   "  seconds",
   "  and",
   "  minutes",
   "  ,",
   "  rather",
   "  than",
   "  using",
   "  /",
   "  Calendar",
   "  methods",
   "  .",
   "  Date",
   "  date",
   "  =",
   "  val",
   "  .",
   "  getTime",
   "  (",
   "  )",
   "  ;",
   "+ long",
   "+ time",
   "+ =",
   "- Date",
   "+ date",
   "- date",
   "- =",
   "- val",
   "  .",
   "  getTime",
   "  (",
   "  )",
   "  ;",
   "- long",
   "- time",
   "- =",
   "- date",
   "- .",
   "- getTime",
   "- (",
   "- )",
   "- ;",
   "- long",
   "- time",
   "- =",
   "- date",
   "- .",
   "- getTime",
   "- (",
   "- )",
   "- ;",
   "  boolean",
   "  done",
   "  =",
   "  false",
   "  ;",
   "- boolean",
   "- done",
   "- =",
   "- false",
   "- ;",
   "  /",
   "  truncate",
   "  millisecondsint",
   "- millisecs",
   "- =",
   "- val",
   "- .",
   "- get",
   "- (",
   "- Calendar",
   "- .",
   "- MILLISECOND",
   "- )",
   "- ;",
   "- int",
   "  millisecs",
   "  =",
   "  val",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  MILLISECOND",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  !",
   "  round",
   "  ||",
   "  millisecs",
   "  <",
   "  500",
   "  )",
   "  {",
   "- if",
   "- (",
   "- !",
   "- round",
   "- ||",
   "- millisecs",
   "- <",
   "- 500",
   "- )",
   "- {",
   "- time",
   "- =",
   "- time",
   "- -",
   "- millisecs",
   "- ;",
   "  time",
   "  =",
   "  time",
   "  -",
   "  millisecs",
   "  ;",
   "  if",
   "  (",
   "  field",
   "  ==",
   "  Calendar",
   "  .",
   "  SECOND",
   "  )",
   "  {",
   "+ done",
   "+ =",
   "+ true",
   "+ ;",
   "+ }",
   "+ }",
   "+ /",
   "+ truncate",
   "+ secondsint",
   "+ seconds",
   "+ =",
   "+ val",
   "+ .",
   "+ get",
   "+ (",
   "+ Calendar",
   "+ .",
   "+ SECOND",
   "+ )",
   "+ ;",
   "+ if",
   "+ (",
   "+ !",
   "+ done",
   "+ &&",
   "+ (",
   "+ !",
   "+ round",
   "+ ||",
   "+ seconds",
   "+ <",
   "+ 30",
   "+ )",
   "+ )",
   "+ {",
   "+ time",
   "+ =",
   "+ time",
   "+ -",
   "+ (",
   "+ seconds",
   "+ *",
   "+ 1000L",
   "+ )",
   "+ ;",
   "  if",
   "  (",
   "  field",
   "  ==",
   "  Calendar",
   "  .",
   "- SECOND",
   "+ MINUTE",
   "  )",
   "  {",
   "  done",
   "  =",
   "  true",
   "  ;",
   "- done",
   "- =",
   "- true",
   "- ;",
   "  }",
   "  }",
   "- }",
   "- }",
   "  /",
   "  truncate",
   "- secondsint",
   "- seconds",
   "+ minutesint",
   "+ minutes",
   "  =",
   "  val",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "+ MINUTE",
   "- SECOND",
   "- )",
   "- ;",
   "- int",
   "- seconds",
   "- =",
   "- val",
   "- .",
   "- get",
   "- (",
   "- Calendar",
   "- .",
   "- SECOND",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  !",
   "  done",
   "  &&",
   "  (",
   "  !",
   "  round",
   "  ||",
   "- seconds",
   "+ minutes",
   "  <",
   "  30",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- !",
   "- done",
   "- &&",
   "- (",
   "- !",
   "- round",
   "- ||",
   "- seconds",
   "- <",
   "- 30",
   "- )",
   "- )",
   "- {",
   "- time",
   "- =",
   "- time",
   "- -",
   "- (",
   "- seconds",
   "- *",
   "- 1000L",
   "- )",
   "- ;",
   "- time",
   "- =",
   "- time",
   "- -",
   "- (",
   "- seconds",
   "- *",
   "- 1000L",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- field",
   "- ==",
   "- Calendar",
   "- .",
   "- MINUTE",
   "- )",
   "- {",
   "- if",
   "- (",
   "- field",
   "- ==",
   "- Calendar",
   "- .",
   "- MINUTE",
   "- )",
   "- {",
   "- done",
   "- =",
   "- true",
   "- ;",
   "- done",
   "- =",
   "- true",
   "- ;",
   "- }",
   "- }",
   "- }",
   "- }",
   "- /",
   "- truncate",
   "- minutesint",
   "- minutes",
   "- =",
   "- val",
   "- .",
   "- get",
   "- (",
   "- Calendar",
   "- .",
   "- MINUTE",
   "- )",
   "- ;",
   "- int",
   "- minutes",
   "- =",
   "- val",
   "- .",
   "- get",
   "- (",
   "- Calendar",
   "- .",
   "- MINUTE",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- !",
   "- done",
   "- &&",
   "- (",
   "- !",
   "- round",
   "- ||",
   "- minutes",
   "- <",
   "- 30",
   "- )",
   "- )",
   "- {",
   "- if",
   "- (",
   "- !",
   "- done",
   "- &&",
   "- (",
   "- !",
   "- round",
   "- ||",
   "- minutes",
   "- <",
   "- 30",
   "- )",
   "- )",
   "- {",
   "  time",
   "  =",
   "  time",
   "  -",
   "  (",
   "  minutes",
   "  *",
   "  60000L",
   "  )",
   "  ;",
   "- time",
   "- =",
   "- time",
   "- -",
   "- (",
   "- minutes",
   "- *",
   "- 60000L",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  reset",
   "  timeif",
   "  (",
   "  date",
   "  .",
   "  getTime",
   "  (",
   "  )",
   "  !=",
   "  time",
   "  )",
   "  {",
   "- if",
   "- (",
   "- date",
   "- .",
   "- getTime",
   "- (",
   "- )",
   "- !=",
   "- time",
   "- )",
   "- {",
   "  date",
   "  .",
   "  setTime",
   "  (",
   "  time",
   "  )",
   "  ;",
   "- date",
   "+ val",
   "  .",
   "  setTime",
   "  (",
   "- time",
   "- )",
   "- ;",
   "- val",
   "- .",
   "- setTime",
   "- (",
   "  date",
   "  )",
   "  ;",
   "- val",
   "- .",
   "- setTime",
   "- (",
   "- date",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -",
   "  Fix",
   "  for",
   "  LANG",
   "  -",
   "  59",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -",
   "  END",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  oolean",
   "  roundUp",
   "  =",
   "  false",
   "  ;"
  ]
 },
 {
  "number": 65,
  "changes_set": [
   "  rivate",
   "  static",
   "  void",
   "  modify",
   "  (",
   "  Calendar",
   "  val",
   "  ,",
   "  int",
   "  field",
   "  ,",
   "  boolean",
   "  round",
   "  )",
   "  {",
   "  oundUp",
   "  =",
   "  offset",
   "  >",
   "  (",
   "  (",
   "  max",
   "  -",
   "  min",
   "  )",
   "  /",
   "  2",
   "  )",
   "  ;",
   "  /",
   "  We",
   "  need",
   "  to",
   "  remove",
   "  this",
   "  fieldif",
   "  (",
   "  offset",
   "  !=",
   "  0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- offset",
   "- !=",
   "- 0",
   "- )",
   "- {",
   "  al",
   "  .",
   "  set",
   "  (",
   "  fields",
   "  [",
   "  i",
   "  ]",
   "  [",
   "  0",
   "  ]",
   "  ,",
   "  val",
   "  .",
   "  get",
   "  (",
   "  fields",
   "  [",
   "  i",
   "  ]",
   "  [",
   "  0",
   "  ]",
   "  )",
   "  -",
   "  offset",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"The field \"",
   "  +",
   "  field",
   "  +",
   "  \" is not supported\"",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 2,
  "changes_set": [
   "  ode",
   "  n",
   "  *",
   "  m",
   "  /",
   "  N",
   "  }",
   "  .",
   "  /",
   "  ublic",
   "  double",
   "  getNumericalMean",
   "  (",
   "  )",
   "  {",
   "  return",
   "+ (",
   "+ double",
   "+ )",
   "+ (",
   "  getSampleSize",
   "  (",
   "  )",
   "  *",
   "- (",
   "  getNumberOfSuccesses",
   "  (",
   "+ )",
   "  )",
   "  /",
   "  (",
   "  double",
   "  )",
   "  getPopulationSize",
   "  (",
   "- )",
   "  )",
   "  ;",
   "  return",
   "  getSampleSize",
   "  (",
   "  )",
   "  *",
   "  (",
   "  getNumberOfSuccesses",
   "  (",
   "  )",
   "  /",
   "  (",
   "  double",
   "  )",
   "  getPopulationSize",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 1,
  "changes_set": [
   "  rivate",
   "  BigFraction",
   "  (",
   "  final",
   "  double",
   "  value",
   "  ,",
   "  final",
   "  double",
   "  epsilon",
   "  ,",
   "  f",
   "  (",
   "  (",
   "  p2",
   "  >",
   "  overflow",
   "  )",
   "  ||",
   "  (",
   "  q2",
   "  >",
   "  overflow",
   "  )",
   "  )",
   "  {",
   "  /",
   "  in",
   "  maxDenominator",
   "  mode",
   "  ,",
   "  if",
   "  the",
   "  last",
   "  fraction",
   "  was",
   "  very",
   "  close",
   "  to",
   "  the",
   "  actual",
   "  value",
   "  /",
   "  q2",
   "  may",
   "  overflow",
   "  in",
   "  the",
   "  next",
   "  iteration",
   "  ;",
   "  in",
   "  this",
   "  case",
   "  return",
   "  the",
   "  last",
   "  one",
   "  .",
   "  if",
   "  (",
   "  epsilon",
   "  ==",
   "  0.0",
   "  &&",
   "  FastMath",
   "  .",
   "  abs",
   "  (",
   "  q1",
   "  )",
   "  <",
   "  maxDenominator",
   "  )",
   "  {",
   "- if",
   "- (",
   "- epsilon",
   "- ==",
   "- 0.0",
   "- &&",
   "- FastMath",
   "- .",
   "- abs",
   "- (",
   "- q1",
   "- )",
   "- <",
   "- maxDenominator",
   "- )",
   "- {",
   "  break",
   "  ;",
   "- break",
   "- ;",
   "- }",
   "  }",
   "  hrow",
   "  new",
   "  FractionConversionException",
   "  (",
   "  value",
   "  ,",
   "  p2",
   "  ,",
   "  q2",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 1,
  "changes_set": [
   "  rivate",
   "  Fraction",
   "  (",
   "  double",
   "  value",
   "  ,",
   "  double",
   "  epsilon",
   "  ,",
   "  int",
   "  maxDenominator",
   "  ,",
   "  int",
   "  maxIteratf",
   "  (",
   "  (",
   "  FastMath",
   "  .",
   "  abs",
   "  (",
   "  p2",
   "  )",
   "  >",
   "  overflow",
   "  )",
   "  ||",
   "  (",
   "  FastMath",
   "  .",
   "  abs",
   "  (",
   "  q2",
   "  )",
   "  >",
   "  overflow",
   "  )",
   "  )",
   "  {",
   "  /",
   "  in",
   "  maxDenominator",
   "  mode",
   "  ,",
   "  if",
   "  the",
   "  last",
   "  fraction",
   "  was",
   "  very",
   "  close",
   "  to",
   "  the",
   "  actual",
   "  value",
   "  /",
   "  q2",
   "  may",
   "  overflow",
   "  in",
   "  the",
   "  next",
   "  iteration",
   "  ;",
   "  in",
   "  this",
   "  case",
   "  return",
   "  the",
   "  last",
   "  one",
   "  .",
   "  if",
   "  (",
   "  epsilon",
   "  ==",
   "  0.0",
   "  &&",
   "  FastMath",
   "  .",
   "  abs",
   "  (",
   "  q1",
   "  )",
   "  <",
   "  maxDenominator",
   "  )",
   "  {",
   "- if",
   "- (",
   "- epsilon",
   "- ==",
   "- 0.0",
   "- &&",
   "- FastMath",
   "- .",
   "- abs",
   "- (",
   "- q1",
   "- )",
   "- <",
   "- maxDenominator",
   "- )",
   "- {",
   "  break",
   "  ;",
   "- break",
   "- ;",
   "- }",
   "  }",
   "  hrow",
   "  new",
   "  FractionConversionException",
   "  (",
   "  value",
   "  ,",
   "  p2",
   "  ,",
   "  q2",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 3,
  "changes_set": [
   "  ublic",
   "  static",
   "  double",
   "  linearCombination",
   "  (",
   "  final",
   "  double",
   "  [",
   "  ]",
   "  a",
   "  ,",
   "  final",
   "  double",
   "  [",
   "  ]",
   "  b",
   "  )",
   "  hrow",
   "  new",
   "  DimensionMismatchException",
   "  (",
   "  len",
   "  ,",
   "  b",
   "  .",
   "  length",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  len",
   "  ==",
   "  1",
   "  )",
   "  {",
   "- if",
   "- (",
   "- len",
   "- ==",
   "- 1",
   "- )",
   "- {",
   "  /",
   "  Revert",
   "  to",
   "  scalar",
   "  multiplication",
   "  .",
   "  return",
   "  a",
   "  [",
   "  0",
   "  ]",
   "  *",
   "  b",
   "  [",
   "  0",
   "  ]",
   "  ;",
   "- return",
   "- a",
   "- [",
   "- 0",
   "- ]",
   "- *",
   "- b",
   "- [",
   "- 0",
   "- ]",
   "- ;",
   "- }",
   "  }",
   "  inal",
   "  double",
   "  [",
   "  ]",
   "  prodHigh",
   "  =",
   "  new",
   "  double",
   "  [",
   "  len",
   "  ]",
   "  ;",
   "  ouble",
   "  prodLowSum",
   "  =",
   "  0",
   "  ;"
  ]
 },
 {
  "number": 5,
  "changes_set": [
   "  ublic",
   "  Complex",
   "  reciprocal",
   "  (",
   "  )",
   "  {",
   "  f",
   "  (",
   "  real",
   "  ==",
   "  0.0",
   "  &&",
   "  imaginary",
   "  ==",
   "  0.0",
   "  )",
   "  {",
   "  return",
   "- INF",
   "+ NaN",
   "  ;",
   "  return",
   "  INF",
   "  ;",
   "  f",
   "  (",
   "  isInfinite",
   "  )",
   "  {"
  ]
 },
 {
  "number": 8,
  "changes_set": [
   "  ode",
   "  sampleSize",
   "  }",
   "  is",
   "  notpositive",
   "  .",
   "  /",
   "  public",
   "- Object",
   "+ T",
   "  [",
   "  ]",
   "  sample",
   "  (",
   "  int",
   "  sampleSize",
   "  )",
   "  throws",
   "  NotStrictlyPositiveException",
   "  {",
   "  public",
   "  Object",
   "  [",
   "  ]",
   "  sample",
   "  (",
   "  int",
   "  sampleSize",
   "  )",
   "  throws",
   "  NotStrictlyPositiveException",
   "  {",
   "  f",
   "  (",
   "  sampleSize",
   "  <=",
   "  0",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  NotStrictlyPositiveException",
   "  (",
   "  LocalizedFormats",
   "  .",
   "  NUMBER_OF_SAMPLES",
   "  ,",
   "  ampleSize",
   "  )",
   "  ;",
   "  final",
   "- Object",
   "+ T",
   "  [",
   "  ]",
   "  out",
   "  =",
   "- new",
   "- Object",
   "+ (",
   "+ T",
   "  [",
   "+ ]",
   "+ )",
   "+ java",
   "+ .",
   "+ lang",
   "+ .",
   "+ reflect",
   "+ .",
   "+ Array",
   "+ .",
   "+ newInstance",
   "+ (",
   "+ singletons",
   "+ .",
   "+ get",
   "+ (",
   "+ 0",
   "+ )",
   "+ .",
   "+ getClass",
   "+ (",
   "+ )",
   "+ ,",
   "  sampleSize",
   "- ]",
   "+ )",
   "  ;",
   "  final",
   "  Object",
   "  [",
   "  ]",
   "  out",
   "  =",
   "  new",
   "  Object",
   "  [",
   "  sampleSize",
   "  ]",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  sampleSize",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  ut",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  sample",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 11,
  "changes_set": [
   "  ublic",
   "  double",
   "  density",
   "  (",
   "  final",
   "  double",
   "  [",
   "  ]",
   "  vals",
   "  )",
   "  throws",
   "  DimensionMismatchException",
   "  {",
   "  hrow",
   "  new",
   "  DimensionMismatchException",
   "  (",
   "  vals",
   "  .",
   "  length",
   "  ,",
   "  dim",
   "  )",
   "  ;",
   "  return",
   "  FastMath",
   "  .",
   "  pow",
   "  (",
   "  2",
   "  *",
   "  FastMath",
   "  .",
   "  PI",
   "  ,",
   "  -",
   "- 0.5",
   "- *",
   "  dim",
   "+ /",
   "+ 2",
   "  )",
   "  *",
   "  return",
   "  FastMath",
   "  .",
   "  pow",
   "  (",
   "  2",
   "  *",
   "  FastMath",
   "  .",
   "  PI",
   "  ,",
   "  -",
   "  0.5",
   "  *",
   "  dim",
   "  )",
   "  *",
   "  astMath",
   "  .",
   "  pow",
   "  (",
   "  covarianceMatrixDeterminant",
   "  ,",
   "  -",
   "  0.5",
   "  )",
   "  *",
   "  etExponentTerm",
   "  (",
   "  vals",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  rotected",
   "  BaseOptimizer",
   "  (",
   "  ConvergenceChecker",
   "  <",
   "  PAIR",
   "  >",
   "  checker",
   "  )",
   "  {",
   "  his",
   "  .",
   "  checker",
   "  =",
   "  checker",
   "  ;",
   "  valuations",
   "  =",
   "  new",
   "  Incrementor",
   "  (",
   "  0",
   "  ,",
   "  new",
   "  MaxEvalCallback",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  iterations",
   "  =",
   "  new",
   "  Incrementor",
   "  (",
   "+ 0",
   "- Integer",
   "- .",
   "- MAX_VALUE",
   "  ,",
   "  new",
   "  MaxIterCallback",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  iterations",
   "  =",
   "  new",
   "  Incrementor",
   "  (",
   "  Integer",
   "  .",
   "  MAX_VALUE",
   "  ,",
   "  new",
   "  MaxIterCallback",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  rotected",
   "  PointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  {",
   "  ointValuePair",
   "  current",
   "  =",
   "  null",
   "+ ;",
   "+ int",
   "+ iter",
   "+ =",
   "+ 0",
   "  ;",
   "  nt",
   "  maxEval",
   "  =",
   "  getMaxEvaluations",
   "  (",
   "  )",
   "  ;",
   "  hile",
   "  (",
   "  true",
   "  )",
   "  {",
   "+ ++",
   "+ iter",
   "- incrementIterationCount",
   "- (",
   "- )",
   "  ;",
   "  incrementIterationCount",
   "  (",
   "  )",
   "  ;",
   "  inal",
   "  double",
   "  objective",
   "  =",
   "  computeObjectiveValue",
   "  (",
   "  point",
   "  )",
   "  ;",
   "  ointValuePair",
   "  previous",
   "  =",
   "  current",
   "  ;",
   "  urrent",
   "  =",
   "  new",
   "  PointValuePair",
   "  (",
   "  point",
   "  ,",
   "  objective",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  previous",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  if",
   "  (",
   "  checker",
   "  .",
   "  converged",
   "  (",
   "+ iter",
   "- getIterations",
   "- (",
   "- )",
   "  ,",
   "  previous",
   "  ,",
   "  current",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  checker",
   "  .",
   "  converged",
   "  (",
   "  getIterations",
   "  (",
   "  )",
   "  ,",
   "  previous",
   "  ,",
   "  current",
   "  )",
   "  )",
   "  {",
   "  /",
   "  We",
   "  have",
   "  found",
   "  an",
   "  optimum",
   "  .",
   "  eturn",
   "  current",
   "  ;"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  rotected",
   "  PointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  {",
   "  teepestDescent",
   "  =",
   "  newSteepestDescent",
   "  ;",
   "  /",
   "  Compute",
   "  conjugate",
   "  search",
   "  direction",
   "  .",
   "  if",
   "  (",
   "+ iter",
   "- getIterations",
   "- (",
   "- )",
   "  %",
   "  n",
   "  ==",
   "  0",
   "  ||",
   "  if",
   "  (",
   "  getIterations",
   "  (",
   "  )",
   "  %",
   "  n",
   "  ==",
   "  0",
   "  ||",
   "  eta",
   "  <",
   "  0",
   "  )",
   "  {",
   "  /",
   "  Break",
   "  conjugation",
   "  :",
   "  reset",
   "  search",
   "  direction",
   "  .",
   "  earchDirection",
   "  =",
   "  steepestDescent",
   "  .",
   "  clone",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  rotected",
   "  PointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  {",
   "  enerationLoop",
   "  :",
   "  or",
   "  (",
   "  iterations",
   "  =",
   "  1",
   "  ;",
   "  iterations",
   "  <=",
   "  maxIterations",
   "  ;",
   "  iterations",
   "  ++",
   "  )",
   "  {",
   "  incrementIterationCount",
   "  (",
   "  )",
   "  ;",
   "- incrementIterationCount",
   "- (",
   "- )",
   "- ;",
   "  /",
   "  Generate",
   "  and",
   "  evaluate",
   "  lambda",
   "  offspringinal",
   "  RealMatrix",
   "  arz",
   "  =",
   "  randn1",
   "  (",
   "  dimension",
   "  ,",
   "  lambda",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  rotected",
   "  PointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  {",
   "  ouble",
   "  [",
   "  ]",
   "  x",
   "  =",
   "  guess",
   "  ;",
   "  ouble",
   "  fVal",
   "  =",
   "  computeObjectiveValue",
   "  (",
   "  x",
   "  )",
   "  ;",
   "  ouble",
   "  [",
   "  ]",
   "  x1",
   "  =",
   "  x",
   "  .",
   "  clone",
   "  (",
   "  )",
   "  ;",
   "+ int",
   "+ iter",
   "+ =",
   "+ 0",
   "+ ;",
   "  hile",
   "  (",
   "  true",
   "  )",
   "  {",
   "+ ++",
   "+ iter",
   "- incrementIterationCount",
   "- (",
   "- )",
   "  ;",
   "  incrementIterationCount",
   "  (",
   "  )",
   "  ;",
   "  ouble",
   "  fX",
   "  =",
   "  fVal",
   "  ;",
   "  ouble",
   "  fX2",
   "  =",
   "  0",
   "  ;"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  ublic",
   "  int",
   "  compare",
   "  (",
   "  final",
   "  PointValuePair",
   "  o1",
   "  ,",
   "  nt",
   "  iteration",
   "  =",
   "  0",
   "  ;",
   "  inal",
   "  ConvergenceChecker",
   "  <",
   "  PointValuePair",
   "  >",
   "  checker",
   "  =",
   "  getConvergenceChecker",
   "  (",
   "  )",
   "  ;",
   "  hile",
   "  (",
   "  true",
   "  )",
   "  {",
   "  if",
   "  (",
   "+ iteration",
   "- getIterations",
   "- (",
   "- )",
   "  >",
   "  0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  getIterations",
   "  (",
   "  )",
   "  >",
   "  0",
   "  )",
   "  {",
   "  oolean",
   "  converged",
   "  =",
   "  true",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  simplex",
   "  .",
   "  getSize",
   "  (",
   "  )",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  ointValuePair",
   "  prev",
   "  =",
   "  previous",
   "  [",
   "  i",
   "  ]",
   "  ;"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  ublic",
   "  int",
   "  compare",
   "  (",
   "  final",
   "  PointValuePair",
   "  o1",
   "  ,",
   "  revious",
   "  =",
   "  simplex",
   "  .",
   "  getPoints",
   "  (",
   "  )",
   "  ;",
   "  implex",
   "  .",
   "  iterate",
   "  (",
   "  evalFunc",
   "  ,",
   "  comparator",
   "  )",
   "  ;",
   "+ ++",
   "+ iteration",
   "- incrementIterationCount",
   "- (",
   "- )",
   "  ;",
   "  incrementIterationCount",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  ublic",
   "  PointVectorValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  {",
   "  /",
   "  iterate",
   "  until",
   "  convergence",
   "  is",
   "  reachedointVectorValuePair",
   "  current",
   "  =",
   "  null",
   "  ;",
   "+ int",
   "+ iter",
   "+ =",
   "+ 0",
   "+ ;",
   "  or",
   "  (",
   "  boolean",
   "  converged",
   "  =",
   "  false",
   "  ;",
   "  !",
   "  converged",
   "  ;",
   "  )",
   "  {",
   "+ ++",
   "+ iter",
   "- incrementIterationCount",
   "- (",
   "- )",
   "  ;",
   "  incrementIterationCount",
   "  (",
   "  )",
   "  ;",
   "  /",
   "  evaluate",
   "  the",
   "  objective",
   "  function",
   "  and",
   "  its",
   "  jacobianointVectorValuePair",
   "  previous",
   "  =",
   "  current",
   "  ;"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  ublic",
   "  PointVectorValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  {",
   "  /",
   "  Check",
   "  convergence",
   "  .",
   "  f",
   "  (",
   "  previous",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  converged",
   "  =",
   "  checker",
   "  .",
   "  converged",
   "  (",
   "+ iter",
   "- getIterations",
   "- (",
   "- )",
   "  ,",
   "  previous",
   "  ,",
   "  current",
   "  )",
   "  ;",
   "  converged",
   "  =",
   "  checker",
   "  .",
   "  converged",
   "  (",
   "  getIterations",
   "  (",
   "  )",
   "  ,",
   "  previous",
   "  ,",
   "  current",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  converged",
   "  )",
   "  {",
   "  etCost",
   "  (",
   "  computeCost",
   "  (",
   "  currentResiduals",
   "  )",
   "  )",
   "  ;",
   "  eturn",
   "  current",
   "  ;"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  rotected",
   "  PointVectorValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  {",
   "  /",
   "  Outer",
   "  loop",
   "  .",
   "  mPar",
   "  =",
   "  0",
   "  ;",
   "  oolean",
   "  firstIteration",
   "  =",
   "  true",
   "  ;",
   "+ int",
   "+ iter",
   "+ =",
   "+ 0",
   "+ ;",
   "  inal",
   "  ConvergenceChecker",
   "  <",
   "  PointVectorValuePair",
   "  >",
   "  checker",
   "  =",
   "  getConvergenceChecker",
   "  (",
   "  )",
   "  ;",
   "  hile",
   "  (",
   "  true",
   "  )",
   "  {",
   "+ ++",
   "+ iter",
   "- incrementIterationCount",
   "- (",
   "- )",
   "  ;",
   "  incrementIterationCount",
   "  (",
   "  )",
   "  ;",
   "  inal",
   "  PointVectorValuePair",
   "  previous",
   "  =",
   "  current",
   "  ;",
   "  /",
   "  QR",
   "  decomposition",
   "  of",
   "  the",
   "  jacobian",
   "  matrix"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  rotected",
   "  PointVectorValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  {",
   "  /",
   "  tests",
   "  for",
   "  convergence",
   "  .",
   "  f",
   "  (",
   "  checker",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  /",
   "  we",
   "  use",
   "  the",
   "  vectorial",
   "  convergence",
   "  checkerif",
   "  (",
   "  checker",
   "  .",
   "  converged",
   "  (",
   "+ iter",
   "- getIterations",
   "- (",
   "- )",
   "  ,",
   "  previous",
   "  ,",
   "  current",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  checker",
   "  .",
   "  converged",
   "  (",
   "  getIterations",
   "  (",
   "  )",
   "  ,",
   "  previous",
   "  ,",
   "  current",
   "  )",
   "  )",
   "  {",
   "  etCost",
   "  (",
   "  currentCost",
   "  )",
   "  ;",
   "  eturn",
   "  current",
   "  ;"
  ]
 },
 {
  "number": 10,
  "changes_set": [
   "  ublic",
   "  void",
   "  atan2",
   "  (",
   "  final",
   "  double",
   "  [",
   "  ]",
   "  y",
   "  ,",
   "  final",
   "  int",
   "  yOffset",
   "  ,",
   "  /",
   "  fix",
   "  value",
   "  to",
   "  take",
   "  special",
   "  cases",
   "  (",
   "  +",
   "  0",
   "  /",
   "  +",
   "  0",
   "  ,",
   "  +",
   "  0",
   "  /",
   "  -",
   "  0",
   "  ,",
   "  -",
   "  0",
   "  /",
   "  +",
   "  0",
   "  ,",
   "  -",
   "  0",
   "  /",
   "  -",
   "  0",
   "  ,",
   "  +",
   "  /",
   "  -",
   "  infinity",
   "  )",
   "  correctlyresult",
   "  [",
   "  resultOffset",
   "  ]",
   "  =",
   "  FastMath",
   "  .",
   "  atan2",
   "  (",
   "  y",
   "  [",
   "  yOffset",
   "  ]",
   "  ,",
   "  x",
   "  [",
   "  xOffset",
   "  ]",
   "  )",
   "  ;",
   "- result",
   "- [",
   "- resultOffset",
   "- ]",
   "- =",
   "- FastMath",
   "- .",
   "- atan2",
   "- (",
   "- y",
   "- [",
   "- yOffset",
   "- ]",
   "- ,",
   "- x",
   "- [",
   "- xOffset",
   "- ]",
   "- )",
   "- ;"
  ]
 },
 {
  "number": 7,
  "changes_set": [
   "  ublic",
   "  int",
   "  compare",
   "  (",
   "  EventState",
   "  es0",
   "  ,",
   "  EventState",
   "  es1",
   "  )",
   "  {",
   "  inal",
   "  double",
   "  [",
   "  ]",
   "  eventY",
   "  =",
   "  interpolator",
   "  .",
   "  getInterpolatedState",
   "  (",
   "  )",
   "  .",
   "  clone",
   "  (",
   "  )",
   "  ;",
   "  /",
   "  advance",
   "  all",
   "  event",
   "  states",
   "  to",
   "  current",
   "- timefor",
   "+ timecurrentEvent",
   "+ .",
   "+ stepAccepted",
   "  (",
   "+ eventT",
   "+ ,",
   "+ eventY",
   "- final",
   "- EventState",
   "- state",
   "- :",
   "- eventsStates",
   "  )",
   "- {",
   "+ ;",
   "+ isLastStep",
   "+ =",
   "+ currentEvent",
   "+ .",
   "+ stop",
   "+ (",
   "+ )",
   "+ ;",
   "  for",
   "  (",
   "  final",
   "  EventState",
   "  state",
   "  :",
   "  eventsStates",
   "  )",
   "  {",
   "- state",
   "- .",
   "- stepAccepted",
   "- (",
   "- eventT",
   "- ,",
   "- eventY",
   "- )",
   "- ;",
   "  state",
   "  .",
   "  stepAccepted",
   "  (",
   "  eventT",
   "  ,",
   "  eventY",
   "  )",
   "  ;",
   "  isLastStep",
   "  =",
   "  isLastStep",
   "  ||",
   "  state",
   "  .",
   "  stop",
   "  (",
   "  )",
   "  ;",
   "- isLastStep",
   "- =",
   "- isLastStep",
   "- ||",
   "- state",
   "- .",
   "- stop",
   "- (",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  handle",
   "  the",
   "  first",
   "  part",
   "  of",
   "  the",
   "  step",
   "  ,",
   "  up",
   "  to",
   "  the",
   "  eventor",
   "  (",
   "  final",
   "  StepHandler",
   "  handler",
   "  :",
   "  stepHandlers",
   "  )",
   "  {"
  ]
 },
 {
  "number": 7,
  "changes_set": [
   "  ublic",
   "  int",
   "  compare",
   "  (",
   "  EventState",
   "  es0",
   "  ,",
   "  EventState",
   "  es1",
   "  )",
   "  {",
   "  f",
   "  (",
   "  isLastStep",
   "  )",
   "  {",
   "  /",
   "  the",
   "  event",
   "  asked",
   "  to",
   "  stop",
   "  integrationystem",
   "  .",
   "  arraycopy",
   "  (",
   "  eventY",
   "  ,",
   "  0",
   "  ,",
   "  y",
   "  ,",
   "  0",
   "  ,",
   "  y",
   "  .",
   "  length",
   "  )",
   "  ;",
   "+ for",
   "+ (",
   "+ final",
   "+ EventState",
   "+ remaining",
   "+ :",
   "+ occuringEvents",
   "+ )",
   "+ {",
   "+ remaining",
   "+ .",
   "+ stepAccepted",
   "+ (",
   "+ eventT",
   "+ ,",
   "+ eventY",
   "+ )",
   "+ ;",
   "+ }",
   "  eturn",
   "  eventT",
   "  ;",
   "  boolean",
   "  needReset",
   "  =",
   "- false",
   "+ currentEvent",
   "+ .",
   "+ reset",
   "+ (",
   "+ eventT",
   "+ ,",
   "+ eventY",
   "+ )",
   "  ;",
   "  boolean",
   "  needReset",
   "  =",
   "  false",
   "  ;",
   "- for",
   "- (",
   "- final",
   "- EventState",
   "- state",
   "- :",
   "- eventsStates",
   "- )",
   "- {",
   "  for",
   "  (",
   "  final",
   "  EventState",
   "  state",
   "  :",
   "  eventsStates",
   "  )",
   "  {",
   "  needReset",
   "  =",
   "  needReset",
   "  ||",
   "  state",
   "  .",
   "  reset",
   "  (",
   "  eventT",
   "  ,",
   "  eventY",
   "  )",
   "  ;",
   "- needReset",
   "- =",
   "- needReset",
   "- ||",
   "- state",
   "- .",
   "- reset",
   "- (",
   "- eventT",
   "- ,",
   "- eventY",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  f",
   "  (",
   "  needReset",
   "  )",
   "  {",
   "  /",
   "  some",
   "  event",
   "  handler",
   "  has",
   "  triggered",
   "  changes",
   "  that",
   "  /",
   "  invalidate",
   "  the",
   "  derivatives",
   "  ,",
   "  we",
   "  need",
   "  to",
   "  recompute",
   "  themystem",
   "  .",
   "  arraycopy",
   "  (",
   "  eventY",
   "  ,",
   "  0",
   "  ,",
   "  y",
   "  ,",
   "  0",
   "  ,",
   "  y",
   "  .",
   "  length",
   "  )",
   "  ;",
   "  omputeDerivatives",
   "  (",
   "  eventT",
   "  ,",
   "  y",
   "  ,",
   "  yDot",
   "  )",
   "  ;",
   "  esetOccurred",
   "  =",
   "  true",
   "  ;",
   "+ for",
   "+ (",
   "+ final",
   "+ EventState",
   "+ remaining",
   "+ :",
   "+ occuringEvents",
   "+ )",
   "+ {",
   "+ remaining",
   "+ .",
   "+ stepAccepted",
   "+ (",
   "+ eventT",
   "+ ,",
   "+ eventY",
   "+ )",
   "+ ;",
   "+ }",
   "  eturn",
   "  eventT",
   "  ;"
  ]
 },
 {
  "number": 12,
  "changes_set": [
   "  /",
   "  ackage",
   "  org",
   "  .",
   "  apache",
   "  .",
   "  commons",
   "  .",
   "  math3",
   "  .",
   "  random",
   "- ;",
   "- import",
   "- java",
   "- .",
   "- io",
   "- .",
   "- Serializable",
   "  ;",
   "  import",
   "  java",
   "  .",
   "  io",
   "  .",
   "  Serializable",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  apache",
   "  .",
   "  commons",
   "  .",
   "  math3",
   "  .",
   "  exception",
   "  .",
   "  NotStrictlyPositiveException",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  apache",
   "  .",
   "  commons",
   "  .",
   "  math3",
   "  .",
   "  util",
   "  .",
   "  FastMath",
   "  ;"
  ]
 },
 {
  "number": 12,
  "changes_set": [
   "  ince",
   "  2.0",
   "  /",
   "  ublic",
   "  abstract",
   "  class",
   "  BitsStreamGeneratorimplements",
   "  RandomGenerator",
   "- ,",
   "+ {",
   "  implements",
   "  RandomGenerator",
   "  ,",
   "- Serializable",
   "- {",
   "  Serializable",
   "  {",
   "  *",
   "  *",
   "  Serializable",
   "  version",
   "  identifier",
   "  *",
   "  /",
   "- private",
   "- static",
   "- final",
   "- long",
   "- serialVersionUID",
   "- =",
   "- 20130104L",
   "- ;",
   "  private",
   "  static",
   "  final",
   "  long",
   "  serialVersionUID",
   "  =",
   "  20130104L",
   "  ;",
   "  *",
   "  *",
   "  Next",
   "  gaussian",
   "  .",
   "  *",
   "  /",
   "  rivate",
   "  double",
   "  nextGaussian",
   "  ;"
  ]
 },
 {
  "number": 9,
  "changes_set": [
   "  eturn",
   "  a",
   "  new",
   "  instance",
   "  ,",
   "  with",
   "  reversed",
   "  direction",
   "  /",
   "  ublic",
   "  Line",
   "  revert",
   "  (",
   "  )",
   "  {",
   "  final",
   "  Line",
   "  reverted",
   "  =",
   "  new",
   "  Line",
   "  (",
   "- this",
   "+ zero",
   "+ ,",
   "+ zero",
   "+ .",
   "+ subtract",
   "+ (",
   "+ direction",
   "+ )",
   "  )",
   "  ;",
   "  final",
   "  Line",
   "  reverted",
   "  =",
   "  new",
   "  Line",
   "  (",
   "  this",
   "  )",
   "  ;",
   "  reverted",
   "  .",
   "  direction",
   "  =",
   "  reverted",
   "  .",
   "  direction",
   "  .",
   "  negate",
   "  (",
   "  )",
   "  ;",
   "- reverted",
   "- .",
   "- direction",
   "- =",
   "- reverted",
   "- .",
   "- direction",
   "- .",
   "- negate",
   "- (",
   "- )",
   "- ;",
   "  eturn",
   "  reverted",
   "  ;"
  ]
 },
 {
  "number": 4,
  "changes_set": [
   "  ublic",
   "  Vector3D",
   "  intersection",
   "  (",
   "  final",
   "  SubLine",
   "  subLine",
   "  ,",
   "  final",
   "  boolean",
   "  includeEndPoin",
   "  /",
   "  compute",
   "  the",
   "  intersection",
   "  on",
   "  infinite",
   "  lineector3D",
   "  v1D",
   "  =",
   "  line",
   "  .",
   "  intersection",
   "  (",
   "  subLine",
   "  .",
   "  line",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  v1D",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- v1D",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  return",
   "  null",
   "  ;",
   "- return",
   "- null",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  check",
   "  location",
   "  of",
   "  point",
   "  with",
   "  respect",
   "  to",
   "  first",
   "  sub",
   "  -",
   "  lineocation",
   "  loc1",
   "  =",
   "  remainingRegion",
   "  .",
   "  checkPoint",
   "  (",
   "  line",
   "  .",
   "  toSubSpace",
   "  (",
   "  v1D",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 4,
  "changes_set": [
   "  ublic",
   "  Vector2D",
   "  intersection",
   "  (",
   "  final",
   "  SubLine",
   "  subLine",
   "  ,",
   "  final",
   "  boolean",
   "  includeEndPoin",
   "  /",
   "  compute",
   "  the",
   "  intersection",
   "  on",
   "  infinite",
   "  lineector2D",
   "  v2D",
   "  =",
   "  line1",
   "  .",
   "  intersection",
   "  (",
   "  line2",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  v2D",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- v2D",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  return",
   "  null",
   "  ;",
   "- return",
   "- null",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  check",
   "  location",
   "  of",
   "  point",
   "  with",
   "  respect",
   "  to",
   "  first",
   "  sub",
   "  -",
   "  lineocation",
   "  loc1",
   "  =",
   "  getRemainingRegion",
   "  (",
   "  )",
   "  .",
   "  checkPoint",
   "  (",
   "  line1",
   "  .",
   "  toSubSpace",
   "  (",
   "  v2D",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 13,
  "changes_set": [
   "  eturn",
   "  the",
   "  square",
   "  -",
   "  root",
   "  of",
   "  the",
   "  weight",
   "  matrix",
   "  .",
   "  /",
   "  rivate",
   "  RealMatrix",
   "  squareRoot",
   "  (",
   "  RealMatrix",
   "  m",
   "  )",
   "  {",
   "  if",
   "  (",
   "  m",
   "  instanceof",
   "  DiagonalMatrix",
   "  )",
   "  {",
   "- if",
   "- (",
   "- m",
   "- instanceof",
   "- DiagonalMatrix",
   "- )",
   "- {",
   "- final",
   "- int",
   "- dim",
   "- =",
   "- m",
   "- .",
   "- getRowDimension",
   "- (",
   "- )",
   "- ;",
   "  final",
   "  int",
   "  dim",
   "  =",
   "  m",
   "  .",
   "  getRowDimension",
   "  (",
   "  )",
   "  ;",
   "  final",
   "  RealMatrix",
   "  sqrtM",
   "  =",
   "  new",
   "  DiagonalMatrix",
   "  (",
   "  dim",
   "  )",
   "  ;",
   "- final",
   "- RealMatrix",
   "- sqrtM",
   "- =",
   "- new",
   "- DiagonalMatrix",
   "- (",
   "- dim",
   "- )",
   "- ;",
   "- for",
   "- (",
   "- int",
   "- i",
   "- =",
   "- 0",
   "- ;",
   "- i",
   "- <",
   "- dim",
   "- ;",
   "- i",
   "- ++",
   "- )",
   "- {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  dim",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  sqrtM",
   "  .",
   "  setEntry",
   "  (",
   "  i",
   "  ,",
   "  i",
   "  ,",
   "  FastMath",
   "  .",
   "  sqrt",
   "  (",
   "  m",
   "  .",
   "  getEntry",
   "  (",
   "  i",
   "  ,",
   "  i",
   "  )",
   "  )",
   "  )",
   "  ;",
   "- sqrtM",
   "- .",
   "- setEntry",
   "- (",
   "- i",
   "- ,",
   "- i",
   "- ,",
   "- FastMath",
   "- .",
   "- sqrt",
   "- (",
   "- m",
   "- .",
   "- getEntry",
   "- (",
   "- i",
   "- ,",
   "- i",
   "- )",
   "- )",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  return",
   "  sqrtM",
   "  ;",
   "- return",
   "- sqrtM",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  inal",
   "  EigenDecomposition",
   "  dec",
   "  =",
   "  new",
   "  EigenDecomposition",
   "  (",
   "  m",
   "  )",
   "  ;",
   "  eturn",
   "  dec",
   "  .",
   "  getSquareRoot",
   "  (",
   "  )",
   "  ;",
   "  }",
   "- }"
  ]
 },
 {
  "number": 14,
  "changes_set": [
   "  /",
   "  ublic",
   "  Weight",
   "  (",
   "  double",
   "  [",
   "  ]",
   "  weight",
   "  )",
   "  {",
   "  inal",
   "  int",
   "  dim",
   "  =",
   "  weight",
   "  .",
   "  length",
   "  ;",
   "  weightMatrix",
   "  =",
   "- new",
   "- DiagonalMatrix",
   "+ org",
   "+ .",
   "+ apache",
   "+ .",
   "+ commons",
   "+ .",
   "+ math3",
   "+ .",
   "+ linear",
   "+ .",
   "+ MatrixUtils",
   "+ .",
   "+ createRealMatrix",
   "  (",
   "- weight",
   "+ dim",
   "+ ,",
   "+ dim",
   "  )",
   "  ;",
   "+ for",
   "+ (",
   "+ int",
   "+ i",
   "+ =",
   "+ 0",
   "+ ;",
   "+ i",
   "+ <",
   "+ dim",
   "+ ;",
   "+ i",
   "+ ++",
   "+ )",
   "+ {",
   "+ weightMatrix",
   "+ .",
   "+ setEntry",
   "+ (",
   "+ i",
   "+ ,",
   "+ i",
   "+ ,",
   "+ weight",
   "+ [",
   "+ i",
   "+ ]",
   "+ )",
   "+ ;",
   "+ }",
   "  weightMatrix",
   "  =",
   "  new",
   "  DiagonalMatrix",
   "  (",
   "  weight",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 14,
  "changes_set": [
   "  eturn",
   "  the",
   "  square",
   "  -",
   "  root",
   "  of",
   "  the",
   "  weight",
   "  matrix",
   "  .",
   "  /",
   "  rivate",
   "  RealMatrix",
   "  squareRoot",
   "  (",
   "  RealMatrix",
   "  m",
   "  )",
   "  {",
   "  if",
   "  (",
   "  m",
   "  instanceof",
   "  DiagonalMatrix",
   "  )",
   "  {",
   "- if",
   "- (",
   "- m",
   "- instanceof",
   "- DiagonalMatrix",
   "- )",
   "- {",
   "- final",
   "- int",
   "- dim",
   "- =",
   "- m",
   "- .",
   "- getRowDimension",
   "- (",
   "- )",
   "- ;",
   "  final",
   "  int",
   "  dim",
   "  =",
   "  m",
   "  .",
   "  getRowDimension",
   "  (",
   "  )",
   "  ;",
   "  final",
   "  RealMatrix",
   "  sqrtM",
   "  =",
   "  new",
   "  DiagonalMatrix",
   "  (",
   "  dim",
   "  )",
   "  ;",
   "- final",
   "- RealMatrix",
   "- sqrtM",
   "- =",
   "- new",
   "- DiagonalMatrix",
   "- (",
   "- dim",
   "- )",
   "- ;",
   "- for",
   "- (",
   "- int",
   "- i",
   "- =",
   "- 0",
   "- ;",
   "- i",
   "- <",
   "- dim",
   "- ;",
   "- i",
   "- ++",
   "- )",
   "- {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  dim",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  sqrtM",
   "  .",
   "  setEntry",
   "  (",
   "  i",
   "  ,",
   "  i",
   "  ,",
   "  FastMath",
   "  .",
   "  sqrt",
   "  (",
   "  m",
   "  .",
   "  getEntry",
   "  (",
   "  i",
   "  ,",
   "  i",
   "  )",
   "  )",
   "  )",
   "  ;",
   "- sqrtM",
   "- .",
   "- setEntry",
   "- (",
   "- i",
   "- ,",
   "- i",
   "- ,",
   "- FastMath",
   "- .",
   "- sqrt",
   "- (",
   "- m",
   "- .",
   "- getEntry",
   "- (",
   "- i",
   "- ,",
   "- i",
   "- )",
   "- )",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  return",
   "  sqrtM",
   "  ;",
   "- return",
   "- sqrtM",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  inal",
   "  EigenDecomposition",
   "  dec",
   "  =",
   "  new",
   "  EigenDecomposition",
   "  (",
   "  m",
   "  )",
   "  ;",
   "  eturn",
   "  dec",
   "  .",
   "  getSquareRoot",
   "  (",
   "  )",
   "  ;",
   "  }",
   "- }"
  ]
 },
 {
  "number": 15,
  "changes_set": [
   "  *",
   "  *",
   "  2",
   "  ^",
   "  52",
   "  -",
   "  double",
   "  numbers",
   "  this",
   "  large",
   "  must",
   "  be",
   "  integral",
   "  (",
   "  no",
   "  fraction",
   "  )",
   "  or",
   "  NaN",
   "  or",
   "  Infinite",
   "  *",
   "  /",
   "  rivate",
   "  static",
   "  final",
   "  double",
   "  TWO_POWER_52",
   "  =",
   "  4503599627370496.0",
   "  ;",
   "  *",
   "  *",
   "  2",
   "  ^",
   "  53",
   "  -",
   "  double",
   "  numbers",
   "  this",
   "  large",
   "  must",
   "  be",
   "  even",
   "  .",
   "  *",
   "  /",
   "  private",
   "  static",
   "  final",
   "  double",
   "  TWO_POWER_53",
   "  =",
   "  2",
   "  *",
   "  TWO_POWER_52",
   "  ;",
   "- private",
   "- static",
   "- final",
   "- double",
   "- TWO_POWER_53",
   "- =",
   "- 2",
   "- *",
   "- TWO_POWER_52",
   "- ;",
   "  *",
   "  *",
   "  Constant",
   "  :",
   "  {"
  ]
 },
 {
  "number": 15,
  "changes_set": [
   "  ublic",
   "  static",
   "  double",
   "  pow",
   "  (",
   "  double",
   "  x",
   "  ,",
   "  double",
   "  y",
   "  )",
   "  {",
   "  *",
   "  Handle",
   "  special",
   "  case",
   "  x",
   "  <",
   "  0",
   "  *",
   "  /",
   "  f",
   "  (",
   "  x",
   "  <",
   "  0",
   "  )",
   "  {",
   "  /",
   "  y",
   "  is",
   "  an",
   "  even",
   "  integer",
   "  in",
   "  this",
   "  caseif",
   "  (",
   "  y",
   "  >=",
   "- TWO_POWER_53",
   "+ TWO_POWER_52",
   "  ||",
   "  y",
   "  <=",
   "  -",
   "- TWO_POWER_53",
   "+ TWO_POWER_52",
   "  )",
   "  {",
   "  if",
   "  (",
   "  y",
   "  >=",
   "  TWO_POWER_53",
   "  ||",
   "  y",
   "  <=",
   "  -",
   "  TWO_POWER_53",
   "  )",
   "  {",
   "  eturn",
   "  pow",
   "  (",
   "  -",
   "  x",
   "  ,",
   "  y",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 17,
  "changes_set": [
   "  eturn",
   "  product",
   "  of",
   "  this",
   "  and",
   "  x",
   "  /",
   "  ublic",
   "  Dfp",
   "  multiply",
   "  (",
   "  final",
   "  int",
   "  x",
   "  )",
   "  {",
   "  if",
   "  (",
   "  x",
   "  >=",
   "  0",
   "  &&",
   "  x",
   "  <",
   "  RADIX",
   "  )",
   "  {",
   "- if",
   "- (",
   "- x",
   "- >=",
   "- 0",
   "- &&",
   "- x",
   "- <",
   "- RADIX",
   "- )",
   "- {",
   "  eturn",
   "  multiplyFast",
   "  (",
   "  x",
   "  )",
   "  ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  return",
   "  multiply",
   "  (",
   "  newInstance",
   "  (",
   "  x",
   "  )",
   "  )",
   "  ;",
   "- return",
   "- multiply",
   "- (",
   "- newInstance",
   "- (",
   "- x",
   "- )",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  *",
   "  *",
   "  Multiply",
   "  this",
   "  by",
   "  a",
   "  single",
   "  digit",
   "  0",
   "  &",
   "  lt",
   "  ;",
   "  =",
   "  x",
   "  &",
   "  lt",
   "  ;",
   "  radix",
   "  ."
  ]
 },
 {
  "number": 22,
  "changes_set": [
   "  nheritDoc",
   "  }",
   "  *",
   "  /",
   "  ublic",
   "  boolean",
   "  isSupportLowerBoundInclusive",
   "  (",
   "  )",
   "  {",
   "  return",
   "- false",
   "+ true",
   "  ;",
   "  return",
   "  false",
   "  ;",
   "  *",
   "  *",
   "  {"
  ]
 },
 {
  "number": 22,
  "changes_set": [
   "  nheritDoc",
   "  }",
   "  *",
   "  /",
   "  ublic",
   "  boolean",
   "  isSupportUpperBoundInclusive",
   "  (",
   "  )",
   "  {",
   "  return",
   "- true",
   "+ false",
   "  ;",
   "  return",
   "  true",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 16,
  "changes_set": [
   "  alue",
   "  }",
   "  *",
   "  /",
   "- private",
   "- static",
   "- final",
   "- double",
   "- LOG_MAX_VALUE",
   "- =",
   "- StrictMath",
   "- .",
   "- log",
   "- (",
   "- Double",
   "- .",
   "- MAX_VALUE",
   "- )",
   "- ;",
   "  private",
   "  static",
   "  final",
   "  double",
   "  LOG_MAX_VALUE",
   "  =",
   "  StrictMath",
   "  .",
   "  log",
   "  (",
   "  Double",
   "  .",
   "  MAX_VALUE",
   "  )",
   "  ;",
   "  *",
   "  *",
   "  Archimede",
   "  constant",
   "  PI",
   "  ,",
   "  ratio",
   "  of",
   "  circle",
   "  circumference",
   "  to",
   "  diameter",
   "  .",
   "  *",
   "  /",
   "  ublic",
   "  static",
   "  final",
   "  double",
   "  PI",
   "  =",
   "  105414357.0",
   "  /",
   "  33554432.0",
   "  +",
   "  1.984187159361080883e-9",
   "  ;"
  ]
 },
 {
  "number": 16,
  "changes_set": [
   "  ublic",
   "  static",
   "  double",
   "  cosh",
   "  (",
   "  double",
   "  x",
   "  )",
   "  {",
   "  /",
   "  exp",
   "  (",
   "  -",
   "  z",
   "  )",
   "  can",
   "  be",
   "  ignored",
   "  in",
   "  comparison",
   "  with",
   "  exp",
   "  (",
   "  z",
   "  )",
   "  f",
   "  (",
   "  x",
   "  >",
   "  20",
   "  )",
   "  {",
   "  if",
   "  (",
   "  x",
   "  >=",
   "  LOG_MAX_VALUE",
   "  )",
   "  {",
   "- if",
   "- (",
   "- x",
   "- >=",
   "- LOG_MAX_VALUE",
   "- )",
   "- {",
   "  /",
   "  Avoid",
   "  overflow",
   "  (",
   "  MATH",
   "  -",
   "  905",
   "  )",
   "  .",
   "  final",
   "  double",
   "  t",
   "  =",
   "  exp",
   "  (",
   "  0.5",
   "  *",
   "  x",
   "  )",
   "  ;",
   "- final",
   "- double",
   "- t",
   "- =",
   "- exp",
   "- (",
   "- 0.5",
   "- *",
   "- x",
   "- )",
   "- ;",
   "- return",
   "- (",
   "- 0.5",
   "- *",
   "- t",
   "- )",
   "- *",
   "- t",
   "- ;",
   "  return",
   "  (",
   "  0.5",
   "  *",
   "  t",
   "  )",
   "  *",
   "  t",
   "  ;",
   "  }",
   "  else",
   "  {",
   "- }",
   "- else",
   "- {",
   "  eturn",
   "  0.5",
   "  *",
   "  exp",
   "  (",
   "  x",
   "  )",
   "  ;",
   "- }",
   "- else",
   "  if",
   "  (",
   "  x",
   "  <",
   "  -",
   "  20",
   "  )",
   "  {",
   "  }",
   "  else",
   "  if",
   "  (",
   "  x",
   "  <",
   "  -",
   "  20",
   "- )",
   "- {",
   "- if",
   "- (",
   "- x",
   "- <=",
   "- -",
   "- LOG_MAX_VALUE",
   "  )",
   "  {",
   "  if",
   "  (",
   "  x",
   "  <=",
   "  -",
   "  LOG_MAX_VALUE",
   "  )",
   "  {",
   "  /",
   "  Avoid",
   "  overflow",
   "  (",
   "  MATH",
   "  -",
   "  905",
   "  )",
   "  .",
   "  final",
   "  double",
   "  t",
   "  =",
   "  exp",
   "  (",
   "  -",
   "  0.5",
   "  *",
   "  x",
   "  )",
   "  ;",
   "- final",
   "- double",
   "- t",
   "- =",
   "- exp",
   "- (",
   "- -",
   "- 0.5",
   "- *",
   "- x",
   "- )",
   "- ;",
   "  return",
   "  (",
   "  0.5",
   "  *",
   "  t",
   "  )",
   "  *",
   "  t",
   "  ;",
   "- return",
   "- (",
   "- 0.5",
   "- *",
   "- t",
   "- )",
   "- *",
   "- t",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  eturn",
   "  0.5",
   "  *",
   "  exp",
   "  (",
   "  -",
   "  x",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  inal",
   "  double",
   "  hiPrec",
   "  [",
   "  ]",
   "  =",
   "  new",
   "  double",
   "  [",
   "  2",
   "  ]",
   "  ;"
  ]
 },
 {
  "number": 16,
  "changes_set": [
   "  ublic",
   "  static",
   "  double",
   "  sinh",
   "  (",
   "  double",
   "  x",
   "  )",
   "  {",
   "  /",
   "  exp",
   "  (",
   "  -",
   "  z",
   "  )",
   "  can",
   "  be",
   "  ignored",
   "  in",
   "  comparison",
   "  with",
   "  exp",
   "  (",
   "  z",
   "  )",
   "  f",
   "  (",
   "  x",
   "  >",
   "  20",
   "  )",
   "  {",
   "  if",
   "  (",
   "  x",
   "  >=",
   "  LOG_MAX_VALUE",
   "  )",
   "  {",
   "- if",
   "- (",
   "- x",
   "- >=",
   "- LOG_MAX_VALUE",
   "- )",
   "- {",
   "  /",
   "  Avoid",
   "  overflow",
   "  (",
   "  MATH",
   "  -",
   "  905",
   "  )",
   "  .",
   "  final",
   "  double",
   "  t",
   "  =",
   "  exp",
   "  (",
   "  0.5",
   "  *",
   "  x",
   "  )",
   "  ;",
   "- final",
   "- double",
   "- t",
   "- =",
   "- exp",
   "- (",
   "- 0.5",
   "- *",
   "- x",
   "- )",
   "- ;",
   "- return",
   "- (",
   "- 0.5",
   "- *",
   "- t",
   "- )",
   "- *",
   "- t",
   "- ;",
   "  return",
   "  (",
   "  0.5",
   "  *",
   "  t",
   "  )",
   "  *",
   "  t",
   "  ;",
   "  }",
   "  else",
   "  {",
   "- }",
   "- else",
   "- {",
   "  eturn",
   "  0.5",
   "  *",
   "  exp",
   "  (",
   "  x",
   "  )",
   "  ;",
   "- }",
   "- else",
   "  if",
   "  (",
   "  x",
   "  <",
   "  -",
   "  20",
   "  )",
   "  {",
   "  }",
   "  else",
   "  if",
   "  (",
   "  x",
   "  <",
   "  -",
   "  20",
   "- )",
   "- {",
   "- if",
   "- (",
   "- x",
   "- <=",
   "- -",
   "- LOG_MAX_VALUE",
   "  )",
   "  {",
   "  if",
   "  (",
   "  x",
   "  <=",
   "  -",
   "  LOG_MAX_VALUE",
   "  )",
   "  {",
   "  /",
   "  Avoid",
   "  overflow",
   "  (",
   "  MATH",
   "  -",
   "  905",
   "  )",
   "  .",
   "  final",
   "  double",
   "  t",
   "  =",
   "  exp",
   "  (",
   "  -",
   "  0.5",
   "  *",
   "  x",
   "  )",
   "  ;",
   "- final",
   "- double",
   "- t",
   "- =",
   "- exp",
   "- (",
   "- -",
   "- 0.5",
   "- *",
   "- x",
   "- )",
   "- ;",
   "  return",
   "  (",
   "  -",
   "  0.5",
   "  *",
   "  t",
   "  )",
   "  *",
   "  t",
   "  ;",
   "- return",
   "- (",
   "- -",
   "- 0.5",
   "- *",
   "- t",
   "- )",
   "- *",
   "- t",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  eturn",
   "  -",
   "  0.5",
   "  *",
   "  exp",
   "  (",
   "  -",
   "  x",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  f",
   "  (",
   "  x",
   "  ==",
   "  0",
   "  )",
   "  {"
  ]
 },
 {
  "number": 18,
  "changes_set": [
   "  ublic",
   "  FitnessFunction",
   "  (",
   "  )",
   "  {",
   "  ouble",
   "  [",
   "  ]",
   "  res",
   "  =",
   "  new",
   "  double",
   "  [",
   "  x",
   "  .",
   "  length",
   "  ]",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  x",
   "  .",
   "  length",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  ouble",
   "  diff",
   "  =",
   "  boundaries",
   "  [",
   "  1",
   "  ]",
   "  [",
   "  i",
   "  ]",
   "  -",
   "  boundaries",
   "  [",
   "  0",
   "  ]",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  res",
   "  [",
   "  i",
   "  ]",
   "  =",
   "+ (",
   "  x",
   "  [",
   "  i",
   "  ]",
   "+ -",
   "+ boundaries",
   "+ [",
   "+ 0",
   "+ ]",
   "+ [",
   "+ i",
   "+ ]",
   "+ )",
   "  /",
   "  diff",
   "  ;",
   "  res",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  x",
   "  [",
   "  i",
   "  ]",
   "  /",
   "  diff",
   "  ;",
   "  eturn",
   "  res",
   "  ;"
  ]
 },
 {
  "number": 18,
  "changes_set": [
   "  ublic",
   "  FitnessFunction",
   "  (",
   "  )",
   "  {",
   "  ouble",
   "  [",
   "  ]",
   "  res",
   "  =",
   "  new",
   "  double",
   "  [",
   "  x",
   "  .",
   "  length",
   "  ]",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  x",
   "  .",
   "  length",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  ouble",
   "  diff",
   "  =",
   "  boundaries",
   "  [",
   "  1",
   "  ]",
   "  [",
   "  i",
   "  ]",
   "  -",
   "  boundaries",
   "  [",
   "  0",
   "  ]",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  res",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  diff",
   "  *",
   "  x",
   "  [",
   "  i",
   "  ]",
   "+ +",
   "+ boundaries",
   "+ [",
   "+ 0",
   "+ ]",
   "+ [",
   "+ i",
   "+ ]",
   "  ;",
   "  res",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  diff",
   "  *",
   "  x",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  eturn",
   "  res",
   "  ;"
  ]
 },
 {
  "number": 18,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  isFeasible",
   "  (",
   "  final",
   "  double",
   "  [",
   "  ]",
   "  x",
   "  )",
   "  {",
   "  eturn",
   "  true",
   "  ;",
   "  final",
   "  double",
   "  [",
   "  ]",
   "  bLoEnc",
   "  =",
   "  encode",
   "  (",
   "  boundaries",
   "  [",
   "  0",
   "- ]",
   "- )",
   "- ;",
   "- final",
   "- double",
   "- [",
   "- ]",
   "- bLoEnc",
   "- =",
   "- encode",
   "- (",
   "- boundaries",
   "- [",
   "- 0",
   "- ]",
   "- )",
   "- ;",
   "- final",
   "- double",
   "- [",
   "- ]",
   "- bHiEnc",
   "- =",
   "- encode",
   "- (",
   "- boundaries",
   "- [",
   "- 1",
   "  ]",
   "  )",
   "  ;",
   "  final",
   "  double",
   "  [",
   "  ]",
   "  bHiEnc",
   "  =",
   "  encode",
   "  (",
   "  boundaries",
   "  [",
   "  1",
   "  ]",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  x",
   "  .",
   "  length",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  if",
   "  (",
   "  x",
   "  [",
   "  i",
   "  ]",
   "  <",
   "+ 0",
   "- bLoEnc",
   "- [",
   "- i",
   "- ]",
   "  )",
   "  {",
   "  if",
   "  (",
   "  x",
   "  [",
   "  i",
   "  ]",
   "  <",
   "  bLoEnc",
   "  [",
   "  i",
   "  ]",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;",
   "  if",
   "  (",
   "  x",
   "  [",
   "  i",
   "  ]",
   "  >",
   "+ 1.0",
   "- bHiEnc",
   "- [",
   "- i",
   "- ]",
   "  )",
   "  {",
   "  if",
   "  (",
   "  x",
   "  [",
   "  i",
   "  ]",
   "  >",
   "  bHiEnc",
   "  [",
   "  i",
   "  ]",
   "  )",
   "  {",
   "  eturn",
   "  false",
   "  ;"
  ]
 },
 {
  "number": 20,
  "changes_set": [
   "  eturn",
   "  the",
   "  original",
   "  objective",
   "  variables",
   "  ,",
   "  possibly",
   "  repaired",
   "  .",
   "  /",
   "  ublic",
   "  double",
   "  [",
   "  ]",
   "  repairAndDecode",
   "  (",
   "  final",
   "  double",
   "  [",
   "  ]",
   "  x",
   "  )",
   "  {",
   "+ returnreturn",
   "- return",
   "- boundaries",
   "- !=",
   "- null",
   "- &&",
   "- isRepairMode",
   "- ?",
   "- return",
   "  boundaries",
   "  !=",
   "  null",
   "  &&",
   "  isRepairMode",
   "  ?",
   "  decode",
   "  (",
   "  repair",
   "  (",
   "  x",
   "  )",
   "  )",
   "  :",
   "- decode",
   "- (",
   "- repair",
   "- (",
   "- x",
   "- )",
   "- )",
   "- :",
   "  ecode",
   "  (",
   "  x",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 19,
  "changes_set": [
   "  rivate",
   "  void",
   "  checkParameters",
   "  (",
   "  )",
   "  {",
   "  oundaries",
   "  [",
   "  1",
   "  ]",
   "  =",
   "  uB",
   "  ;",
   "  /",
   "  Abort",
   "  early",
   "  if",
   "  the",
   "  normalization",
   "  will",
   "  overflow",
   "  (",
   "  cf",
   "  .",
   "  \"encode\"",
   "  method",
   "  )",
   "  .",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  lB",
   "  .",
   "  length",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "- for",
   "- (",
   "- int",
   "- i",
   "- =",
   "- 0",
   "- ;",
   "- i",
   "- <",
   "- lB",
   "- .",
   "- length",
   "- ;",
   "- i",
   "- ++",
   "- )",
   "- {",
   "- if",
   "- (",
   "- Double",
   "- .",
   "- isInfinite",
   "- (",
   "- boundaries",
   "- [",
   "- 1",
   "- ]",
   "- [",
   "- i",
   "- ]",
   "- -",
   "- boundaries",
   "- [",
   "- 0",
   "- ]",
   "- [",
   "- i",
   "- ]",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  Double",
   "  .",
   "  isInfinite",
   "  (",
   "  boundaries",
   "  [",
   "  1",
   "  ]",
   "  [",
   "  i",
   "  ]",
   "  -",
   "  boundaries",
   "  [",
   "  0",
   "  ]",
   "  [",
   "  i",
   "  ]",
   "  )",
   "  )",
   "  {",
   "  final",
   "  double",
   "  max",
   "  =",
   "  Double",
   "  .",
   "  MAX_VALUE",
   "  +",
   "  boundaries",
   "  [",
   "  0",
   "  ]",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  final",
   "- double",
   "- max",
   "- =",
   "- Double",
   "- .",
   "- MAX_VALUE",
   "- +",
   "- boundaries",
   "- [",
   "- 0",
   "- ]",
   "- [",
   "- i",
   "- ]",
   "- ;",
   "- final",
   "- NumberIsTooLargeException",
   "- efinal",
   "  NumberIsTooLargeException",
   "  e",
   "  =",
   "  new",
   "  NumberIsTooLargeException",
   "  (",
   "  boundaries",
   "  [",
   "  1",
   "  ]",
   "  [",
   "  i",
   "  ]",
   "  ,",
   "- =",
   "- new",
   "- NumberIsTooLargeException",
   "- (",
   "- boundaries",
   "- [",
   "- 1",
   "- ]",
   "- [",
   "- i",
   "- ]",
   "- ,",
   "- max",
   "- ,",
   "  max",
   "  ,",
   "  true",
   "- )",
   "- ;",
   "- true",
   "- )",
   "- ;",
   "- e",
   "- .",
   "- getContext",
   "- (",
   "- )",
   "- .",
   "- addMessage",
   "- (",
   "- LocalizedFormats",
   "- .",
   "- OVERFLOW",
   "  )",
   "  ;",
   "  e",
   "  .",
   "  getContext",
   "  (",
   "  )",
   "  .",
   "  addMessage",
   "  (",
   "  LocalizedFormats",
   "  .",
   "  OVERFLOW",
   "  )",
   "  ;",
   "  e",
   "  .",
   "  getContext",
   "  (",
   "  )",
   "  .",
   "  addMessage",
   "  (",
   "  LocalizedFormats",
   "  .",
   "  INDEX",
   "  ,",
   "  i",
   "  )",
   "  ;",
   "- e",
   "- .",
   "- getContext",
   "- (",
   "- )",
   "- .",
   "- addMessage",
   "- (",
   "- LocalizedFormats",
   "- .",
   "- INDEX",
   "- ,",
   "- i",
   "- )",
   "- ;",
   "  throw",
   "  e",
   "  ;",
   "- throw",
   "- e",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  else",
   "  {",
   "  /",
   "  Convert",
   "  API",
   "  to",
   "  internal",
   "  handling",
   "  of",
   "  boundaries",
   "  ."
  ]
 },
 {
  "number": 23,
  "changes_set": [
   "  rotected",
   "  UnivariatePointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  {",
   "  nivariatePointValuePair",
   "  currentnew",
   "  UnivariatePointValuePair",
   "  (",
   "  x",
   "  ,",
   "  isMinim",
   "  ?",
   "  fx",
   "  :",
   "  -",
   "  fx",
   "  )",
   "  ;",
   "  /",
   "  Best",
   "  point",
   "  encountered",
   "  so",
   "  far",
   "  (",
   "  which",
   "  is",
   "  the",
   "  initial",
   "  guess",
   "  )",
   "  .",
   "  UnivariatePointValuePair",
   "  best",
   "  =",
   "  current",
   "  ;",
   "- UnivariatePointValuePair",
   "- best",
   "- =",
   "- current",
   "- ;",
   "  nt",
   "  iter",
   "  =",
   "  0",
   "  ;",
   "  hile",
   "  (",
   "  true",
   "  )",
   "  {"
  ]
 },
 {
  "number": 23,
  "changes_set": [
   "  rotected",
   "  UnivariatePointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  {",
   "  /",
   "  User",
   "  -",
   "  defined",
   "  convergence",
   "  checker",
   "  .",
   "  revious",
   "  =",
   "  current",
   "  ;",
   "  urrent",
   "  =",
   "  new",
   "  UnivariatePointValuePair",
   "  (",
   "  u",
   "  ,",
   "  isMinim",
   "  ?",
   "  fu",
   "  :",
   "  -",
   "  fu",
   "  )",
   "  ;",
   "  best",
   "  =",
   "  best",
   "  (",
   "  best",
   "  ,",
   "  best",
   "- =",
   "- best",
   "- (",
   "- best",
   "- ,",
   "- best",
   "  (",
   "  current",
   "- ,",
   "- best",
   "- (",
   "- current",
   "- ,",
   "- previous",
   "  ,",
   "  previous",
   "  ,",
   "  isMinim",
   "  )",
   "  ,",
   "- isMinim",
   "- )",
   "- ,",
   "- isMinim",
   "- )",
   "- ;",
   "  isMinim",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  checker",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  f",
   "  (",
   "  checker",
   "  .",
   "  converged",
   "  (",
   "  iter",
   "  ,",
   "  previous",
   "  ,",
   "  current",
   "  )",
   "  )",
   "  {",
   "  return",
   "  best",
   "+ (",
   "+ current",
   "+ ,",
   "+ previous",
   "+ ,",
   "+ isMinim",
   "+ )",
   "  ;",
   "  return",
   "  best",
   "  ;"
  ]
 },
 {
  "number": 21,
  "changes_set": [
   "  ublic",
   "  RectangularCholeskyDecomposition",
   "  (",
   "  RealMatrix",
   "  matrix",
   "  ,",
   "  double",
   "  small",
   "  )",
   "  inal",
   "  double",
   "  [",
   "  ]",
   "  [",
   "  ]",
   "  c",
   "  =",
   "  matrix",
   "  .",
   "  getData",
   "  (",
   "  )",
   "  ;",
   "  inal",
   "  double",
   "  [",
   "  ]",
   "  [",
   "  ]",
   "  b",
   "  =",
   "  new",
   "  double",
   "  [",
   "  order",
   "  ]",
   "  [",
   "  order",
   "  ]",
   "  ;",
   "+ int",
   "+ [",
   "+ ]",
   "+ swap",
   "+ =",
   "+ new",
   "+ int",
   "+ [",
   "+ order",
   "+ ]",
   "+ ;",
   "  nt",
   "  [",
   "  ]",
   "  index",
   "  =",
   "  new",
   "  int",
   "  [",
   "  order",
   "  ]",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  order",
   "  ;",
   "  ++",
   "  i",
   "  )",
   "  {",
   "  ndex",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  i",
   "  ;"
  ]
 },
 {
  "number": 21,
  "changes_set": [
   "  ublic",
   "  RectangularCholeskyDecomposition",
   "  (",
   "  RealMatrix",
   "  matrix",
   "  ,",
   "  double",
   "  small",
   "  )",
   "  or",
   "  (",
   "  boolean",
   "  loop",
   "  =",
   "  true",
   "  ;",
   "  loop",
   "  ;",
   "  )",
   "  {",
   "  /",
   "  find",
   "  maximal",
   "  diagonal",
   "- elementint",
   "- swapR",
   "+ elementswap",
   "+ [",
   "+ r",
   "+ ]",
   "  =",
   "  r",
   "  ;",
   "  int",
   "  swapR",
   "  =",
   "  r",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  r",
   "  +",
   "  1",
   "  ;",
   "  i",
   "  <",
   "  order",
   "  ;",
   "  ++",
   "  i",
   "  )",
   "  {",
   "  nt",
   "  ii",
   "  =",
   "  index",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  int",
   "+ isi",
   "+ =",
   "+ index",
   "+ [",
   "+ swap",
   "+ [",
   "+ i",
   "+ ]",
   "+ ]",
   "+ ;",
   "+ if",
   "+ (",
   "+ c",
   "+ [",
   "+ ii",
   "+ ]",
   "+ [",
   "+ ii",
   "+ ]",
   "+ >",
   "+ c",
   "+ [",
   "+ isi",
   "+ ]",
   "+ [",
   "+ isi",
   "+ ]",
   "+ )",
   "+ {",
   "+ swap",
   "+ [",
   "+ r",
   "+ ]",
   "+ =",
   "+ i",
   "+ ;",
   "+ int",
   "  isr",
   "  =",
   "  index",
   "  [",
   "  swapR",
   "  ]",
   "  ;",
   "- int",
   "+ if",
   "+ (",
   "+ c",
   "+ [",
   "+ ii",
   "+ ]",
   "+ [",
   "+ ii",
   "+ ]",
   "+ >",
   "+ c",
   "+ [",
   "  isr",
   "+ ]",
   "- =",
   "- index",
   "  [",
   "+ isr",
   "+ ]",
   "+ )",
   "+ {",
   "+ swapR",
   "+ =",
   "+ i",
   "+ ;",
   "+ /",
   "- swapR",
   "+ swap",
   "+ elementsif",
   "+ (",
   "+ swap",
   "+ [",
   "+ r",
   "  ]",
   "+ !=",
   "+ r",
   "+ )",
   "+ {",
   "+ int",
   "+ tmp",
   "+ =",
   "+ index",
   "+ [",
   "+ r",
   "+ ]",
   "+ ;",
   "+ index",
   "+ [",
   "+ r",
   "+ ]",
   "+ =",
   "+ index",
   "+ [",
   "+ swap",
   "+ [",
   "+ r",
   "+ ]",
   "+ ]",
   "+ ;",
   "+ index",
   "+ [",
   "+ swap",
   "+ [",
   "+ r",
   "+ ]",
   "+ ]",
   "+ =",
   "+ tmp",
   "  ;",
   "  if",
   "  (",
   "- c",
   "- [",
   "- ii",
   "- ]",
   "- [",
   "- ii",
   "- ]",
   "- >",
   "- c",
   "- [",
   "- isr",
   "- ]",
   "- [",
   "- isr",
   "- ]",
   "- )",
   "- {",
   "- if",
   "- (",
   "- c",
   "- [",
   "- ii",
   "- ]",
   "- [",
   "- ii",
   "- ]",
   "- >",
   "- c",
   "- [",
   "- isr",
   "- ]",
   "- [",
   "- isr",
   "- ]",
   "- )",
   "- {",
   "- swapR",
   "- =",
   "- i",
   "- ;",
   "- swapR",
   "- =",
   "- i",
   "- ;",
   "- /",
   "- swap",
   "- elementsif",
   "- (",
   "  swapR",
   "  !=",
   "  r",
   "  )",
   "  {",
   "- if",
   "- (",
   "- swapR",
   "- !=",
   "- r",
   "- )",
   "- {",
   "  final",
   "  int",
   "  tmpIndex",
   "  =",
   "  index",
   "  [",
   "  r",
   "  ]",
   "  ;",
   "- final",
   "- int",
   "- tmpIndex",
   "- =",
   "  index",
   "  [",
   "  r",
   "  ]",
   "- ;",
   "- index",
   "- [",
   "- r",
   "- ]",
   "  =",
   "  index",
   "  [",
   "  swapR",
   "  ]",
   "- ;",
   "- index",
   "- [",
   "- r",
   "- ]",
   "- =",
   "- index",
   "- [",
   "- swapR",
   "- ]",
   "- ;",
   "- index",
   "- [",
   "- swapR",
   "- ]",
   "- =",
   "- tmpIndex",
   "  ;",
   "  index",
   "  [",
   "  swapR",
   "  ]",
   "  =",
   "  tmpIndex",
   "  ;",
   "  final",
   "  double",
   "  [",
   "  ]",
   "  tmpRow",
   "  =",
   "  b",
   "  [",
   "  r",
   "  ]",
   "  ;",
   "- final",
   "- double",
   "- [",
   "- ]",
   "- tmpRow",
   "- =",
   "  b",
   "  [",
   "  r",
   "  ]",
   "- ;",
   "- b",
   "- [",
   "- r",
   "- ]",
   "  =",
   "  b",
   "  [",
   "  swapR",
   "  ]",
   "- ;",
   "- b",
   "- [",
   "- r",
   "- ]",
   "- =",
   "- b",
   "- [",
   "- swapR",
   "- ]",
   "- ;",
   "- b",
   "- [",
   "- swapR",
   "- ]",
   "- =",
   "- tmpRow",
   "  ;",
   "  b",
   "  [",
   "  swapR",
   "  ]",
   "  =",
   "  tmpRow",
   "  ;",
   "  /",
   "  check",
   "  diagonal",
   "  element"
  ]
 },
 {
  "number": 21,
  "changes_set": [
   "  ublic",
   "  RectangularCholeskyDecomposition",
   "  (",
   "  RealMatrix",
   "  matrix",
   "  ,",
   "  double",
   "  small",
   "  )",
   "  inal",
   "  double",
   "  sqrt",
   "  =",
   "  FastMath",
   "  .",
   "  sqrt",
   "  (",
   "  c",
   "  [",
   "  ir",
   "  ]",
   "  [",
   "  ir",
   "  ]",
   "  )",
   "  ;",
   "  [",
   "  r",
   "  ]",
   "  [",
   "  r",
   "  ]",
   "  =",
   "  sqrt",
   "  ;",
   "  inal",
   "  double",
   "  inverse",
   "  =",
   "  1",
   "  /",
   "  sqrt",
   "- ;",
   "- final",
   "- double",
   "- inverse2",
   "- =",
   "- 1",
   "- /",
   "- c",
   "- [",
   "- ir",
   "- ]",
   "- [",
   "- ir",
   "- ]",
   "  ;",
   "  final",
   "  double",
   "  inverse2",
   "  =",
   "  1",
   "  /",
   "  c",
   "  [",
   "  ir",
   "  ]",
   "  [",
   "  ir",
   "  ]",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  r",
   "  +",
   "  1",
   "  ;",
   "  i",
   "  <",
   "  order",
   "  ;",
   "  ++",
   "  i",
   "  )",
   "  {",
   "  inal",
   "  int",
   "  ii",
   "  =",
   "  index",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  inal",
   "  double",
   "  e",
   "  =",
   "  inverse",
   "  *",
   "  c",
   "  [",
   "  ii",
   "  ]",
   "  [",
   "  ir",
   "  ]",
   "  ;",
   "  [",
   "  i",
   "  ]",
   "  [",
   "  r",
   "  ]",
   "  =",
   "  e",
   "  ;",
   "  c",
   "  [",
   "  ii",
   "  ]",
   "  [",
   "  ii",
   "  ]",
   "  -=",
   "+ e",
   "- c",
   "- [",
   "- ii",
   "- ]",
   "- [",
   "- ir",
   "- ]",
   "  *",
   "+ e",
   "- c",
   "- [",
   "- ii",
   "- ]",
   "- [",
   "- ir",
   "- ]",
   "- *",
   "- inverse2",
   "  ;",
   "  c",
   "  [",
   "  ii",
   "  ]",
   "  [",
   "  ii",
   "  ]",
   "  -=",
   "  c",
   "  [",
   "  ii",
   "  ]",
   "  [",
   "  ir",
   "  ]",
   "  *",
   "  c",
   "  [",
   "  ii",
   "  ]",
   "  [",
   "  ir",
   "  ]",
   "  *",
   "  inverse2",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  j",
   "  =",
   "  r",
   "  +",
   "  1",
   "  ;",
   "  j",
   "  <",
   "  i",
   "  ;",
   "  ++",
   "  j",
   "  )",
   "  {",
   "  inal",
   "  int",
   "  ij",
   "  =",
   "  index",
   "  [",
   "  j",
   "  ]",
   "  ;",
   "  inal",
   "  double",
   "  f",
   "  =",
   "  c",
   "  [",
   "  ii",
   "  ]",
   "  [",
   "  ij",
   "  ]",
   "  -",
   "  e",
   "  *",
   "  b",
   "  [",
   "  j",
   "  ]",
   "  [",
   "  r",
   "  ]",
   "  ;"
  ]
 },
 {
  "number": 24,
  "changes_set": [
   "  rotected",
   "  UnivariatePointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  {",
   "  f",
   "  (",
   "  checker",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  f",
   "  (",
   "  checker",
   "  .",
   "  converged",
   "  (",
   "  iter",
   "  ,",
   "  previous",
   "  ,",
   "  current",
   "  )",
   "  )",
   "  {",
   "  return",
   "- best",
   "- (",
   "  current",
   "- ,",
   "- previous",
   "- ,",
   "- isMinim",
   "- )",
   "  ;",
   "  return",
   "  best",
   "  (",
   "  current",
   "  ,",
   "  previous",
   "  ,",
   "  isMinim",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 30,
  "changes_set": [
   "  rivate",
   "  double",
   "  calculateAsymptoticPValue",
   "  (",
   "  final",
   "  double",
   "  Umin",
   "  ,",
   "  inal",
   "  int",
   "  n2",
   "  )",
   "  hrows",
   "  ConvergenceException",
   "  ,",
   "  MaxCountExceededException",
   "  {",
   "  final",
   "- double",
   "+ int",
   "  n1n2prod",
   "  =",
   "  n1",
   "  *",
   "  n2",
   "  ;",
   "  final",
   "  double",
   "  n1n2prod",
   "  =",
   "  n1",
   "  *",
   "  n2",
   "  ;",
   "  /",
   "  http",
   "  :"
  ]
 },
 {
  "number": 25,
  "changes_set": [
   "  rivate",
   "  void",
   "  guessAOmega",
   "  (",
   "  )",
   "  {",
   "  =",
   "  0.5",
   "  *",
   "  (",
   "  yMax",
   "  -",
   "  yMin",
   "  )",
   "  ;",
   "  else",
   "- {",
   "- if",
   "- (",
   "- c2",
   "- ==",
   "- 0",
   "- )",
   "  {",
   "  if",
   "  (",
   "  c2",
   "  ==",
   "  0",
   "  )",
   "  {",
   "  /",
   "  In",
   "  some",
   "  ill",
   "  -",
   "  conditioned",
   "  cases",
   "  (",
   "  cf",
   "  .",
   "  MATH",
   "  -",
   "  844",
   "  )",
   "  ,",
   "  the",
   "  guesser",
   "  /",
   "  procedure",
   "  cannot",
   "  produce",
   "  sensible",
   "  results",
   "  .",
   "  throw",
   "  new",
   "  MathIllegalStateException",
   "  (",
   "  LocalizedFormats",
   "  .",
   "  ZERO_DENOMINATOR",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- MathIllegalStateException",
   "- (",
   "- LocalizedFormats",
   "- .",
   "- ZERO_DENOMINATOR",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  =",
   "  FastMath",
   "  .",
   "  sqrt",
   "  (",
   "  c1",
   "  /",
   "  c2",
   "  )",
   "  ;",
   "  mega",
   "  =",
   "  FastMath",
   "  .",
   "  sqrt",
   "  (",
   "  c2",
   "  /",
   "  c3",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 26,
  "changes_set": [
   "  rivate",
   "  Fraction",
   "  (",
   "  double",
   "  value",
   "  ,",
   "  double",
   "  epsilon",
   "  ,",
   "  int",
   "  maxDenominator",
   "  ,",
   "  int",
   "  maxIteratong",
   "  overflow",
   "  =",
   "  Integer",
   "  .",
   "  MAX_VALUE",
   "  ;",
   "  ouble",
   "  r0",
   "  =",
   "  value",
   "  ;",
   "  ong",
   "  a0",
   "  =",
   "  (",
   "  long",
   "  )",
   "  FastMath",
   "  .",
   "  floor",
   "  (",
   "  r0",
   "  )",
   "  ;",
   "  if",
   "  (",
   "- FastMath",
   "- .",
   "- abs",
   "- (",
   "  a0",
   "- )",
   "  >",
   "  overflow",
   "  )",
   "  {",
   "  if",
   "  (",
   "  FastMath",
   "  .",
   "  abs",
   "  (",
   "  a0",
   "  )",
   "  >",
   "  overflow",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  FractionConversionException",
   "  (",
   "  value",
   "  ,",
   "  a0",
   "  ,",
   "  1l",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 26,
  "changes_set": [
   "  rivate",
   "  Fraction",
   "  (",
   "  double",
   "  value",
   "  ,",
   "  double",
   "  epsilon",
   "  ,",
   "  int",
   "  maxDenominator",
   "  ,",
   "  int",
   "  maxIteratong",
   "  a1",
   "  =",
   "  (",
   "  long",
   "  )",
   "  FastMath",
   "  .",
   "  floor",
   "  (",
   "  r1",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  (",
   "- FastMath",
   "- .",
   "- abs",
   "- (",
   "  p2",
   "- )",
   "  >",
   "  overflow",
   "  )",
   "  ||",
   "  (",
   "- FastMath",
   "- .",
   "- abs",
   "- (",
   "  q2",
   "- )",
   "  >",
   "  overflow",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  (",
   "  FastMath",
   "  .",
   "  abs",
   "  (",
   "  p2",
   "  )",
   "  >",
   "  overflow",
   "  )",
   "  ||",
   "  (",
   "  FastMath",
   "  .",
   "  abs",
   "  (",
   "  q2",
   "  )",
   "  >",
   "  overflow",
   "  )",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  FractionConversionException",
   "  (",
   "  value",
   "  ,",
   "  p2",
   "  ,",
   "  q2",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 27,
  "changes_set": [
   "  eturn",
   "  the",
   "  fraction",
   "  percentage",
   "  as",
   "  a",
   "  <",
   "  tt",
   "  >",
   "  double",
   "  <",
   "  /",
   "  tt",
   "  >",
   "  .",
   "  /",
   "  ublic",
   "  double",
   "  percentageValue",
   "  (",
   "  )",
   "  {",
   "  return",
   "+ multiply",
   "+ (",
   "  100",
   "- *",
   "+ )",
   "+ .",
   "  doubleValue",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  100",
   "  *",
   "  doubleValue",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 29,
  "changes_set": [
   "  ublic",
   "  OpenMapRealVector",
   "  ebeDivide",
   "  (",
   "  RealVector",
   "  v",
   "  )",
   "  {",
   "  this",
   "  only",
   "  .",
   "  Indeed",
   "  ,",
   "  if",
   "  this",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  0d",
   "  and",
   "  v",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  0d",
   "  ,",
   "  thenthis",
   "  [",
   "  i",
   "  ]",
   "  /",
   "  v",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  NaN",
   "  ,",
   "  and",
   "  not",
   "  0d",
   "  .",
   "  /",
   "+ Iterator",
   "+ iter",
   "- final",
   "- int",
   "- n",
   "  =",
   "- getDimension",
   "+ entries",
   "+ .",
   "+ iterator",
   "  (",
   "+ )",
   "+ ;",
   "+ while",
   "+ (",
   "+ iter",
   "+ .",
   "+ hasNext",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "+ iter",
   "+ .",
   "+ advance",
   "+ (",
   "+ )",
   "+ ;",
   "+ res",
   "+ .",
   "+ setEntry",
   "+ (",
   "+ iter",
   "+ .",
   "+ key",
   "+ (",
   "+ )",
   "+ ,",
   "+ iter",
   "+ .",
   "+ value",
   "+ (",
   "+ )",
   "+ /",
   "+ v",
   "+ .",
   "+ getEntry",
   "+ (",
   "+ iter",
   "+ .",
   "+ key",
   "+ (",
   "+ )",
   "+ )",
   "  )",
   "  ;",
   "  final",
   "  int",
   "  n",
   "  =",
   "  getDimension",
   "  (",
   "  )",
   "  ;",
   "- for",
   "- (",
   "- int",
   "- i",
   "- =",
   "- 0",
   "- ;",
   "- i",
   "- <",
   "- n",
   "- ;",
   "- i",
   "- ++",
   "- )",
   "- {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  n",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  res",
   "  .",
   "  setEntry",
   "  (",
   "  i",
   "  ,",
   "  this",
   "  .",
   "  getEntry",
   "  (",
   "  i",
   "  )",
   "  /",
   "  v",
   "  .",
   "  getEntry",
   "  (",
   "  i",
   "  )",
   "  )",
   "  ;",
   "- res",
   "- .",
   "- setEntry",
   "- (",
   "- i",
   "- ,",
   "- this",
   "- .",
   "- getEntry",
   "- (",
   "- i",
   "- )",
   "- /",
   "- v",
   "- .",
   "- getEntry",
   "- (",
   "- i",
   "- )",
   "- )",
   "- ;",
   "  eturn",
   "  res",
   "  ;"
  ]
 },
 {
  "number": 29,
  "changes_set": [
   "  ublic",
   "  OpenMapRealVector",
   "  ebeMultiply",
   "  (",
   "  RealVector",
   "  v",
   "  )",
   "  {",
   "  These",
   "  special",
   "  cases",
   "  are",
   "  handled",
   "  below",
   "  .",
   "  /",
   "  if",
   "  (",
   "  v",
   "  .",
   "  isNaN",
   "  (",
   "  )",
   "  ||",
   "  v",
   "  .",
   "  isInfinite",
   "  (",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- v",
   "- .",
   "- isNaN",
   "- (",
   "- )",
   "- ||",
   "- v",
   "- .",
   "- isInfinite",
   "- (",
   "- )",
   "- )",
   "- {",
   "  final",
   "  int",
   "  n",
   "  =",
   "  getDimension",
   "  (",
   "  )",
   "  ;",
   "- final",
   "- int",
   "- n",
   "- =",
   "- getDimension",
   "- (",
   "- )",
   "- ;",
   "- for",
   "- (",
   "- int",
   "- i",
   "- =",
   "- 0",
   "- ;",
   "- i",
   "- <",
   "- n",
   "- ;",
   "- i",
   "- ++",
   "- )",
   "- {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  n",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  final",
   "  double",
   "  y",
   "  =",
   "  v",
   "  .",
   "  getEntry",
   "  (",
   "  i",
   "  )",
   "  ;",
   "- final",
   "- double",
   "- y",
   "- =",
   "- v",
   "- .",
   "- getEntry",
   "- (",
   "- i",
   "- )",
   "- ;",
   "  if",
   "  (",
   "  Double",
   "  .",
   "  isNaN",
   "  (",
   "  y",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- Double",
   "- .",
   "- isNaN",
   "- (",
   "- y",
   "- )",
   "- )",
   "- {",
   "- res",
   "- .",
   "- setEntry",
   "- (",
   "- i",
   "- ,",
   "- Double",
   "- .",
   "- NaN",
   "- )",
   "- ;",
   "  res",
   "  .",
   "  setEntry",
   "  (",
   "  i",
   "  ,",
   "  Double",
   "  .",
   "  NaN",
   "  )",
   "  ;",
   "  }",
   "  else",
   "  if",
   "  (",
   "  Double",
   "  .",
   "  isInfinite",
   "  (",
   "  y",
   "  )",
   "  )",
   "  {",
   "- }",
   "- else",
   "- if",
   "- (",
   "- Double",
   "- .",
   "- isInfinite",
   "- (",
   "- y",
   "- )",
   "- )",
   "- {",
   "- final",
   "- double",
   "- x",
   "- =",
   "- this",
   "- .",
   "- getEntry",
   "- (",
   "- i",
   "- )",
   "- ;",
   "  final",
   "  double",
   "  x",
   "  =",
   "  this",
   "  .",
   "  getEntry",
   "  (",
   "  i",
   "  )",
   "  ;",
   "  res",
   "  .",
   "  setEntry",
   "  (",
   "  i",
   "  ,",
   "  x",
   "  *",
   "  y",
   "  )",
   "  ;",
   "- res",
   "- .",
   "- setEntry",
   "- (",
   "- i",
   "- ,",
   "- x",
   "- *",
   "- y",
   "- )",
   "- ;",
   "- }",
   "- }",
   "- }",
   "  }",
   "  }",
   "  }",
   "  eturn",
   "  res",
   "  ;"
  ]
 },
 {
  "number": 28,
  "changes_set": [
   "  rivate",
   "  Integer",
   "  getPivotRow",
   "  (",
   "  SimplexTableau",
   "  tableau",
   "  ,",
   "  final",
   "  int",
   "  col",
   "  )",
   "  {",
   "  /",
   "  there",
   "  a",
   "  degeneracy",
   "  as",
   "  indicated",
   "  by",
   "  a",
   "  tie",
   "  in",
   "  the",
   "  minimum",
   "  ratio",
   "  test",
   "  /",
   "  1.",
   "  check",
   "  if",
   "  there",
   "  an",
   "  artificial",
   "  variable",
   "  that",
   "  can",
   "  be",
   "  forced",
   "  out",
   "  of",
   "  the",
   "  basisif",
   "  (",
   "  tableau",
   "  .",
   "  getNumArtificialVariables",
   "  (",
   "  )",
   "  >",
   "  0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- tableau",
   "- .",
   "- getNumArtificialVariables",
   "- (",
   "- )",
   "- >",
   "- 0",
   "- )",
   "- {",
   "  or",
   "  (",
   "  Integer",
   "  row",
   "  :",
   "  minRatioPositions",
   "  )",
   "  {",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  tableau",
   "  .",
   "  getNumArtificialVariables",
   "  (",
   "  )",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  nt",
   "  column",
   "  =",
   "  i",
   "  +",
   "  tableau",
   "  .",
   "  getArtificialVariableOffset",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 28,
  "changes_set": [
   "  rivate",
   "  Integer",
   "  getPivotRow",
   "  (",
   "  SimplexTableau",
   "  tableau",
   "  ,",
   "  final",
   "  int",
   "  col",
   "  )",
   "  {",
   "- }",
   "  }",
   "  /",
   "  2.",
   "  apply",
   "  Bland",
   "  rule",
   "  to",
   "  prevent",
   "  cycling",
   "  :",
   "  /",
   "  take",
   "  the",
   "  row",
   "  for",
   "  which",
   "  the",
   "  corresponding",
   "  basic",
   "  variable",
   "  has",
   "  the",
   "  smallest",
   "  index"
  ]
 },
 {
  "number": 28,
  "changes_set": [
   "  rivate",
   "  Integer",
   "  getPivotRow",
   "  (",
   "  SimplexTableau",
   "  tableau",
   "  ,",
   "  final",
   "  int",
   "  col",
   "  )",
   "  {",
   "  /",
   "  Additional",
   "  heuristic",
   "  :",
   "  if",
   "  we",
   "  did",
   "  not",
   "  get",
   "  a",
   "  solution",
   "  after",
   "  half",
   "  of",
   "  maxIterations",
   "  /",
   "  revert",
   "  to",
   "  the",
   "  simple",
   "  case",
   "  of",
   "  just",
   "  returning",
   "  the",
   "  top",
   "  -",
   "  most",
   "  row",
   "  /",
   "  This",
   "  heuristic",
   "  is",
   "  based",
   "  on",
   "  empirical",
   "  data",
   "  gathered",
   "  while",
   "  investigating",
   "  MATH",
   "  -",
   "  828.",
   "  if",
   "  (",
   "  getIterations",
   "  (",
   "  )",
   "  <",
   "  getMaxIterations",
   "  (",
   "  )",
   "  /",
   "  2",
   "  )",
   "  {",
   "- if",
   "- (",
   "- getIterations",
   "- (",
   "- )",
   "- <",
   "- getMaxIterations",
   "- (",
   "- )",
   "- /",
   "- 2",
   "- )",
   "- {",
   "  nteger",
   "  minRow",
   "  =",
   "  null",
   "  ;",
   "  nt",
   "  minIndex",
   "  =",
   "  tableau",
   "  .",
   "  getWidth",
   "  (",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  Integer",
   "  row",
   "  :",
   "  minRatioPositions",
   "  )",
   "  {"
  ]
 },
 {
  "number": 28,
  "changes_set": [
   "  rivate",
   "  Integer",
   "  getPivotRow",
   "  (",
   "  SimplexTableau",
   "  tableau",
   "  ,",
   "  final",
   "  int",
   "  col",
   "  )",
   "  {",
   "  eturn",
   "  minRow",
   "  ;",
   "  }",
   "- }",
   "  eturn",
   "  minRatioPositions",
   "  .",
   "  get",
   "  (",
   "  0",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 31,
  "changes_set": [
   "  ublic",
   "  double",
   "  evaluate",
   "  (",
   "  double",
   "  x",
   "  ,",
   "  double",
   "  epsilon",
   "  ,",
   "  int",
   "  maxIterations",
   "  )",
   "  {",
   "  nt",
   "  n",
   "  =",
   "  1",
   "  ;",
   "  ouble",
   "  dPrev",
   "  =",
   "  0.0",
   "  ;",
   "+ double",
   "+ p0",
   "+ =",
   "+ 1.0",
   "+ ;",
   "+ double",
   "+ q1",
   "+ =",
   "+ 1.0",
   "+ ;",
   "  ouble",
   "  cPrev",
   "  =",
   "  hPrev",
   "  ;",
   "  ouble",
   "  hN",
   "  =",
   "  hPrev",
   "  ;"
  ]
 },
 {
  "number": 31,
  "changes_set": [
   "  ublic",
   "  double",
   "  evaluate",
   "  (",
   "  double",
   "  x",
   "  ,",
   "  double",
   "  epsilon",
   "  ,",
   "  int",
   "  maxIterations",
   "  )",
   "  {",
   "  inal",
   "  double",
   "  a",
   "  =",
   "  getA",
   "  (",
   "  n",
   "  ,",
   "  x",
   "  )",
   "  ;",
   "  inal",
   "  double",
   "  b",
   "  =",
   "  getB",
   "  (",
   "  n",
   "  ,",
   "  x",
   "  )",
   "  ;",
   "  double",
   "- dN",
   "+ cN",
   "  =",
   "  a",
   "+ *",
   "+ hPrev",
   "  +",
   "  b",
   "  *",
   "- dPrev",
   "+ p0",
   "  ;",
   "  double",
   "- dN",
   "+ q2",
   "  =",
   "  a",
   "+ *",
   "+ q1",
   "  +",
   "  b",
   "  *",
   "  dPrev",
   "  ;",
   "  if",
   "  (",
   "- Precision",
   "- .",
   "- equals",
   "- (",
   "- dN",
   "- ,",
   "- 0.0",
   "- ,",
   "- small",
   "- )",
   "- )",
   "- {",
   "- if",
   "- (",
   "- Precision",
   "- .",
   "- equals",
   "- (",
   "- dN",
   "- ,",
   "- 0.0",
   "- ,",
   "- small",
   "- )",
   "- )",
   "- {",
   "- dN",
   "- =",
   "- small",
   "- ;",
   "- dN",
   "- =",
   "- small",
   "- ;",
   "- }",
   "- }",
   "- double",
   "- cN",
   "- =",
   "- a",
   "- +",
   "- b",
   "- /",
   "- cPrev",
   "- ;",
   "- double",
   "- cN",
   "- =",
   "- a",
   "- +",
   "- b",
   "- /",
   "- cPrev",
   "- ;",
   "- if",
   "- (",
   "- Precision",
   "- .",
   "- equals",
   "- (",
   "- cN",
   "- ,",
   "- 0.0",
   "- ,",
   "- small",
   "- )",
   "- )",
   "- {",
   "- if",
   "- (",
   "- Precision",
   "- .",
   "- equals",
   "- (",
   "- cN",
   "- ,",
   "- 0.0",
   "- ,",
   "- small",
   "- )",
   "- )",
   "- {",
   "- cN",
   "- =",
   "- small",
   "- ;",
   "- cN",
   "- =",
   "- small",
   "- ;",
   "- dN",
   "- =",
   "- 1",
   "- /",
   "- dN",
   "- ;",
   "- dN",
   "- =",
   "- 1",
   "- /",
   "- dN",
   "- ;",
   "- final",
   "- double",
   "- deltaN",
   "- =",
   "- cN",
   "- *",
   "- dN",
   "- ;",
   "- final",
   "- double",
   "- deltaN",
   "- =",
   "- cN",
   "- *",
   "- dN",
   "- ;",
   "- hN",
   "- =",
   "- hPrev",
   "- *",
   "- deltaN",
   "- ;",
   "- hN",
   "- =",
   "- hPrev",
   "- *",
   "- deltaN",
   "- ;",
   "- f",
   "- (",
   "  Double",
   "  .",
   "  isInfinite",
   "  (",
   "- hN",
   "+ cN",
   "+ )",
   "+ ||",
   "+ Double",
   "+ .",
   "+ isInfinite",
   "+ (",
   "+ q2",
   "  )",
   "  )",
   "  {",
   "- hrow",
   "- new",
   "- ConvergenceException",
   "+ double",
   "+ scaleFactor",
   "+ =",
   "+ 1d",
   "+ ;",
   "+ double",
   "+ lastScaleFactor",
   "+ =",
   "+ 1d",
   "+ ;",
   "+ final",
   "+ int",
   "+ maxPower",
   "+ =",
   "+ 5",
   "+ ;",
   "+ final",
   "+ double",
   "+ scale",
   "+ =",
   "+ FastMath",
   "+ .",
   "+ max",
   "  (",
   "+ a",
   "- LocalizedFormats",
   "- .",
   "- CONTINUED_FRACTION_INFINITY_DIVERGENCE",
   "  ,",
   "+ b",
   "+ )",
   "+ ;",
   "+ if",
   "+ (",
   "+ scale",
   "+ <=",
   "+ 0",
   "+ )",
   "+ {"
  ]
 },
 {
  "number": 31,
  "changes_set": [
   "  ublic",
   "  double",
   "  evaluate",
   "  (",
   "  double",
   "  x",
   "  ,",
   "  double",
   "  epsilon",
   "  ,",
   "  int",
   "  maxIterations",
   "  )",
   "  {",
   "  reak",
   "  ;",
   "  dPrev",
   "  =",
   "- dN",
   "+ q1",
   "+ ;",
   "+ cPrev",
   "+ =",
   "+ cN",
   "+ /",
   "+ q2",
   "+ ;",
   "+ p0",
   "+ =",
   "+ hPrev",
   "+ ;",
   "+ hPrev",
   "+ =",
   "+ cN",
   "+ ;",
   "+ q1",
   "+ =",
   "+ q2",
   "  ;",
   "  dPrev",
   "  =",
   "  dN",
   "  ;",
   "  cPrev",
   "  =",
   "  cN",
   "  ;",
   "- cPrev",
   "- =",
   "- cN",
   "- ;",
   "- hPrev",
   "- =",
   "- hN",
   "- ;",
   "  hPrev",
   "  =",
   "  hN",
   "  ;",
   "  ++",
   "  ;"
  ]
 },
 {
  "number": 32,
  "changes_set": [
   "  rotected",
   "  void",
   "  computeGeometricalProperties",
   "  (",
   "  )",
   "  {",
   "  f",
   "  (",
   "  v",
   "  .",
   "  length",
   "  ==",
   "  0",
   "  )",
   "  {",
   "  inal",
   "  BSPTree",
   "  <",
   "  Euclidean2D",
   "  >",
   "  tree",
   "  =",
   "  getTree",
   "  (",
   "  false",
   "  )",
   "  ;",
   "  if",
   "  (",
   "- tree",
   "- .",
   "- getCut",
   "- (",
   "- )",
   "- ==",
   "- null",
   "- &&",
   "  (",
   "  Boolean",
   "  )",
   "  tree",
   "  .",
   "  getAttribute",
   "  (",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  tree",
   "  .",
   "  getCut",
   "  (",
   "  )",
   "  ==",
   "  null",
   "  &&",
   "  (",
   "  Boolean",
   "  )",
   "  tree",
   "  .",
   "  getAttribute",
   "  (",
   "  )",
   "  )",
   "  {",
   "  /",
   "  the",
   "  instance",
   "  covers",
   "  the",
   "  whole",
   "  spaceetSize",
   "  (",
   "  Double",
   "  .",
   "  POSITIVE_INFINITY",
   "  )",
   "  ;",
   "  etBarycenter",
   "  (",
   "  Vector2D",
   "  .",
   "  NaN",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 35,
  "changes_set": [
   "  ublic",
   "  ElitisticListPopulation",
   "  (",
   "  final",
   "  List",
   "  <",
   "  Chromosome",
   "  >",
   "  chromosomes",
   "  ,",
   "  inal",
   "  int",
   "  populationLimit",
   "  ,",
   "  inal",
   "  double",
   "  elitismRate",
   "  )",
   "  {",
   "  uper",
   "  (",
   "  chromosomes",
   "  ,",
   "  populationLimit",
   "  )",
   "  ;",
   "- setElitismRate",
   "- (",
   "+ this",
   "+ .",
   "  elitismRate",
   "- )",
   "+ =",
   "+ elitismRate",
   "  ;",
   "  setElitismRate",
   "  (",
   "  elitismRate",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 35,
  "changes_set": [
   "  ublic",
   "  ElitisticListPopulation",
   "  (",
   "  final",
   "  List",
   "  <",
   "  Chromosome",
   "  >",
   "  chromosomes",
   "  ,",
   "  /",
   "  ublic",
   "  ElitisticListPopulation",
   "  (",
   "  final",
   "  int",
   "  populationLimit",
   "  ,",
   "  final",
   "  double",
   "  elitismRate",
   "  )",
   "  {",
   "  uper",
   "  (",
   "  populationLimit",
   "  )",
   "  ;",
   "- setElitismRate",
   "- (",
   "+ this",
   "+ .",
   "  elitismRate",
   "- )",
   "+ =",
   "+ elitismRate",
   "  ;",
   "  setElitismRate",
   "  (",
   "  elitismRate",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 33,
  "changes_set": [
   "  rotected",
   "  void",
   "  dropPhase1Objective",
   "  (",
   "  )",
   "  {",
   "  /",
   "  positive",
   "  cost",
   "  non",
   "  -",
   "  artificial",
   "  variablesor",
   "  (",
   "  int",
   "  i",
   "  =",
   "  getNumObjectiveFunctions",
   "  (",
   "  )",
   "  ;",
   "  i",
   "  <",
   "  getArtificialVariableOffset",
   "  (",
   "  )",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  inal",
   "  double",
   "  entry",
   "  =",
   "  tableau",
   "  .",
   "  getEntry",
   "  (",
   "  0",
   "  ,",
   "  i",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  Precision",
   "  .",
   "  compareTo",
   "  (",
   "  entry",
   "  ,",
   "  0d",
   "  ,",
   "- epsilon",
   "+ maxUlps",
   "  )",
   "  >",
   "  0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  Precision",
   "  .",
   "  compareTo",
   "  (",
   "  entry",
   "  ,",
   "  0d",
   "  ,",
   "  epsilon",
   "  )",
   "  >",
   "  0",
   "  )",
   "  {",
   "  olumnsToDrop",
   "  .",
   "  add",
   "  (",
   "  i",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 37,
  "changes_set": [
   "  ince",
   "  1.2",
   "  /",
   "  ublic",
   "  Complex",
   "  tan",
   "  (",
   "  )",
   "  {",
   "  if",
   "  (",
   "  isNaN",
   "- ||",
   "- Double",
   "- .",
   "- isInfinite",
   "- (",
   "- real",
   "- )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  isNaN",
   "  ||",
   "  Double",
   "  .",
   "  isInfinite",
   "  (",
   "  real",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  NaN",
   "  ;",
   "  if",
   "  (",
   "  imaginary",
   "  >",
   "  20.0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- imaginary",
   "- >",
   "- 20.0",
   "- )",
   "- {",
   "- return",
   "- createComplex",
   "- (",
   "- 0.0",
   "- ,",
   "- 1.0",
   "- )",
   "- ;",
   "  return",
   "  createComplex",
   "  (",
   "  0.0",
   "  ,",
   "  1.0",
   "  )",
   "  ;",
   "  }",
   "- }",
   "- if",
   "- (",
   "- imaginary",
   "- <",
   "- -",
   "- 20.0",
   "- )",
   "- {",
   "  if",
   "  (",
   "  imaginary",
   "  <",
   "  -",
   "  20.0",
   "  )",
   "  {",
   "  return",
   "  createComplex",
   "  (",
   "  0.0",
   "  ,",
   "  -",
   "  1.0",
   "  )",
   "  ;",
   "- return",
   "- createComplex",
   "- (",
   "- 0.0",
   "- ,",
   "- -",
   "- 1.0",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  ouble",
   "  real2",
   "  =",
   "  2.0",
   "  *",
   "  real",
   "  ;",
   "  ouble",
   "  imaginary2",
   "  =",
   "  2.0",
   "  *",
   "  imaginary",
   "  ;"
  ]
 },
 {
  "number": 37,
  "changes_set": [
   "  ince",
   "  1.2",
   "  /",
   "  ublic",
   "  Complex",
   "  tanh",
   "  (",
   "  )",
   "  {",
   "  if",
   "  (",
   "  isNaN",
   "- ||",
   "- Double",
   "- .",
   "- isInfinite",
   "- (",
   "- imaginary",
   "- )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  isNaN",
   "  ||",
   "  Double",
   "  .",
   "  isInfinite",
   "  (",
   "  imaginary",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  NaN",
   "  ;",
   "  if",
   "  (",
   "  real",
   "  >",
   "  20.0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- real",
   "- >",
   "- 20.0",
   "- )",
   "- {",
   "- return",
   "- createComplex",
   "- (",
   "- 1.0",
   "- ,",
   "- 0.0",
   "- )",
   "- ;",
   "  return",
   "  createComplex",
   "  (",
   "  1.0",
   "  ,",
   "  0.0",
   "  )",
   "  ;",
   "  }",
   "- }",
   "- if",
   "- (",
   "- real",
   "- <",
   "- -",
   "- 20.0",
   "- )",
   "- {",
   "  if",
   "  (",
   "  real",
   "  <",
   "  -",
   "  20.0",
   "  )",
   "  {",
   "  return",
   "  createComplex",
   "  (",
   "  -",
   "  1.0",
   "  ,",
   "  0.0",
   "  )",
   "  ;",
   "- return",
   "- createComplex",
   "- (",
   "- -",
   "- 1.0",
   "- ,",
   "- 0.0",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  ouble",
   "  real2",
   "  =",
   "  2.0",
   "  *",
   "  real",
   "  ;",
   "  ouble",
   "  imaginary2",
   "  =",
   "  2.0",
   "  *",
   "  imaginary",
   "  ;",
   "  ouble",
   "  d",
   "  =",
   "  FastMath",
   "  .",
   "  cosh",
   "  (",
   "  real2",
   "  )",
   "  +",
   "  FastMath",
   "  .",
   "  cos",
   "  (",
   "  imaginary2",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 34,
  "changes_set": [
   "  eturn",
   "  chromosome",
   "  iterator",
   "  /",
   "  ublic",
   "  Iterator",
   "  <",
   "  Chromosome",
   "  >",
   "  iterator",
   "  (",
   "  )",
   "  {",
   "  return",
   "- getChromosomes",
   "+ chromosomes",
   "- (",
   "- )",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  getChromosomes",
   "  (",
   "  )",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 40,
  "changes_set": [
   "  rotected",
   "  double",
   "  doSolve",
   "  (",
   "  )",
   "  {",
   "  ouble",
   "  targetY",
   "  ;",
   "  f",
   "  (",
   "  agingA",
   "  >=",
   "  MAXIMAL_AGING",
   "  )",
   "  {",
   "  /",
   "  we",
   "  keep",
   "  updating",
   "  the",
   "  high",
   "  bracket",
   "  ,",
   "  try",
   "  to",
   "  compensate",
   "+ thistargetY",
   "- thisfinal",
   "- int",
   "- p",
   "  =",
   "- agingA",
   "  -",
   "- MAXIMAL_AGING",
   "+ REDUCTION_FACTOR",
   "+ *",
   "+ yB",
   "  ;",
   "  final",
   "  int",
   "  p",
   "  =",
   "  agingA",
   "  -",
   "  MAXIMAL_AGING",
   "  ;",
   "  final",
   "  double",
   "  weightA",
   "  =",
   "  (",
   "  1",
   "  <",
   "  <",
   "  p",
   "  )",
   "  -",
   "  1",
   "  ;",
   "  final",
   "  double",
   "- weightA",
   "- =",
   "- (",
   "- 1",
   "- <",
   "- <",
   "- p",
   "- )",
   "- -",
   "- 1",
   "- ;",
   "- final",
   "- double",
   "  weightB",
   "  =",
   "  p",
   "  +",
   "  1",
   "- ;",
   "- final",
   "- double",
   "- weightB",
   "- =",
   "- p",
   "- +",
   "- 1",
   "- ;",
   "- targetY",
   "- =",
   "- (",
   "- weightA",
   "- *",
   "- yA",
   "- -",
   "- weightB",
   "- *",
   "- REDUCTION_FACTOR",
   "- *",
   "- yB",
   "- )",
   "- /",
   "- (",
   "- weightA",
   "- +",
   "- weightB",
   "- )",
   "  ;",
   "  targetY",
   "  =",
   "  (",
   "  weightA",
   "  *",
   "  yA",
   "  -",
   "  weightB",
   "  *",
   "  REDUCTION_FACTOR",
   "  *",
   "  yB",
   "  )",
   "  /",
   "  (",
   "  weightA",
   "  +",
   "  weightB",
   "  )",
   "  ;",
   "  else",
   "  if",
   "  (",
   "  agingB",
   "  >=",
   "  MAXIMAL_AGING",
   "  )",
   "  {",
   "  /",
   "  we",
   "  keep",
   "  updating",
   "  the",
   "  low",
   "  bracket",
   "  ,",
   "  try",
   "  to",
   "  compensate",
   "+ thistargetY",
   "- thisfinal",
   "- int",
   "- p",
   "  =",
   "- agingB",
   "  -",
   "- MAXIMAL_AGING",
   "+ REDUCTION_FACTOR",
   "+ *",
   "+ yA",
   "  ;",
   "  final",
   "  int",
   "  p",
   "  =",
   "  agingB",
   "  -",
   "  MAXIMAL_AGING",
   "- ;",
   "- final",
   "- double",
   "- weightA",
   "- =",
   "- p",
   "- +",
   "- 1",
   "  ;",
   "  final",
   "  double",
   "  weightA",
   "  =",
   "  p",
   "  +",
   "  1",
   "  ;",
   "  final",
   "  double",
   "  weightB",
   "  =",
   "  (",
   "  1",
   "  <",
   "  <",
   "  p",
   "  )",
   "  -",
   "  1",
   "- ;",
   "- final",
   "- double",
   "- weightB",
   "- =",
   "- (",
   "- 1",
   "- <",
   "- <",
   "- p",
   "- )",
   "- -",
   "- 1",
   "- ;",
   "- targetY",
   "- =",
   "- (",
   "- weightB",
   "- *",
   "- yB",
   "- -",
   "- weightA",
   "- *",
   "- REDUCTION_FACTOR",
   "- *",
   "- yA",
   "- )",
   "- /",
   "- (",
   "- weightA",
   "- +",
   "- weightB",
   "- )",
   "  ;",
   "  targetY",
   "  =",
   "  (",
   "  weightB",
   "  *",
   "  yB",
   "  -",
   "  weightA",
   "  *",
   "  REDUCTION_FACTOR",
   "  *",
   "  yA",
   "  )",
   "  /",
   "  (",
   "  weightA",
   "  +",
   "  weightB",
   "  )",
   "  ;",
   "  else",
   "  {",
   "  /",
   "  bracketing",
   "  is",
   "  balanced",
   "  ,",
   "  try",
   "  to",
   "  find",
   "  the",
   "  root",
   "  itselfargetY",
   "  =",
   "  0",
   "  ;"
  ]
 },
 {
  "number": 38,
  "changes_set": [
   "  rivate",
   "  void",
   "  prelim",
   "  (",
   "  double",
   "  [",
   "  ]",
   "  lowerBound",
   "  ,",
   "  inal",
   "  int",
   "  tmp2",
   "  =",
   "  jpt",
   "  ;",
   "  pt",
   "  =",
   "  ipt",
   "  -",
   "  n",
   "  ;",
   "  pt",
   "  =",
   "  tmp2",
   "  ;",
   "+ throw",
   "+ new",
   "+ PathIsExploredException",
   "+ (",
   "+ )",
   "+ ;"
  ]
 },
 {
  "number": 38,
  "changes_set": [
   "  rivate",
   "  void",
   "  prelim",
   "  (",
   "  double",
   "  [",
   "  ]",
   "  lowerBound",
   "  ,",
   "  inal",
   "  int",
   "  ih",
   "  =",
   "  ipt",
   "  *",
   "  (",
   "  ipt",
   "  -",
   "  1",
   "  )",
   "  /",
   "  2",
   "  +",
   "  jpt",
   "  -",
   "  1",
   "  ;",
   "  inal",
   "  double",
   "  tmp",
   "  =",
   "  interpolationPoints",
   "  .",
   "  getEntry",
   "  (",
   "  nfm",
   "  ,",
   "  ipt",
   "  -",
   "  1",
   "  )",
   "  *",
   "  interpolationPoints",
   "  .",
   "  getEntry",
   "  (",
   "  nfm",
   "  ,",
   "  jpt",
   "  -",
   "  1",
   "  )",
   "  ;",
   "  odelSecondDerivativesValues",
   "  .",
   "  setEntry",
   "  (",
   "  ih",
   "  ,",
   "  (",
   "  fbeg",
   "  -",
   "  fAtInterpolationPoints",
   "  .",
   "  getEntry",
   "  (",
   "  ipt",
   "  )",
   "  -",
   "  fAtInterpolationPoints",
   "  .",
   "  getEntry",
   "  (",
   "  jpt",
   "  )",
   "  +",
   "  f",
   "  )",
   "  /",
   "  tmp",
   "  )",
   "  ;",
   "+ throw",
   "+ new",
   "+ PathIsExploredException",
   "+ (",
   "+ )",
   "+ ;"
  ]
 },
 {
  "number": 39,
  "changes_set": [
   "  ublic",
   "  void",
   "  integrate",
   "  (",
   "  final",
   "  ExpandableStatefulODE",
   "  equations",
   "  ,",
   "  final",
   "  double",
   "  t",
   "  )",
   "  tepSize",
   "  =",
   "  hNew",
   "  ;",
   "  if",
   "  (",
   "  forward",
   "  )",
   "  {",
   "  if",
   "  (",
   "- forward",
   "- )",
   "- {",
   "- if",
   "- (",
   "- stepStart",
   "- +",
   "- stepSize",
   "- >=",
   "- t",
   "- )",
   "- {",
   "- if",
   "- (",
   "  stepStart",
   "  +",
   "  stepSize",
   "  >=",
   "  t",
   "  )",
   "  {",
   "  stepSize",
   "  =",
   "  t",
   "  -",
   "  stepStart",
   "  ;",
   "- stepSize",
   "- =",
   "- t",
   "- -",
   "- stepStart",
   "- ;",
   "- }",
   "  }",
   "  }",
   "  else",
   "- {",
   "- }",
   "- else",
   "- {",
   "- if",
   "- (",
   "- stepStart",
   "- +",
   "- stepSize",
   "- <=",
   "- t",
   "- )",
   "  {",
   "  if",
   "  (",
   "  stepStart",
   "  +",
   "  stepSize",
   "  <=",
   "  t",
   "  )",
   "  {",
   "  stepSize",
   "  =",
   "  t",
   "  -",
   "  stepStart",
   "  ;",
   "- stepSize",
   "- =",
   "- t",
   "- -",
   "- stepStart",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  /",
   "  next",
   "  stagesor",
   "  (",
   "  int",
   "  k",
   "  =",
   "  1",
   "  ;",
   "  k",
   "  <",
   "  stages",
   "  ;",
   "  ++",
   "  k",
   "  )",
   "  {"
  ]
 },
 {
  "number": 36,
  "changes_set": [
   "  verrideublic",
   "  double",
   "  doubleValue",
   "  (",
   "  )",
   "  {",
   "  ouble",
   "  result",
   "  =",
   "  numerator",
   "  .",
   "  doubleValue",
   "  (",
   "  )",
   "  /",
   "  denominator",
   "  .",
   "  doubleValue",
   "  (",
   "  )",
   "  ;",
   "- if",
   "- (",
   "- Double",
   "- .",
   "- isNaN",
   "- (",
   "- result",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  Double",
   "  .",
   "  isNaN",
   "  (",
   "  result",
   "  )",
   "  )",
   "  {",
   "  /",
   "  Numerator",
   "  and",
   "  /",
   "  or",
   "  denominator",
   "  must",
   "  be",
   "  out",
   "  of",
   "  range",
   "  :",
   "  /",
   "  Calculate",
   "  how",
   "  far",
   "  to",
   "  shift",
   "  them",
   "  to",
   "  put",
   "  them",
   "  in",
   "  range",
   "  .",
   "  int",
   "  shift",
   "  =",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  numerator",
   "  .",
   "  bitLength",
   "  (",
   "  )",
   "  ,",
   "- int",
   "- shift",
   "- =",
   "- Math",
   "- .",
   "- max",
   "- (",
   "- numerator",
   "- .",
   "- bitLength",
   "- (",
   "- )",
   "- ,",
   "- denominator",
   "- .",
   "- bitLength",
   "- (",
   "- )",
   "- )",
   "- -",
   "- Double",
   "- .",
   "- MAX_EXPONENT",
   "- ;",
   "  denominator",
   "  .",
   "  bitLength",
   "  (",
   "  )",
   "  )",
   "  -",
   "  Double",
   "  .",
   "  MAX_EXPONENT",
   "  ;",
   "  result",
   "  =",
   "  numerator",
   "  .",
   "  shiftRight",
   "  (",
   "  shift",
   "  )",
   "  .",
   "  doubleValue",
   "  (",
   "  )",
   "  /",
   "- result",
   "- =",
   "- numerator",
   "- .",
   "- shiftRight",
   "- (",
   "- shift",
   "- )",
   "- .",
   "- doubleValue",
   "- (",
   "- )",
   "- /",
   "- denominator",
   "- .",
   "- shiftRight",
   "- (",
   "- shift",
   "- )",
   "- .",
   "- doubleValue",
   "- (",
   "- )",
   "- ;",
   "  denominator",
   "  .",
   "  shiftRight",
   "  (",
   "  shift",
   "  )",
   "  .",
   "  doubleValue",
   "  (",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  eturn",
   "  result",
   "  ;"
  ]
 },
 {
  "number": 36,
  "changes_set": [
   "  verrideublic",
   "  float",
   "  floatValue",
   "  (",
   "  )",
   "  {",
   "  loat",
   "  result",
   "  =",
   "  numerator",
   "  .",
   "  floatValue",
   "  (",
   "  )",
   "  /",
   "  denominator",
   "  .",
   "  floatValue",
   "  (",
   "  )",
   "  ;",
   "- if",
   "- (",
   "- Double",
   "- .",
   "- isNaN",
   "- (",
   "- result",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  Double",
   "  .",
   "  isNaN",
   "  (",
   "  result",
   "  )",
   "  )",
   "  {",
   "  /",
   "  Numerator",
   "  and",
   "  /",
   "  or",
   "  denominator",
   "  must",
   "  be",
   "  out",
   "  of",
   "  range",
   "  :",
   "  /",
   "  Calculate",
   "  how",
   "  far",
   "  to",
   "  shift",
   "  them",
   "  to",
   "  put",
   "  them",
   "  in",
   "  range",
   "  .",
   "  int",
   "  shift",
   "  =",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  numerator",
   "  .",
   "  bitLength",
   "  (",
   "  )",
   "  ,",
   "- int",
   "- shift",
   "- =",
   "- Math",
   "- .",
   "- max",
   "- (",
   "- numerator",
   "- .",
   "- bitLength",
   "- (",
   "- )",
   "- ,",
   "- denominator",
   "- .",
   "- bitLength",
   "- (",
   "- )",
   "- )",
   "- -",
   "- Float",
   "- .",
   "- MAX_EXPONENT",
   "- ;",
   "  denominator",
   "  .",
   "  bitLength",
   "  (",
   "  )",
   "  )",
   "  -",
   "  Float",
   "  .",
   "  MAX_EXPONENT",
   "  ;",
   "  result",
   "  =",
   "  numerator",
   "  .",
   "  shiftRight",
   "  (",
   "  shift",
   "  )",
   "  .",
   "  floatValue",
   "  (",
   "  )",
   "  /",
   "- result",
   "- =",
   "- numerator",
   "- .",
   "- shiftRight",
   "- (",
   "- shift",
   "- )",
   "- .",
   "- floatValue",
   "- (",
   "- )",
   "- /",
   "- denominator",
   "- .",
   "- shiftRight",
   "- (",
   "- shift",
   "- )",
   "- .",
   "- floatValue",
   "- (",
   "- )",
   "- ;",
   "  denominator",
   "  .",
   "  shiftRight",
   "  (",
   "  shift",
   "  )",
   "  .",
   "  floatValue",
   "  (",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  eturn",
   "  result",
   "  ;"
  ]
 },
 {
  "number": 42,
  "changes_set": [
   "  rotected",
   "  RealPointValuePair",
   "  getSolution",
   "  (",
   "  )",
   "  {",
   "  ontinue",
   "  ;",
   "  nteger",
   "  basicRow",
   "  =",
   "  getBasicRow",
   "  (",
   "  colIndex",
   "  )",
   "  ;",
   "- if",
   "- (",
   "- basicRow",
   "- !=",
   "- null",
   "- &&",
   "- basicRow",
   "- ==",
   "- 0",
   "- )",
   "- {",
   "  if",
   "  (",
   "  basicRow",
   "  !=",
   "  null",
   "  &&",
   "  basicRow",
   "  ==",
   "  0",
   "  )",
   "  {",
   "  /",
   "  if",
   "  the",
   "  basic",
   "  row",
   "  is",
   "  found",
   "  to",
   "  be",
   "  the",
   "  objective",
   "  function",
   "  row",
   "  /",
   "  set",
   "  the",
   "  coefficient",
   "  to",
   "  0",
   "  ->",
   "  this",
   "  case",
   "  handles",
   "  unconstrained",
   "  /",
   "  variables",
   "  that",
   "  are",
   "  still",
   "  part",
   "  of",
   "  the",
   "  objective",
   "+ functionif",
   "- functioncoefficients",
   "- [",
   "- i",
   "- ]",
   "- =",
   "- 0",
   "- ;",
   "- coefficients",
   "- [",
   "- i",
   "- ]",
   "- =",
   "- 0",
   "- ;",
   "- }",
   "- else",
   "- if",
   "  (",
   "  basicRows",
   "  .",
   "  contains",
   "  (",
   "  basicRow",
   "  )",
   "  )",
   "  {",
   "+ coefficients",
   "+ [",
   "+ i",
   "+ ]",
   "+ =",
   "+ 0",
   "+ ;",
   "  }",
   "  else",
   "  if",
   "  (",
   "  basicRows",
   "  .",
   "  contains",
   "  (",
   "  basicRow",
   "  )",
   "  )",
   "  {",
   "  /",
   "  if",
   "  multiple",
   "  variables",
   "  can",
   "  take",
   "  a",
   "  given",
   "  value",
   "  /",
   "  then",
   "  we",
   "  choose",
   "  the",
   "  first",
   "  and",
   "  set",
   "  the",
   "  rest",
   "  equal",
   "  to",
   "  0",
   "  oefficients",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  0",
   "  -",
   "  (",
   "  restrictToNonNegative",
   "  ?",
   "  0",
   "  :",
   "  mostNegative",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 41,
  "changes_set": [
   "  ublic",
   "  double",
   "  evaluate",
   "  (",
   "  final",
   "  double",
   "  [",
   "  ]",
   "  values",
   "  ,",
   "  final",
   "  double",
   "  [",
   "  ]",
   "  weights",
   "  ,",
   "  ouble",
   "  sumWts",
   "  =",
   "  0",
   "  ;",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "- begin",
   "+ 0",
   "  ;",
   "  i",
   "  <",
   "- begin",
   "- +",
   "+ weights",
   "+ .",
   "  length",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  begin",
   "  ;",
   "  i",
   "  <",
   "  begin",
   "  +",
   "  length",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  umWts",
   "  +=",
   "  weights",
   "  [",
   "  i",
   "  ]",
   "  ;"
  ]
 },
 {
  "number": 44,
  "changes_set": [
   "  rotected",
   "  double",
   "  acceptStep",
   "  (",
   "  final",
   "  AbstractStepInterpolator",
   "  interpolator",
   "  ,",
   "  ouble",
   "  previousT",
   "  =",
   "  interpolator",
   "  .",
   "  getGlobalPreviousTime",
   "  (",
   "  )",
   "  ;",
   "  inal",
   "  double",
   "  currentT",
   "  =",
   "  interpolator",
   "  .",
   "  getGlobalCurrentTime",
   "  (",
   "  )",
   "  ;",
   "+ resetOccurred",
   "+ =",
   "+ false",
   "+ ;",
   "  /",
   "  initialize",
   "  the",
   "  events",
   "  states",
   "  if",
   "  neededf",
   "  (",
   "  !",
   "  statesInitialized",
   "  )",
   "  {"
  ]
 },
 {
  "number": 44,
  "changes_set": [
   "  ublic",
   "  int",
   "  compare",
   "  (",
   "  EventState",
   "  es0",
   "  ,",
   "  EventState",
   "  es1",
   "  )",
   "  {",
   "  f",
   "  (",
   "  isLastStep",
   "  )",
   "  {",
   "  /",
   "  the",
   "  event",
   "  asked",
   "  to",
   "  stop",
   "  integrationystem",
   "  .",
   "  arraycopy",
   "  (",
   "  eventY",
   "  ,",
   "  0",
   "  ,",
   "  y",
   "  ,",
   "  0",
   "  ,",
   "  y",
   "  .",
   "  length",
   "  )",
   "  ;",
   "  for",
   "  (",
   "  final",
   "  EventState",
   "  remaining",
   "  :",
   "  occuringEvents",
   "  )",
   "  {",
   "- for",
   "- (",
   "- final",
   "- EventState",
   "- remaining",
   "- :",
   "- occuringEvents",
   "- )",
   "- {",
   "- remaining",
   "- .",
   "- stepAccepted",
   "- (",
   "- eventT",
   "- ,",
   "- eventY",
   "- )",
   "- ;",
   "  remaining",
   "  .",
   "  stepAccepted",
   "  (",
   "  eventT",
   "  ,",
   "  eventY",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  eturn",
   "  eventT",
   "  ;"
  ]
 },
 {
  "number": 44,
  "changes_set": [
   "  ublic",
   "  int",
   "  compare",
   "  (",
   "  EventState",
   "  es0",
   "  ,",
   "  EventState",
   "  es1",
   "  )",
   "  {",
   "  ystem",
   "  .",
   "  arraycopy",
   "  (",
   "  eventY",
   "  ,",
   "  0",
   "  ,",
   "  y",
   "  ,",
   "  0",
   "  ,",
   "  y",
   "  .",
   "  length",
   "  )",
   "  ;",
   "  omputeDerivatives",
   "  (",
   "  eventT",
   "  ,",
   "  y",
   "  ,",
   "  yDot",
   "  )",
   "  ;",
   "  esetOccurred",
   "  =",
   "  true",
   "  ;",
   "  for",
   "  (",
   "  final",
   "  EventState",
   "  remaining",
   "  :",
   "  occuringEvents",
   "  )",
   "  {",
   "- for",
   "- (",
   "- final",
   "- EventState",
   "- remaining",
   "- :",
   "- occuringEvents",
   "- )",
   "- {",
   "- remaining",
   "- .",
   "- stepAccepted",
   "- (",
   "- eventT",
   "- ,",
   "- eventY",
   "- )",
   "- ;",
   "  remaining",
   "  .",
   "  stepAccepted",
   "  (",
   "  eventT",
   "  ,",
   "  eventY",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  eturn",
   "  eventT",
   "  ;"
  ]
 },
 {
  "number": 43,
  "changes_set": [
   "  ublic",
   "  void",
   "  addValue",
   "  (",
   "  double",
   "  value",
   "  )",
   "  {",
   "  econdMoment",
   "  .",
   "  increment",
   "  (",
   "  value",
   "  )",
   "  ;",
   "  /",
   "  If",
   "  mean",
   "  ,",
   "  variance",
   "  or",
   "  geomean",
   "  have",
   "  been",
   "  overridden",
   "  ,",
   "  /",
   "  need",
   "  to",
   "  increment",
   "  theseif",
   "  (",
   "+ !",
   "+ (",
   "  meanImpl",
   "- !=",
   "+ instanceof",
   "- mean",
   "+ Mean",
   "+ )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  meanImpl",
   "  !=",
   "  mean",
   "  )",
   "  {",
   "  eanImpl",
   "  .",
   "  increment",
   "  (",
   "  value",
   "  )",
   "  ;",
   "  if",
   "  (",
   "+ !",
   "+ (",
   "  varianceImpl",
   "- !=",
   "+ instanceof",
   "- variance",
   "+ Variance",
   "+ )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  varianceImpl",
   "  !=",
   "  variance",
   "  )",
   "  {",
   "  arianceImpl",
   "  .",
   "  increment",
   "  (",
   "  value",
   "  )",
   "  ;",
   "  if",
   "  (",
   "+ !",
   "+ (",
   "  geoMeanImpl",
   "- !=",
   "- geoMean",
   "+ instanceof",
   "+ GeometricMean",
   "+ )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  geoMeanImpl",
   "  !=",
   "  geoMean",
   "  )",
   "  {",
   "  eoMeanImpl",
   "  .",
   "  increment",
   "  (",
   "  value",
   "  )",
   "  ;",
   "  ++",
   "  ;"
  ]
 },
 {
  "number": 47,
  "changes_set": [
   "  ersion",
   "  $Id$",
   "  /",
   "  ublic",
   "  class",
   "  Complex",
   "  implements",
   "  FieldElement",
   "  <",
   "  Complex",
   "  >",
   "  ,",
   "  Serializable",
   "  {",
   "  *",
   "  *",
   "  The",
   "  square",
   "  root",
   "  of",
   "  -",
   "  1.",
   "  A",
   "  number",
   "  representing",
   "  \"0.0 + 1.0i\"",
   "  *",
   "  /",
   "  ublic",
   "  static",
   "  final",
   "  Complex",
   "  I",
   "  =",
   "  new",
   "  Complex",
   "  (",
   "  0.0",
   "  ,",
   "  1.0",
   "  )",
   "  ;",
   "  /",
   "  CHECKSTYLE",
   "  :",
   "  stop",
   "  ConstantName",
   "  *",
   "  *",
   "  A",
   "  complex",
   "  number",
   "  representing",
   "  \"NaN + NaNi\"",
   "  *",
   "  /",
   "  ublic",
   "  static",
   "  final",
   "  Complex",
   "  NaN",
   "  =",
   "  new",
   "  Complex",
   "  (",
   "  Double",
   "  .",
   "  NaN",
   "  ,",
   "  Double",
   "  .",
   "  NaN",
   "  )",
   "  ;",
   "  /",
   "  CHECKSTYLE",
   "  :",
   "  resume",
   "  ConstantName",
   "  *",
   "  *",
   "  A",
   "  complex",
   "  number",
   "  representing",
   "  \"+INF + INFi\"",
   "  *",
   "  /",
   "  ublic",
   "  static",
   "  final",
   "  Complex",
   "  INF",
   "  =",
   "  new",
   "  Complex",
   "  (",
   "  Double",
   "  .",
   "  POSITIVE_INFINITY",
   "  ,",
   "  Double",
   "  .",
   "  POSITIVE_INFINITY",
   "  )",
   "  ;",
   "  *",
   "  *",
   "  A",
   "  complex",
   "  number",
   "  representing",
   "  \"1.0 + 0.0i\"",
   "  *",
   "  /",
   "  ublic",
   "  static",
   "  final",
   "  Complex",
   "  ONE",
   "  =",
   "  new",
   "  Complex",
   "  (",
   "  1.0",
   "  ,",
   "  0.0",
   "  )",
   "  ;",
   "  *",
   "  *",
   "  A",
   "  complex",
   "  number",
   "  representing",
   "  \"0.0 + 0.0i\"",
   "  *",
   "  /",
   "  ublic",
   "  static",
   "  final",
   "  Complex",
   "  ZERO",
   "  =",
   "  new",
   "  Complex",
   "  (",
   "  0.0",
   "  ,",
   "  0.0",
   "  )",
   "  ;",
   "  *",
   "  *",
   "  Serializable",
   "  version",
   "  identifier",
   "  *",
   "  /",
   "  rivate",
   "  static",
   "  final",
   "  long",
   "  serialVersionUID",
   "  =",
   "  -",
   "  6195664516687396620L",
   "  ;",
   "  *",
   "  *",
   "  The",
   "  imaginary",
   "  part",
   "  .",
   "  *",
   "  /",
   "  rivate",
   "  final",
   "  double",
   "  imaginary",
   "  ;",
   "  *",
   "  *",
   "  The",
   "  real",
   "  part",
   "  .",
   "  *",
   "  /",
   "  rivate",
   "  final",
   "  double",
   "  real",
   "  ;",
   "  *",
   "  *",
   "  Record",
   "  whether",
   "  this",
   "  complex",
   "  number",
   "  is",
   "  equal",
   "  to",
   "  NaN",
   "  .",
   "  *",
   "  /",
   "  rivate",
   "  final",
   "  transient",
   "  boolean",
   "  isNaN",
   "  ;",
   "  *",
   "  *",
   "  Record",
   "  whether",
   "  this",
   "  complex",
   "  number",
   "  is",
   "  infinite",
   "  .",
   "  *",
   "  /",
   "  rivate",
   "  final",
   "  transient",
   "  boolean",
   "  isInfinite",
   "  ;",
   "  *",
   "  *",
   "  Record",
   "  whether",
   "  this",
   "  complex",
   "  number",
   "  is",
   "  zero",
   "  .",
   "  *",
   "  /",
   "  private",
   "  final",
   "  transient",
   "  boolean",
   "  isZero",
   "  ;",
   "- private",
   "- final",
   "- transient",
   "- boolean",
   "- isZero",
   "- ;",
   "  *",
   "  *",
   "  Create",
   "  a",
   "  complex",
   "  number",
   "  given",
   "  only",
   "  the",
   "  real",
   "  part",
   "  ."
  ]
 },
 {
  "number": 47,
  "changes_set": [
   "  ublic",
   "  Complex",
   "  (",
   "  double",
   "  real",
   "  )",
   "  {",
   "  ublic",
   "  Complex",
   "  (",
   "  double",
   "  real",
   "  ,",
   "  double",
   "  imaginary",
   "  )",
   "  {",
   "  his",
   "  .",
   "  real",
   "  =",
   "  real",
   "  ;",
   "  his",
   "  .",
   "  imaginary",
   "  =",
   "  imaginary",
   "  ;",
   "  sNaN",
   "  =",
   "  Double",
   "  .",
   "  isNaN",
   "  (",
   "  real",
   "  )",
   "  ||",
   "  Double",
   "  .",
   "  isNaN",
   "  (",
   "  imaginary",
   "  )",
   "  ;",
   "  sInfinite",
   "  =",
   "  !",
   "  isNaN",
   "  &&",
   "  Double",
   "  .",
   "  isInfinite",
   "  (",
   "  real",
   "  )",
   "  ||",
   "  Double",
   "  .",
   "  isInfinite",
   "  (",
   "  imaginary",
   "  )",
   "  )",
   "  ;",
   "  isZero",
   "  =",
   "  real",
   "  ==",
   "  0",
   "  &&",
   "  imaginary",
   "  ==",
   "  0",
   "  ;",
   "- isZero",
   "- =",
   "- real",
   "- ==",
   "- 0",
   "- &&",
   "- imaginary",
   "- ==",
   "- 0",
   "- ;",
   "  *",
   "  *",
   "  Return",
   "  the",
   "  absolute",
   "  value",
   "  of",
   "  this",
   "  complex",
   "  number",
   "  .",
   "  Returns",
   "  {"
  ]
 },
 {
  "number": 47,
  "changes_set": [
   "  ublic",
   "  Complex",
   "  conjugate",
   "  (",
   "  )",
   "  {",
   "  ublic",
   "  Complex",
   "  divide",
   "  (",
   "  Complex",
   "  divisor",
   "  )",
   "  hrows",
   "  NullArgumentException",
   "  {",
   "  athUtils",
   "  .",
   "  checkNotNull",
   "  (",
   "  divisor",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  isNaN",
   "  ||",
   "  divisor",
   "  .",
   "  isNaN",
   "  )",
   "  {",
   "  eturn",
   "  NaN",
   "  ;",
   "  if",
   "  (",
   "  divisor",
   "  .",
   "- isZero",
   "+ getReal",
   "+ (",
   "  )",
   "+ ==",
   "+ 0.0",
   "+ &&",
   "+ divisor",
   "+ .",
   "+ getImaginary",
   "+ (",
   "+ )",
   "+ ==",
   "+ 0.0",
   "+ )",
   "  {",
   "+ return",
   "+ NaN",
   "+ ;",
   "  if",
   "  (",
   "  divisor",
   "  .",
   "  isZero",
   "  )",
   "  {",
   "  return",
   "  isZero",
   "  ?",
   "  NaN",
   "  :",
   "  INF",
   "  ;",
   "- return",
   "- isZero",
   "- ?",
   "- NaN",
   "- :",
   "- INF",
   "- ;",
   "  f",
   "  (",
   "  divisor",
   "  .",
   "  isInfinite",
   "  (",
   "  )",
   "  &&",
   "  !",
   "  isInfinite",
   "  (",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  ZERO",
   "  ;",
   "  inal",
   "  double",
   "  c",
   "  =",
   "  divisor",
   "  .",
   "  getReal",
   "  (",
   "  )",
   "  ;",
   "  inal",
   "  double",
   "  d",
   "  =",
   "  divisor",
   "  .",
   "  getImaginary",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  FastMath",
   "  .",
   "  abs",
   "  (",
   "  c",
   "  )",
   "  <",
   "  FastMath",
   "  .",
   "  abs",
   "  (",
   "  d",
   "  )",
   "  )",
   "  {",
   "  ouble",
   "  q",
   "  =",
   "  c",
   "  /",
   "  d",
   "  ;",
   "  ouble",
   "  denominator",
   "  =",
   "  c",
   "  *",
   "  q",
   "  +",
   "  d",
   "  ;",
   "  eturn",
   "  createComplex",
   "  (",
   "  (",
   "  real",
   "  *",
   "  q",
   "  +",
   "  imaginary",
   "  )",
   "  /",
   "  denominator",
   "  ,",
   "  imaginary",
   "  *",
   "  q",
   "  -",
   "  real",
   "  )",
   "  /",
   "  denominator",
   "  )",
   "  ;",
   "  else",
   "  {",
   "  ouble",
   "  q",
   "  =",
   "  d",
   "  /",
   "  c",
   "  ;",
   "  ouble",
   "  denominator",
   "  =",
   "  d",
   "  *",
   "  q",
   "  +",
   "  c",
   "  ;",
   "  eturn",
   "  createComplex",
   "  (",
   "  (",
   "  imaginary",
   "  *",
   "  q",
   "  +",
   "  real",
   "  )",
   "  /",
   "  denominator",
   "  ,",
   "  imaginary",
   "  -",
   "  real",
   "  *",
   "  q",
   "  )",
   "  /",
   "  denominator",
   "  )",
   "  ;",
   "  *",
   "  *",
   "  Returns",
   "  a",
   "  {"
  ]
 },
 {
  "number": 47,
  "changes_set": [
   "  ee",
   "  divide",
   "  (",
   "  Complex",
   "  )",
   "  /",
   "  ublic",
   "  Complex",
   "  divide",
   "  (",
   "  double",
   "  divisor",
   "  )",
   "  {",
   "  f",
   "  (",
   "  isNaN",
   "  ||",
   "  Double",
   "  .",
   "  isNaN",
   "  (",
   "  divisor",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  NaN",
   "  ;",
   "  f",
   "  (",
   "  divisor",
   "  ==",
   "  0d",
   "  )",
   "  {",
   "  return",
   "- isZero",
   "- ?",
   "  NaN",
   "- :",
   "- INF",
   "  ;",
   "  return",
   "  isZero",
   "  ?",
   "  NaN",
   "  :",
   "  INF",
   "  ;",
   "  f",
   "  (",
   "  Double",
   "  .",
   "  isInfinite",
   "  (",
   "  divisor",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  !",
   "  isInfinite",
   "  (",
   "  )",
   "  ?",
   "  ZERO",
   "  :",
   "  NaN",
   "  ;",
   "  eturn",
   "  createComplex",
   "  (",
   "  real",
   "  /",
   "  divisor",
   "  ,",
   "  maginary",
   "  /",
   "  divisor",
   "  )",
   "  ;",
   "  *",
   "  *",
   "  Test",
   "  for",
   "  the",
   "  equality",
   "  of",
   "  two",
   "  Complex",
   "  objects",
   "  .",
   "  If",
   "  both",
   "  the",
   "  real",
   "  and",
   "  imaginary",
   "  parts",
   "  of",
   "  two",
   "  complex",
   "  numbersare",
   "  exactly",
   "  the",
   "  same",
   "  ,",
   "  and",
   "  neither",
   "  is",
   "  {"
  ]
 },
 {
  "number": 48,
  "changes_set": [
   "  rotected",
   "  final",
   "  double",
   "  doSolve",
   "  (",
   "  )",
   "  {",
   "  ase",
   "  REGULA_FALSI",
   "  :",
   "  /",
   "  Detect",
   "  early",
   "  that",
   "  algorithm",
   "  is",
   "  stuck",
   "  ,",
   "  instead",
   "  of",
   "  waiting",
   "  /",
   "  for",
   "  the",
   "  maximum",
   "  number",
   "  of",
   "  iterations",
   "  to",
   "  be",
   "  exceeded",
   "  .",
   "  if",
   "  (",
   "  x",
   "  ==",
   "  x1",
   "  )",
   "  {",
   "- if",
   "- (",
   "- x",
   "- ==",
   "- x1",
   "- )",
   "- {",
   "  throw",
   "  new",
   "  ConvergenceException",
   "  (",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- ConvergenceException",
   "- (",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  reak",
   "  ;",
   "  efault",
   "  :",
   "  /",
   "  Should",
   "  never",
   "  happen",
   "  ."
  ]
 },
 {
  "number": 50,
  "changes_set": [
   "  rotected",
   "  final",
   "  double",
   "  doSolve",
   "  (",
   "  )",
   "  {",
   "  reak",
   "  ;",
   "  ase",
   "  REGULA_FALSI",
   "  :",
   "  /",
   "  Nothing",
   "  .",
   "+ if",
   "+ (",
   "+ x",
   "+ ==",
   "+ x1",
   "+ )",
   "+ {",
   "+ x0",
   "+ =",
   "+ 0.5",
   "+ *",
   "+ (",
   "+ x0",
   "+ +",
   "+ x1",
   "+ -",
   "+ FastMath",
   "+ .",
   "+ max",
   "+ (",
   "+ rtol",
   "+ *",
   "+ FastMath",
   "+ .",
   "+ abs",
   "+ (",
   "+ x1",
   "+ )",
   "+ ,",
   "+ atol",
   "+ )",
   "+ )",
   "+ ;",
   "+ f0",
   "+ =",
   "+ computeObjectiveValue",
   "+ (",
   "+ x0",
   "+ )",
   "+ ;",
   "+ }",
   "  reak",
   "  ;",
   "  efault",
   "  :",
   "  /",
   "  Should",
   "  never",
   "  happen",
   "  ."
  ]
 },
 {
  "number": 49,
  "changes_set": [
   "  ublic",
   "  double",
   "  dotProduct",
   "  (",
   "  RealVector",
   "  v",
   "  )",
   "  {",
   "  ublic",
   "  OpenMapRealVector",
   "  ebeDivide",
   "  (",
   "  RealVector",
   "  v",
   "  )",
   "  {",
   "  heckVectorDimensions",
   "  (",
   "  v",
   "  .",
   "  getDimension",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  penMapRealVector",
   "  res",
   "  =",
   "  new",
   "  OpenMapRealVector",
   "  (",
   "  this",
   "  )",
   "  ;",
   "  Iterator",
   "  iter",
   "  =",
   "+ res",
   "+ .",
   "  entries",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  ;",
   "  Iterator",
   "  iter",
   "  =",
   "  entries",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  ;",
   "  hile",
   "  (",
   "  iter",
   "  .",
   "  hasNext",
   "  (",
   "  )",
   "  )",
   "  {",
   "  ter",
   "  .",
   "  advance",
   "  (",
   "  )",
   "  ;",
   "  es",
   "  .",
   "  setEntry",
   "  (",
   "  iter",
   "  .",
   "  key",
   "  (",
   "  )",
   "  ,",
   "  iter",
   "  .",
   "  value",
   "  (",
   "  )",
   "  /",
   "  v",
   "  .",
   "  getEntry",
   "  (",
   "  iter",
   "  .",
   "  key",
   "  (",
   "  )",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 49,
  "changes_set": [
   "  ublic",
   "  OpenMapRealVector",
   "  ebeDivide",
   "  (",
   "  RealVector",
   "  v",
   "  )",
   "  {",
   "  ublic",
   "  OpenMapRealVector",
   "  ebeDivide",
   "  (",
   "  double",
   "  [",
   "  ]",
   "  v",
   "  )",
   "  {",
   "  heckVectorDimensions",
   "  (",
   "  v",
   "  .",
   "  length",
   "  )",
   "  ;",
   "  penMapRealVector",
   "  res",
   "  =",
   "  new",
   "  OpenMapRealVector",
   "  (",
   "  this",
   "  )",
   "  ;",
   "  Iterator",
   "  iter",
   "  =",
   "+ res",
   "+ .",
   "  entries",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  ;",
   "  Iterator",
   "  iter",
   "  =",
   "  entries",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  ;",
   "  hile",
   "  (",
   "  iter",
   "  .",
   "  hasNext",
   "  (",
   "  )",
   "  )",
   "  {",
   "  ter",
   "  .",
   "  advance",
   "  (",
   "  )",
   "  ;",
   "  es",
   "  .",
   "  setEntry",
   "  (",
   "  iter",
   "  .",
   "  key",
   "  (",
   "  )",
   "  ,",
   "  iter",
   "  .",
   "  value",
   "  (",
   "  )",
   "  /",
   "  v",
   "  [",
   "  iter",
   "  .",
   "  key",
   "  (",
   "  )",
   "  ]",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 49,
  "changes_set": [
   "  ublic",
   "  OpenMapRealVector",
   "  ebeDivide",
   "  (",
   "  double",
   "  [",
   "  ]",
   "  v",
   "  )",
   "  {",
   "  ublic",
   "  OpenMapRealVector",
   "  ebeMultiply",
   "  (",
   "  RealVector",
   "  v",
   "  )",
   "  {",
   "  heckVectorDimensions",
   "  (",
   "  v",
   "  .",
   "  getDimension",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  penMapRealVector",
   "  res",
   "  =",
   "  new",
   "  OpenMapRealVector",
   "  (",
   "  this",
   "  )",
   "  ;",
   "  Iterator",
   "  iter",
   "  =",
   "+ res",
   "+ .",
   "  entries",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  ;",
   "  Iterator",
   "  iter",
   "  =",
   "  entries",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  ;",
   "  hile",
   "  (",
   "  iter",
   "  .",
   "  hasNext",
   "  (",
   "  )",
   "  )",
   "  {",
   "  ter",
   "  .",
   "  advance",
   "  (",
   "  )",
   "  ;",
   "  es",
   "  .",
   "  setEntry",
   "  (",
   "  iter",
   "  .",
   "  key",
   "  (",
   "  )",
   "  ,",
   "  iter",
   "  .",
   "  value",
   "  (",
   "  )",
   "  *",
   "  v",
   "  .",
   "  getEntry",
   "  (",
   "  iter",
   "  .",
   "  key",
   "  (",
   "  )",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 49,
  "changes_set": [
   "  ublic",
   "  OpenMapRealVector",
   "  ebeMultiply",
   "  (",
   "  RealVector",
   "  v",
   "  )",
   "  {",
   "  ublic",
   "  OpenMapRealVector",
   "  ebeMultiply",
   "  (",
   "  double",
   "  [",
   "  ]",
   "  v",
   "  )",
   "  {",
   "  heckVectorDimensions",
   "  (",
   "  v",
   "  .",
   "  length",
   "  )",
   "  ;",
   "  penMapRealVector",
   "  res",
   "  =",
   "  new",
   "  OpenMapRealVector",
   "  (",
   "  this",
   "  )",
   "  ;",
   "  Iterator",
   "  iter",
   "  =",
   "+ res",
   "+ .",
   "  entries",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  ;",
   "  Iterator",
   "  iter",
   "  =",
   "  entries",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  ;",
   "  hile",
   "  (",
   "  iter",
   "  .",
   "  hasNext",
   "  (",
   "  )",
   "  )",
   "  {",
   "  ter",
   "  .",
   "  advance",
   "  (",
   "  )",
   "  ;",
   "  es",
   "  .",
   "  setEntry",
   "  (",
   "  iter",
   "  .",
   "  key",
   "  (",
   "  )",
   "  ,",
   "  iter",
   "  .",
   "  value",
   "  (",
   "  )",
   "  *",
   "  v",
   "  [",
   "  iter",
   "  .",
   "  key",
   "  (",
   "  )",
   "  ]",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 45,
  "changes_set": [
   "  /",
   "  ublic",
   "  OpenMapRealMatrix",
   "  (",
   "  int",
   "  rowDimension",
   "  ,",
   "  int",
   "  columnDimension",
   "  )",
   "  {",
   "  uper",
   "  (",
   "  rowDimension",
   "  ,",
   "  columnDimension",
   "  )",
   "  ;",
   "  long",
   "  lRow",
   "  =",
   "  (",
   "  long",
   "  )",
   "  rowDimension",
   "  ;",
   "  long",
   "- lRow",
   "- =",
   "- (",
   "- long",
   "- )",
   "- rowDimension",
   "- ;",
   "- long",
   "  lCol",
   "  =",
   "  (",
   "  long",
   "  )",
   "  columnDimension",
   "  ;",
   "- long",
   "- lCol",
   "- =",
   "- (",
   "- long",
   "- )",
   "- columnDimension",
   "- ;",
   "- if",
   "- (",
   "- lRow",
   "- *",
   "- lCol",
   "- >=",
   "- (",
   "- long",
   "- )",
   "- Integer",
   "- .",
   "- MAX_VALUE",
   "- )",
   "- {",
   "  if",
   "  (",
   "  lRow",
   "  *",
   "  lCol",
   "  >=",
   "  (",
   "  long",
   "  )",
   "  Integer",
   "  .",
   "  MAX_VALUE",
   "  )",
   "  {",
   "  throw",
   "  new",
   "  NumberIsTooLargeException",
   "  (",
   "  lRow",
   "  *",
   "  lCol",
   "  ,",
   "  Integer",
   "  .",
   "  MAX_VALUE",
   "  ,",
   "  false",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- NumberIsTooLargeException",
   "- (",
   "- lRow",
   "- *",
   "- lCol",
   "- ,",
   "- Integer",
   "- .",
   "- MAX_VALUE",
   "- ,",
   "- false",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  his",
   "  .",
   "  rows",
   "  =",
   "  rowDimension",
   "  ;",
   "  his",
   "  .",
   "  columns",
   "  =",
   "  columnDimension",
   "  ;",
   "  his",
   "  .",
   "  entries",
   "  =",
   "  new",
   "  OpenIntToDoubleHashMap",
   "  (",
   "  0.0",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 51,
  "changes_set": [
   "  rotected",
   "  final",
   "  double",
   "  doSolve",
   "  (",
   "  )",
   "  {",
   "  ase",
   "  PEGASUS",
   "  :",
   "  reak",
   "  ;",
   "  case",
   "  REGULA_FALSI",
   "  :",
   "- case",
   "- REGULA_FALSI",
   "- :",
   "- if",
   "- (",
   "- x",
   "- ==",
   "- x1",
   "- )",
   "- {",
   "  if",
   "  (",
   "  x",
   "  ==",
   "  x1",
   "  )",
   "  {",
   "  final",
   "  double",
   "  delta",
   "  =",
   "  FastMath",
   "  .",
   "  max",
   "  (",
   "  rtol",
   "  *",
   "  FastMath",
   "  .",
   "  abs",
   "  (",
   "  x1",
   "  )",
   "  ,",
   "- final",
   "- double",
   "- delta",
   "- =",
   "- FastMath",
   "- .",
   "- max",
   "- (",
   "- rtol",
   "- *",
   "- FastMath",
   "- .",
   "- abs",
   "- (",
   "- x1",
   "- )",
   "- ,",
   "- atol",
   "- )",
   "- ;",
   "  atol",
   "  )",
   "  ;",
   "  /",
   "  Update",
   "  formula",
   "  cannot",
   "  make",
   "  any",
   "  progress",
   "  :",
   "  Update",
   "  the",
   "  /",
   "  search",
   "  interval",
   "  .",
   "  x0",
   "  =",
   "  0.5",
   "  *",
   "  (",
   "  x0",
   "  +",
   "  x1",
   "  -",
   "  delta",
   "  )",
   "  ;",
   "- x0",
   "- =",
   "- 0.5",
   "- *",
   "- (",
   "- x0",
   "- +",
   "- x1",
   "- -",
   "- delta",
   "- )",
   "- ;",
   "- f0",
   "- =",
   "- computeObjectiveValue",
   "- (",
   "- x0",
   "- )",
   "- ;",
   "  f0",
   "  =",
   "  computeObjectiveValue",
   "  (",
   "  x0",
   "  )",
   "  ;",
   "  }",
   "- }",
   "- break",
   "- ;",
   "  break",
   "  ;",
   "  efault",
   "  :",
   "  /",
   "  Should",
   "  never",
   "  happen",
   "  .",
   "- throw",
   "- new",
   "- MathInternalError",
   "- (",
   "- )",
   "- ;",
   "  throw",
   "  new",
   "  MathInternalError",
   "  (",
   "  )",
   "  ;",
   "  /",
   "  Update",
   "  from",
   "  [",
   "  x0",
   "  ,",
   "  x1",
   "  ]",
   "  to",
   "  [",
   "  x0",
   "  ,",
   "  x",
   "  ]",
   "  ."
  ]
 },
 {
  "number": 58,
  "changes_set": [
   "  ublic",
   "  double",
   "  value",
   "  (",
   "  double",
   "  x",
   "  ,",
   "  double",
   "  [",
   "  ]",
   "  p",
   "  )",
   "  {",
   "  /",
   "  ublic",
   "  double",
   "  [",
   "  ]",
   "  fit",
   "  (",
   "  )",
   "  {",
   "  inal",
   "  double",
   "  [",
   "  ]",
   "  guess",
   "  =",
   "  (",
   "  new",
   "  ParameterGuesser",
   "  (",
   "  getObservations",
   "  (",
   "  )",
   "  )",
   "  )",
   "  .",
   "  guess",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  fit",
   "  (",
   "+ new",
   "+ Gaussian",
   "+ .",
   "+ Parametric",
   "+ (",
   "+ )",
   "+ ,",
   "  guess",
   "  )",
   "  ;",
   "  return",
   "  fit",
   "  (",
   "  guess",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 59,
  "changes_set": [
   "  eturn",
   "  b",
   "  if",
   "  a",
   "  is",
   "  lesser",
   "  or",
   "  equal",
   "  to",
   "  b",
   "  ,",
   "  a",
   "  otherwise",
   "  /",
   "  ublic",
   "  static",
   "  float",
   "  max",
   "  (",
   "  final",
   "  float",
   "  a",
   "  ,",
   "  final",
   "  float",
   "  b",
   "  )",
   "  {",
   "  return",
   "  (",
   "  a",
   "  <=",
   "  b",
   "  )",
   "  ?",
   "  b",
   "  :",
   "  (",
   "  Float",
   "  .",
   "  isNaN",
   "  (",
   "  a",
   "  +",
   "  b",
   "  )",
   "  ?",
   "  Float",
   "  .",
   "  NaN",
   "  :",
   "- a",
   "+ b",
   "  )",
   "  ;",
   "  return",
   "  (",
   "  a",
   "  <=",
   "  b",
   "  )",
   "  ?",
   "  b",
   "  :",
   "  (",
   "  Float",
   "  .",
   "  isNaN",
   "  (",
   "  a",
   "  +",
   "  b",
   "  )",
   "  ?",
   "  Float",
   "  .",
   "  NaN",
   "  :",
   "  a",
   "  )",
   "  ;",
   "  *",
   "  *",
   "  Compute",
   "  the",
   "  maximum",
   "  of",
   "  two",
   "  values"
  ]
 },
 {
  "number": 57,
  "changes_set": [
   "  ublic",
   "  KMeansPlusPlusClusterer",
   "  (",
   "  final",
   "  Random",
   "  random",
   "  ,",
   "  final",
   "  EmptyClusterStrategy",
   "  ehile",
   "  (",
   "  resultSet",
   "  .",
   "  size",
   "  (",
   "  )",
   "  <",
   "  k",
   "  )",
   "  {",
   "  /",
   "  For",
   "  each",
   "  data",
   "  point",
   "  x",
   "  ,",
   "  compute",
   "  D",
   "  (",
   "  x",
   "  )",
   "  ,",
   "  the",
   "  distance",
   "  between",
   "  x",
   "  and",
   "  /",
   "  the",
   "  nearest",
   "  center",
   "  that",
   "  has",
   "  already",
   "  been",
   "  chosen",
   "  .",
   "- double",
   "+ int",
   "  sum",
   "  =",
   "  0",
   "  ;",
   "  double",
   "  sum",
   "  =",
   "  0",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  pointSet",
   "  .",
   "  size",
   "  (",
   "  )",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  inal",
   "  T",
   "  p",
   "  =",
   "  pointSet",
   "  .",
   "  get",
   "  (",
   "  i",
   "  )",
   "  ;",
   "  inal",
   "  Cluster",
   "  <",
   "  T",
   "  >",
   "  nearest",
   "  =",
   "  getNearestCluster",
   "  (",
   "  resultSet",
   "  ,",
   "  p",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 53,
  "changes_set": [
   "  ublic",
   "  double",
   "  abs",
   "  (",
   "  )",
   "  {",
   "  ublic",
   "  Complex",
   "  add",
   "  (",
   "  Complex",
   "  rhs",
   "  )",
   "  hrows",
   "  NullArgumentException",
   "  {",
   "  athUtils",
   "  .",
   "  checkNotNull",
   "  (",
   "  rhs",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  isNaN",
   "  ||",
   "  rhs",
   "  .",
   "  isNaN",
   "  )",
   "  {",
   "- if",
   "- (",
   "- isNaN",
   "- ||",
   "- rhs",
   "- .",
   "- isNaN",
   "- )",
   "- {",
   "  return",
   "  NaN",
   "  ;",
   "- return",
   "- NaN",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  createComplex",
   "  (",
   "  real",
   "  +",
   "  rhs",
   "  .",
   "  getReal",
   "  (",
   "  )",
   "  ,",
   "  maginary",
   "  +",
   "  rhs",
   "  .",
   "  getImaginary",
   "  (",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 61,
  "changes_set": [
   "  mport",
   "  java",
   "  .",
   "  io",
   "  .",
   "  Serializable",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  apache",
   "  .",
   "  commons",
   "  .",
   "  math",
   "  .",
   "  MathException",
   "  ;",
   "  import",
   "  org",
   "  .",
   "  apache",
   "  .",
   "  commons",
   "  .",
   "  math",
   "  .",
   "+ MathRuntimeException",
   "- exception",
   "- .",
   "- NotStrictlyPositiveException",
   "  ;",
   "  import",
   "  org",
   "  .",
   "  apache",
   "  .",
   "  commons",
   "  .",
   "  math",
   "  .",
   "  exception",
   "  .",
   "  NotStrictlyPositiveException",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  apache",
   "  .",
   "  commons",
   "  .",
   "  math",
   "  .",
   "  exception",
   "  .",
   "  util",
   "  .",
   "  LocalizedFormats",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  apache",
   "  .",
   "  commons",
   "  .",
   "  math",
   "  .",
   "  special",
   "  .",
   "  Gamma",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  apache",
   "  .",
   "  commons",
   "  .",
   "  math",
   "  .",
   "  util",
   "  .",
   "  MathUtils",
   "  ;"
  ]
 },
 {
  "number": 61,
  "changes_set": [
   "  ublic",
   "  PoissonDistributionImpl",
   "  (",
   "  double",
   "  p",
   "  )",
   "  {",
   "  /",
   "  ublic",
   "  PoissonDistributionImpl",
   "  (",
   "  double",
   "  p",
   "  ,",
   "  double",
   "  epsilon",
   "  ,",
   "  int",
   "  maxIterations",
   "  )",
   "  {",
   "  f",
   "  (",
   "  p",
   "  <=",
   "  0",
   "  )",
   "  {",
   "  throw",
   "- new",
   "- NotStrictlyPositiveException",
   "+ MathRuntimeException",
   "+ .",
   "+ createIllegalArgumentException",
   "  (",
   "  LocalizedFormats",
   "  .",
   "- MEAN",
   "+ NOT_POSITIVE_POISSON_MEAN",
   "  ,",
   "  p",
   "  )",
   "  ;",
   "  throw",
   "  new",
   "  NotStrictlyPositiveException",
   "  (",
   "  LocalizedFormats",
   "  .",
   "  MEAN",
   "  ,",
   "  p",
   "  )",
   "  ;",
   "  ean",
   "  =",
   "  p",
   "  ;",
   "  ormal",
   "  =",
   "  new",
   "  NormalDistributionImpl",
   "  (",
   "  p",
   "  ,",
   "  FastMath",
   "  .",
   "  sqrt",
   "  (",
   "  p",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 55,
  "changes_set": [
   "  ublic",
   "  static",
   "  double",
   "  dotProduct",
   "  (",
   "  Vector3D",
   "  v1",
   "  ,",
   "  Vector3D",
   "  v2",
   "  )",
   "  {",
   "  /",
   "  ublic",
   "  static",
   "  Vector3D",
   "  crossProduct",
   "  (",
   "  final",
   "  Vector3D",
   "  v1",
   "  ,",
   "  final",
   "  Vector3D",
   "  v2",
   "  )",
   "  {",
   "  final",
   "  double",
   "  n1",
   "  =",
   "  v1",
   "- .",
   "- getNormSq",
   "- (",
   "- )",
   "- ;",
   "- final",
   "- double",
   "- n1",
   "- =",
   "- v1",
   "- .",
   "- getNormSq",
   "- (",
   "- )",
   "- ;",
   "- final",
   "- double",
   "- n2",
   "- =",
   "- v2",
   "  .",
   "  getNormSq",
   "  (",
   "  )",
   "  ;",
   "  final",
   "  double",
   "  n2",
   "  =",
   "  v2",
   "  .",
   "  getNormSq",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  (",
   "  n1",
   "  *",
   "  n2",
   "  )",
   "  <",
   "  MathUtils",
   "  .",
   "  SAFE_MIN",
   "  )",
   "  {",
   "- if",
   "- (",
   "- (",
   "- n1",
   "- *",
   "- n2",
   "- )",
   "- <",
   "- MathUtils",
   "- .",
   "- SAFE_MIN",
   "- )",
   "- {",
   "  return",
   "  ZERO",
   "  ;",
   "- return",
   "- ZERO",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  rescale",
   "  both",
   "  vectors",
   "  without",
   "  losing",
   "  precision",
   "  ,",
   "  /",
   "  to",
   "  ensure",
   "  their",
   "  norm",
   "  are",
   "  the",
   "  same",
   "  order",
   "  of",
   "  magnitudefinal",
   "  int",
   "  deltaExp",
   "  =",
   "  (",
   "  FastMath",
   "  .",
   "  getExponent",
   "  (",
   "  n1",
   "  )",
   "  -",
   "  FastMath",
   "  .",
   "  getExponent",
   "  (",
   "  n2",
   "  )",
   "  )",
   "  /",
   "  4",
   "  ;",
   "  final",
   "- int",
   "- deltaExp",
   "- =",
   "- (",
   "- FastMath",
   "- .",
   "- getExponent",
   "- (",
   "- n1",
   "- )",
   "- -",
   "- FastMath",
   "- .",
   "- getExponent",
   "- (",
   "- n2",
   "- )",
   "- )",
   "- /",
   "- 4",
   "- ;",
   "- final",
   "  double",
   "  x1",
   "  =",
   "  FastMath",
   "  .",
   "  scalb",
   "  (",
   "  v1",
   "  .",
   "  x",
   "  ,",
   "  -",
   "  deltaExp",
   "  )",
   "  ;",
   "  final",
   "  double",
   "- x1",
   "+ y1",
   "  =",
   "  FastMath",
   "  .",
   "  scalb",
   "  (",
   "  v1",
   "+ .",
   "+ y",
   "+ ,",
   "+ -",
   "+ deltaExp",
   "+ )",
   "+ ;",
   "+ final",
   "+ double",
   "+ z1",
   "+ =",
   "+ FastMath",
   "+ .",
   "+ scalb",
   "+ (",
   "+ v1",
   "+ .",
   "+ z",
   "+ ,",
   "+ -",
   "+ deltaExp",
   "+ )",
   "+ ;",
   "+ final",
   "+ double",
   "+ x2",
   "+ =",
   "+ FastMath",
   "+ .",
   "+ scalb",
   "+ (",
   "+ v2",
   "  .",
   "  x",
   "  ,",
   "- -",
   "  deltaExp",
   "  )",
   "  ;",
   "  final",
   "  double",
   "- y1",
   "+ y2",
   "  =",
   "  FastMath",
   "  .",
   "  scalb",
   "  (",
   "- v1",
   "+ v2",
   "  .",
   "  y",
   "- ,",
   "- -",
   "- deltaExp",
   "- )",
   "- ;",
   "- final",
   "- double",
   "- y1",
   "- =",
   "- FastMath",
   "- .",
   "- scalb",
   "- (",
   "- v1",
   "- .",
   "- y",
   "- ,",
   "- -",
   "- deltaExp",
   "- )",
   "- ;",
   "- final",
   "- double",
   "- z1",
   "- =",
   "- FastMath",
   "- .",
   "- scalb",
   "- (",
   "- v1",
   "- .",
   "- z",
   "- ,",
   "- -",
   "- deltaExp",
   "- )",
   "- ;",
   "- final",
   "- double",
   "- z1",
   "- =",
   "- FastMath",
   "- .",
   "- scalb",
   "- (",
   "- v1",
   "- .",
   "- z",
   "- ,",
   "- -",
   "- deltaExp",
   "- )",
   "- ;",
   "- final",
   "- double",
   "- x2",
   "- =",
   "- FastMath",
   "- .",
   "- scalb",
   "- (",
   "- v2",
   "- .",
   "- x",
   "- ,",
   "- deltaExp",
   "- )",
   "- ;",
   "- final",
   "- double",
   "- x2",
   "- =",
   "- FastMath",
   "- .",
   "- scalb",
   "- (",
   "- v2",
   "- .",
   "- x",
   "- ,",
   "- deltaExp",
   "- )",
   "- ;",
   "- final",
   "- double",
   "- y2",
   "- =",
   "- FastMath",
   "- .",
   "- scalb",
   "- (",
   "- v2",
   "- .",
   "- y",
   "- ,",
   "- deltaExp",
   "- )",
   "- ;",
   "- final",
   "- double",
   "- y2",
   "- =",
   "- FastMath",
   "- .",
   "- scalb",
   "- (",
   "- v2",
   "- .",
   "- y",
   "- ,",
   "- deltaExp",
   "- )",
   "- ;",
   "- final",
   "- double",
   "- z2",
   "- =",
   "- FastMath",
   "- .",
   "- scalb",
   "- (",
   "- v2",
   "- .",
   "- z",
   "  ,",
   "  deltaExp",
   "  )",
   "  ;",
   "  final",
   "  double",
   "  z2",
   "  =",
   "  FastMath",
   "  .",
   "  scalb",
   "  (",
   "  v2",
   "  .",
   "  z",
   "  ,",
   "  deltaExp",
   "  )",
   "  ;",
   "  /",
   "  we",
   "  reduce",
   "  cancellation",
   "  errors",
   "  by",
   "  preconditioning",
   "  ,",
   "  /",
   "  we",
   "  replace",
   "  v1",
   "  by",
   "  v3",
   "  =",
   "  v1",
   "  -",
   "  rho",
   "  v2",
   "  with",
   "  rho",
   "  chosen",
   "  in",
   "  order",
   "  to",
   "  compute"
  ]
 },
 {
  "number": 60,
  "changes_set": [
   "  ublic",
   "  double",
   "  density",
   "  (",
   "  double",
   "  x",
   "  )",
   "  {",
   "  /",
   "  ublic",
   "  double",
   "  cumulativeProbability",
   "  (",
   "  double",
   "  x",
   "  )",
   "  throws",
   "  MathException",
   "  {",
   "  inal",
   "  double",
   "  dev",
   "  =",
   "  x",
   "  -",
   "  mean",
   "  ;",
   "+ try",
   "- if",
   "- (",
   "- FastMath",
   "- .",
   "- abs",
   "- (",
   "- dev",
   "- )",
   "- >",
   "- 40",
   "- *",
   "- standardDeviation",
   "- )",
   "  {",
   "  if",
   "  (",
   "  FastMath",
   "  .",
   "  abs",
   "  (",
   "  dev",
   "  )",
   "  >",
   "  40",
   "  *",
   "  standardDeviation",
   "  )",
   "  {",
   "  return",
   "  dev",
   "  <",
   "  0",
   "  ?",
   "  0.0d",
   "  :",
   "  1.0d",
   "  ;",
   "- return",
   "- dev",
   "- <",
   "- 0",
   "- ?",
   "- 0.0d",
   "- :",
   "- 1.0d",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  0.5",
   "  *",
   "  (",
   "  1.0",
   "  +",
   "  Erf",
   "  .",
   "  erf",
   "  (",
   "  (",
   "  dev",
   "  )",
   "  /",
   "  standardDeviation",
   "  *",
   "  FastMath",
   "  .",
   "  sqrt",
   "  (",
   "  2.0",
   "  )",
   "  )",
   "  )",
   "  )",
   "  ;",
   "+ }",
   "+ catch",
   "+ (",
   "+ MaxIterationsExceededException",
   "+ ex",
   "+ )",
   "+ {",
   "+ if",
   "+ (",
   "+ x",
   "+ <",
   "+ (",
   "+ mean",
   "+ -",
   "+ 20",
   "  *",
   "- *",
   "+ standardDeviation",
   "+ )",
   "+ )",
   "+ {"
  ]
 },
 {
  "number": 54,
  "changes_set": [
   "  rotected",
   "  Dfp",
   "  (",
   "  final",
   "  DfpField",
   "  field",
   "  ,",
   "  double",
   "  x",
   "  )",
   "  {",
   "  /",
   "  Zero",
   "  or",
   "  sub",
   "  -",
   "  normalf",
   "  (",
   "  x",
   "  ==",
   "  0",
   "  )",
   "  {",
   "  /",
   "  make",
   "  sure",
   "  0",
   "  has",
   "  the",
   "  right",
   "  signif",
   "  (",
   "  (",
   "  bits",
   "  &",
   "  0x8000000000000000L",
   "  )",
   "  !=",
   "  0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- (",
   "- bits",
   "- &",
   "- 0x8000000000000000L",
   "- )",
   "- !=",
   "- 0",
   "- )",
   "- {",
   "- sign",
   "- =",
   "- -",
   "- 1",
   "- ;",
   "  sign",
   "  =",
   "  -",
   "  1",
   "  ;",
   "  }",
   "- }",
   "  eturn",
   "  ;"
  ]
 },
 {
  "number": 54,
  "changes_set": [
   "  ublic",
   "  double",
   "  toDouble",
   "  (",
   "  )",
   "  {",
   "  fp",
   "  y",
   "  =",
   "  this",
   "  ;",
   "  oolean",
   "  negate",
   "  =",
   "  false",
   "  ;",
   "+ if",
   "- int",
   "- cmp0",
   "- =",
   "- compare",
   "  (",
   "- this",
   "- ,",
   "+ lessThan",
   "+ (",
   "  getZero",
   "  (",
   "  )",
   "  )",
   "- ;",
   "+ )",
   "+ {",
   "  int",
   "  cmp0",
   "  =",
   "  compare",
   "  (",
   "  this",
   "  ,",
   "  getZero",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  cmp0",
   "  ==",
   "  0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- cmp0",
   "- ==",
   "- 0",
   "- )",
   "- {",
   "- return",
   "- sign",
   "- <",
   "- 0",
   "- ?",
   "- -",
   "- 0.0",
   "- :",
   "- +",
   "- 0.0",
   "- ;",
   "  return",
   "  sign",
   "  <",
   "  0",
   "  ?",
   "  -",
   "  0.0",
   "  :",
   "  +",
   "  0.0",
   "  ;",
   "  }",
   "  else",
   "  if",
   "  (",
   "  cmp0",
   "  <",
   "  0",
   "  )",
   "  {",
   "- }",
   "- else",
   "- if",
   "- (",
   "- cmp0",
   "- <",
   "- 0",
   "- )",
   "- {",
   "  =",
   "  negate",
   "  (",
   "  )",
   "  ;",
   "  egate",
   "  =",
   "  true",
   "  ;"
  ]
 },
 {
  "number": 56,
  "changes_set": [
   "  ublic",
   "  int",
   "  getDimension",
   "  (",
   "  )",
   "  {",
   "  ndices",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  idx",
   "  ;",
   "+ int",
   "+ idx",
   "+ =",
   "+ 1",
   "+ ;",
   "+ while",
   "+ (",
   "+ count",
   "+ <",
   "+ index",
   "+ )",
   "+ {",
   "+ count",
   "+ +=",
   "+ idx",
   "+ ;",
   "+ ++",
   "+ idx",
   "+ ;",
   "+ }",
   "+ --",
   "+ idx",
   "+ ;",
   "  indices",
   "  [",
   "  last",
   "  ]",
   "  =",
   "- index",
   "+ idx",
   "- -",
   "- count",
   "  ;",
   "  indices",
   "  [",
   "  last",
   "  ]",
   "  =",
   "  index",
   "  -",
   "  count",
   "  ;",
   "  eturn",
   "  indices",
   "  ;"
  ]
 },
 {
  "number": 52,
  "changes_set": [
   "  ublic",
   "  Rotation",
   "  (",
   "  Vector3D",
   "  u1",
   "  ,",
   "  Vector3D",
   "  u2",
   "  ,",
   "  Vector3D",
   "  v1",
   "  ,",
   "  Vector3D",
   "  v2",
   "  )",
   "  {",
   "  ector3D",
   "  k",
   "  =",
   "  v1Su1",
   "  .",
   "  crossProduct",
   "  (",
   "  v2Su2",
   "  )",
   "  ;",
   "  ector3D",
   "  u3",
   "  =",
   "  u1",
   "  .",
   "  crossProduct",
   "  (",
   "  u2",
   "  )",
   "  ;",
   "  ouble",
   "  c",
   "  =",
   "  k",
   "  .",
   "  dotProduct",
   "  (",
   "  u3",
   "  )",
   "  ;",
   "+ if",
   "+ (",
   "+ c",
   "+ ==",
   "+ 0",
   "+ )",
   "+ {",
   "  final",
   "  double",
   "  inPlaneThreshold",
   "  =",
   "  0.001",
   "  ;",
   "- final",
   "- double",
   "- inPlaneThreshold",
   "- =",
   "- 0.001",
   "- ;",
   "- if",
   "- (",
   "- c",
   "- <=",
   "- inPlaneThreshold",
   "- *",
   "- k",
   "- .",
   "- getNorm",
   "- (",
   "- )",
   "- *",
   "- u3",
   "- .",
   "- getNorm",
   "- (",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  c",
   "  <=",
   "  inPlaneThreshold",
   "  *",
   "  k",
   "  .",
   "  getNorm",
   "  (",
   "  )",
   "  *",
   "  u3",
   "  .",
   "  getNorm",
   "  (",
   "  )",
   "  )",
   "  {",
   "  /",
   "  the",
   "  (",
   "  q1",
   "  ,",
   "  q2",
   "  ,",
   "  q3",
   "  )",
   "  vector",
   "  is",
   "  close",
   "  to",
   "  the",
   "  (",
   "  u1",
   "  ,",
   "  u2",
   "  )",
   "  plane",
   "  /",
   "  we",
   "  try",
   "  other",
   "  vectorsector3D",
   "  v3",
   "  =",
   "  Vector3D",
   "  .",
   "  crossProduct",
   "  (",
   "  v1",
   "  ,",
   "  v2",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 52,
  "changes_set": [
   "  ublic",
   "  Rotation",
   "  (",
   "  Vector3D",
   "  u1",
   "  ,",
   "  Vector3D",
   "  u2",
   "  ,",
   "  Vector3D",
   "  v1",
   "  ,",
   "  Vector3D",
   "  v2",
   "  )",
   "  {",
   "  ector3D",
   "  u2Prime",
   "  =",
   "  u1",
   "  .",
   "  crossProduct",
   "  (",
   "  u3",
   "  )",
   "  ;",
   "  =",
   "  k",
   "  .",
   "  dotProduct",
   "  (",
   "  u2Prime",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  c",
   "+ ==",
   "+ 0",
   "- <=",
   "- inPlaneThreshold",
   "- *",
   "- k",
   "- .",
   "- getNorm",
   "- (",
   "- )",
   "- *",
   "- u2Prime",
   "- .",
   "- getNorm",
   "- (",
   "- )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  c",
   "  <=",
   "  inPlaneThreshold",
   "  *",
   "  k",
   "  .",
   "  getNorm",
   "  (",
   "  )",
   "  *",
   "  u2Prime",
   "  .",
   "  getNorm",
   "  (",
   "  )",
   "  )",
   "  {",
   "  /",
   "  the",
   "  (",
   "  q1",
   "  ,",
   "  q2",
   "  ,",
   "  q3",
   "  )",
   "  vector",
   "  is",
   "  also",
   "  close",
   "  to",
   "  the",
   "  (",
   "  u1",
   "  ,",
   "  u3",
   "  )",
   "  plane",
   "  ,",
   "  /",
   "  it",
   "  is",
   "  almost",
   "  aligned",
   "  with",
   "  u1",
   "  :",
   "  we",
   "  try",
   "  (",
   "  u2",
   "  ,",
   "  u3",
   "  )",
   "  and",
   "  (",
   "  v2",
   "  ,",
   "  v3",
   "  )",
   "  =",
   "  v2Su2",
   "  .",
   "  crossProduct",
   "  (",
   "  v3Su3",
   "  )",
   "  ;",
   "  ;",
   "  =",
   "  k",
   "  .",
   "  dotProduct",
   "  (",
   "  u2",
   "  .",
   "  crossProduct",
   "  (",
   "  u3",
   "  )",
   "  )",
   "  ;",
   "  ;",
   "  if",
   "  (",
   "  c",
   "- <=",
   "+ ==",
   "  0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  c",
   "  <=",
   "  0",
   "  )",
   "  {",
   "  /",
   "  the",
   "  (",
   "  q1",
   "  ,",
   "  q2",
   "  ,",
   "  q3",
   "  )",
   "  vector",
   "  is",
   "  aligned",
   "  with",
   "  everything",
   "  /",
   "  this",
   "  is",
   "  really",
   "  the",
   "  identity",
   "  rotation"
  ]
 },
 {
  "number": 63,
  "changes_set": [
   "  ode",
   "  true",
   "  }",
   "  if",
   "  the",
   "  values",
   "  are",
   "  equal",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  boolean",
   "  equals",
   "  (",
   "  double",
   "  x",
   "  ,",
   "  double",
   "  y",
   "  )",
   "  {",
   "  return",
   "- equals",
   "+ (",
   "+ Double",
   "+ .",
   "+ isNaN",
   "  (",
   "  x",
   "- ,",
   "+ )",
   "+ &&",
   "+ Double",
   "+ .",
   "+ isNaN",
   "+ (",
   "  y",
   "- ,",
   "- 1",
   "  )",
   "+ )",
   "+ ||",
   "+ x",
   "+ ==",
   "+ y",
   "  ;",
   "  return",
   "  equals",
   "  (",
   "  x",
   "  ,",
   "  y",
   "  ,",
   "  1",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 62,
  "changes_set": [
   "  ublic",
   "  UnivariateRealPointValuePair",
   "  optimize",
   "  (",
   "  final",
   "  FUNC",
   "  f",
   "  ,",
   "  inal",
   "  GoalType",
   "  goal",
   "  ,",
   "  inal",
   "  double",
   "  min",
   "  ,",
   "  final",
   "  double",
   "  max",
   "  )",
   "  hrows",
   "  FunctionEvaluationException",
   "  {",
   "  return",
   "  optimize",
   "  (",
   "  f",
   "  ,",
   "  goal",
   "  ,",
   "  min",
   "  ,",
   "  max",
   "  ,",
   "+ 0",
   "- min",
   "- +",
   "- 0.5",
   "- *",
   "- (",
   "- max",
   "- -",
   "- min",
   "- )",
   "  )",
   "  ;",
   "  return",
   "  optimize",
   "  (",
   "  f",
   "  ,",
   "  goal",
   "  ,",
   "  min",
   "  ,",
   "  max",
   "  ,",
   "  min",
   "  +",
   "  0.5",
   "  *",
   "  (",
   "  max",
   "  -",
   "  min",
   "  )",
   "  )",
   "  ;",
   "  *",
   "  *",
   "  {"
  ]
 },
 {
  "number": 62,
  "changes_set": [
   "  ublic",
   "  UnivariateRealPointValuePair",
   "  optimize",
   "  (",
   "  final",
   "  FUNC",
   "  f",
   "  ,",
   "  final",
   "  GoalType",
   "  goal",
   "  ,",
   "  /",
   "  Multi",
   "  -",
   "  start",
   "  loop",
   "  .",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  starts",
   "  ;",
   "  ++",
   "  i",
   "  )",
   "  {",
   "  ry",
   "  {",
   "  final",
   "  double",
   "- s",
   "+ bound1",
   "  =",
   "  (",
   "  i",
   "  ==",
   "  0",
   "  )",
   "  ?",
   "- startValue",
   "+ min",
   "  :",
   "  min",
   "  +",
   "  generator",
   "  .",
   "  nextDouble",
   "  (",
   "  )",
   "  *",
   "  (",
   "  max",
   "  -",
   "  min",
   "+ )",
   "+ ;",
   "+ final",
   "+ double",
   "+ bound2",
   "+ =",
   "+ (",
   "+ i",
   "+ ==",
   "+ 0",
   "+ )",
   "+ ?",
   "+ max",
   "+ :",
   "+ min",
   "+ +",
   "+ generator",
   "+ .",
   "+ nextDouble",
   "+ (",
   "+ )",
   "+ *",
   "+ (",
   "+ max",
   "+ -",
   "+ min",
   "+ )",
   "+ ;",
   "+ optima",
   "+ [",
   "+ i",
   "+ ]",
   "+ =",
   "+ optimizer",
   "+ .",
   "+ optimize",
   "+ (",
   "+ f",
   "+ ,",
   "+ goal",
   "+ ,",
   "+ FastMath",
   "+ .",
   "+ min",
   "+ (",
   "+ bound1",
   "+ ,",
   "+ bound2",
   "+ )",
   "+ ,",
   "+ FastMath",
   "+ .",
   "+ max",
   "+ (",
   "+ bound1",
   "+ ,",
   "+ bound2",
   "+ )",
   "  )",
   "  ;",
   "  final",
   "  double",
   "  s",
   "  =",
   "  (",
   "  i",
   "  ==",
   "  0",
   "  )",
   "  ?",
   "  startValue",
   "  :",
   "  min",
   "  +",
   "  generator",
   "  .",
   "  nextDouble",
   "  (",
   "  )",
   "  *",
   "  (",
   "  max",
   "  -",
   "  min",
   "  )",
   "  ;",
   "  optima",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  optimizer",
   "  .",
   "  optimize",
   "  (",
   "  f",
   "  ,",
   "  goal",
   "  ,",
   "  min",
   "  ,",
   "  max",
   "  ,",
   "  s",
   "  )",
   "  ;",
   "- optima",
   "- [",
   "- i",
   "- ]",
   "- =",
   "- optimizer",
   "- .",
   "- optimize",
   "- (",
   "- f",
   "- ,",
   "- goal",
   "- ,",
   "- min",
   "- ,",
   "- max",
   "- ,",
   "- s",
   "- )",
   "- ;",
   "  catch",
   "  (",
   "  FunctionEvaluationException",
   "  fee",
   "  )",
   "  {",
   "  ptima",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  null",
   "  ;",
   "  catch",
   "  (",
   "  ConvergenceException",
   "  ce",
   "  )",
   "  {"
  ]
 },
 {
  "number": 66,
  "changes_set": [
   "  Construct",
   "  a",
   "  solver",
   "  .",
   "  /",
   "  ublic",
   "  BrentOptimizer",
   "  (",
   "  )",
   "  {",
   "  setMaxEvaluations",
   "  (",
   "- 1000",
   "+ Integer",
   "+ .",
   "+ MAX_VALUE",
   "  )",
   "  ;",
   "  setMaxEvaluations",
   "  (",
   "  1000",
   "  )",
   "  ;",
   "  etMaximalIterationCount",
   "  (",
   "  100",
   "  )",
   "  ;",
   "  setAbsoluteAccuracy",
   "  (",
   "- 1e-11",
   "+ 1E-10",
   "+ )",
   "+ ;",
   "+ setRelativeAccuracy",
   "+ (",
   "+ 1.0e-14",
   "  )",
   "  ;",
   "  setAbsoluteAccuracy",
   "  (",
   "  1e-11",
   "  )",
   "  ;",
   "  setRelativeAccuracy",
   "  (",
   "  1e-9",
   "  )",
   "  ;",
   "- setRelativeAccuracy",
   "- (",
   "- 1e-9",
   "- )",
   "- ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 66,
  "changes_set": [
   "  ublic",
   "  BrentOptimizer",
   "  (",
   "  )",
   "  {",
   "  /",
   "  rotected",
   "  double",
   "  doOptimize",
   "  (",
   "  )",
   "  hrows",
   "  MaxIterationsExceededException",
   "  ,",
   "  FunctionEvaluationException",
   "  {",
   "+ throw",
   "+ new",
   "+ UnsupportedOperationException",
   "+ (",
   "+ )",
   "+ ;",
   "+ }",
   "+ public",
   "+ double",
   "+ optimize",
   "+ (",
   "+ final",
   "+ UnivariateRealFunction",
   "+ f",
   "+ ,",
   "+ final",
   "+ GoalType",
   "+ goalType",
   "+ ,",
   "+ final",
   "+ double",
   "+ min",
   "+ ,",
   "+ final",
   "+ double",
   "+ max",
   "+ ,",
   "+ final",
   "+ double",
   "+ startValue",
   "+ )",
   "+ throws",
   "+ MaxIterationsExceededException",
   "+ ,",
   "+ FunctionEvaluationException",
   "+ {",
   "+ clearResult",
   "+ (",
   "+ )",
   "+ ;",
   "  eturn",
   "  localMin",
   "  (",
   "  getGoalType",
   "  (",
   "  )",
   "  ==",
   "  GoalType",
   "  .",
   "  MINIMIZE",
   "  ,",
   "+ f",
   "- getMin",
   "- (",
   "- )",
   "  ,",
   "+ goalType",
   "- getStartValue",
   "- (",
   "- )",
   "  ,",
   "- getMax",
   "- (",
   "- )",
   "+ min",
   "+ ,",
   "+ startValue",
   "+ ,",
   "+ max",
   "  ,",
   "  getMin",
   "  (",
   "  )",
   "  ,",
   "  getStartValue",
   "  (",
   "  )",
   "  ,",
   "  getMax",
   "  (",
   "  )",
   "  ,",
   "  etRelativeAccuracy",
   "  (",
   "  )",
   "  ,",
   "  getAbsoluteAccuracy",
   "  (",
   "  )",
   "  )",
   "  ;",
   "+ public",
   "+ double",
   "+ optimize",
   "+ (",
   "+ final",
   "+ UnivariateRealFunction",
   "+ f",
   "+ ,",
   "+ final",
   "+ GoalType",
   "+ goalType",
   "+ ,",
   "+ final",
   "+ double",
   "+ min",
   "+ ,",
   "+ final",
   "+ double",
   "+ max",
   "+ )",
   "+ throws",
   "+ MaxIterationsExceededException",
   "+ ,",
   "+ FunctionEvaluationException",
   "+ {",
   "+ return",
   "+ optimize",
   "+ (",
   "+ f",
   "+ ,",
   "+ goalType",
   "+ ,",
   "+ min",
   "+ ,",
   "+ max",
   "+ ,",
   "+ min",
   "+ +",
   "+ GOLDEN_SECTION",
   "+ *",
   "+ (",
   "+ max",
   "+ -",
   "+ min",
   "+ )",
   "+ )",
   "+ ;",
   "+ }",
   "  *",
   "  *",
   "  Find",
   "  the",
   "  minimum",
   "  of",
   "  the",
   "  function",
   "  within",
   "  the",
   "  interval",
   "  {"
  ]
 },
 {
  "number": 66,
  "changes_set": [
   "  ublic",
   "  double",
   "  optimize",
   "  (",
   "  final",
   "  UnivariateRealFunction",
   "  f",
   "  ,",
   "  final",
   "  GoalType",
   "  goalType",
   "  ,",
   "  the",
   "  function",
   "  .",
   "  /",
   "  rivate",
   "  double",
   "  localMin",
   "  (",
   "  boolean",
   "  isMinim",
   "  ,",
   "+ UnivariateRealFunction",
   "+ f",
   "+ ,",
   "+ GoalType",
   "+ goalType",
   "+ ,",
   "  ouble",
   "  lo",
   "  ,",
   "  double",
   "  mid",
   "  ,",
   "  double",
   "  hi",
   "  ,",
   "  ouble",
   "  eps",
   "  ,",
   "  double",
   "  t",
   "  )",
   "  hrows",
   "  MaxIterationsExceededException",
   "  ,",
   "  FunctionEvaluationException",
   "  {"
  ]
 },
 {
  "number": 66,
  "changes_set": [
   "  rivate",
   "  double",
   "  localMin",
   "  (",
   "  boolean",
   "  isMinim",
   "  ,",
   "  ouble",
   "  w",
   "  =",
   "  x",
   "  ;",
   "  ouble",
   "  d",
   "  =",
   "  0",
   "  ;",
   "  ouble",
   "  e",
   "  =",
   "  0",
   "  ;",
   "  double",
   "  fx",
   "  =",
   "  computeObjectiveValue",
   "  (",
   "+ f",
   "+ ,",
   "  x",
   "  )",
   "  ;",
   "+ if",
   "+ (",
   "+ goalType",
   "+ ==",
   "+ GoalType",
   "+ .",
   "+ MAXIMIZE",
   "+ )",
   "+ {",
   "  double",
   "  fx",
   "  =",
   "  computeObjectiveValue",
   "  (",
   "  x",
   "  )",
   "  ;",
   "- if",
   "- (",
   "- !",
   "- isMinim",
   "- )",
   "- {",
   "  if",
   "  (",
   "  !",
   "  isMinim",
   "  )",
   "  {",
   "  x",
   "  =",
   "  -",
   "  fx",
   "  ;",
   "  ouble",
   "  fv",
   "  =",
   "  fx",
   "  ;",
   "  ouble",
   "  fw",
   "  =",
   "  fx",
   "  ;",
   "+ int",
   "+ count",
   "+ =",
   "+ 0",
   "+ ;",
   "  while",
   "  (",
   "- true",
   "+ count",
   "+ <",
   "+ maximalIterationCount",
   "  )",
   "  {",
   "  while",
   "  (",
   "  true",
   "  )",
   "  {",
   "  ouble",
   "  m",
   "  =",
   "  0.5",
   "  *",
   "  (",
   "  a",
   "  +",
   "  b",
   "  )",
   "  ;",
   "  inal",
   "  double",
   "  tol1",
   "  =",
   "  eps",
   "  *",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  x",
   "  )",
   "  +",
   "  t",
   "  ;",
   "  inal",
   "  double",
   "  tol2",
   "  =",
   "  2",
   "  *",
   "  tol1",
   "  ;"
  ]
 },
 {
  "number": 66,
  "changes_set": [
   "  rivate",
   "  double",
   "  localMin",
   "  (",
   "  boolean",
   "  isMinim",
   "  ,",
   "  =",
   "  x",
   "  +",
   "  d",
   "  ;",
   "  double",
   "  fu",
   "  =",
   "  computeObjectiveValue",
   "  (",
   "+ f",
   "+ ,",
   "  u",
   "  )",
   "  ;",
   "+ if",
   "+ (",
   "+ goalType",
   "+ ==",
   "+ GoalType",
   "+ .",
   "+ MAXIMIZE",
   "+ )",
   "+ {",
   "  double",
   "  fu",
   "  =",
   "  computeObjectiveValue",
   "  (",
   "  u",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  !",
   "  isMinim",
   "  )",
   "  {",
   "- if",
   "- (",
   "- !",
   "- isMinim",
   "- )",
   "- {",
   "  u",
   "  =",
   "  -",
   "  fu",
   "  ;"
  ]
 },
 {
  "number": 65,
  "changes_set": [
   "  rotected",
   "  void",
   "  updateResidualsAndCost",
   "  (",
   "  )",
   "  ublic",
   "  double",
   "  getRMS",
   "  (",
   "  )",
   "  {",
   "+ double",
   "+ criterion",
   "+ =",
   "+ 0",
   "+ ;",
   "+ for",
   "+ (",
   "+ int",
   "+ i",
   "+ =",
   "+ 0",
   "+ ;",
   "+ i",
   "+ <",
   "+ rows",
   "+ ;",
   "+ ++",
   "+ i",
   "+ )",
   "+ {",
   "+ final",
   "+ double",
   "+ residual",
   "+ =",
   "+ residuals",
   "+ [",
   "+ i",
   "+ ]",
   "+ ;",
   "+ criterion",
   "+ +=",
   "+ residual",
   "+ *",
   "+ residual",
   "+ *",
   "+ residualsWeights",
   "+ [",
   "+ i",
   "+ ]",
   "+ ;",
   "+ }",
   "  return",
   "  Math",
   "  .",
   "  sqrt",
   "  (",
   "+ criterion",
   "- getChiSquare",
   "- (",
   "- )",
   "  /",
   "  rows",
   "  )",
   "  ;",
   "  return",
   "  Math",
   "  .",
   "  sqrt",
   "  (",
   "  getChiSquare",
   "  (",
   "  )",
   "  /",
   "  rows",
   "  )",
   "  ;",
   "  *",
   "  *",
   "  Get",
   "  a",
   "  Chi",
   "  -",
   "  Square",
   "  -",
   "  like",
   "  value",
   "  assuming",
   "  the",
   "  N",
   "  residuals",
   "  follow",
   "  Ndistinct",
   "  normal",
   "  distributions",
   "  centered",
   "  on",
   "  0",
   "  and",
   "  whose",
   "  variances",
   "  arethe",
   "  reciprocal",
   "  of",
   "  the",
   "  weights",
   "  ."
  ]
 },
 {
  "number": 65,
  "changes_set": [
   "  eturn",
   "  chi",
   "  -",
   "  square",
   "  value",
   "  /",
   "  ublic",
   "  double",
   "  getChiSquare",
   "  (",
   "  )",
   "  {",
   "  ouble",
   "  chiSquare",
   "  =",
   "  0",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  rows",
   "  ;",
   "  ++",
   "  i",
   "  )",
   "  {",
   "  inal",
   "  double",
   "  residual",
   "  =",
   "  residuals",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  chiSquare",
   "  +=",
   "  residual",
   "  *",
   "  residual",
   "- *",
   "+ /",
   "  residualsWeights",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  chiSquare",
   "  +=",
   "  residual",
   "  *",
   "  residual",
   "  *",
   "  residualsWeights",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  eturn",
   "  chiSquare",
   "  ;",
   "  *",
   "  *",
   "  Get",
   "  the",
   "  covariance",
   "  matrix",
   "  of",
   "  optimized",
   "  parameters",
   "  ."
  ]
 },
 {
  "number": 64,
  "changes_set": [
   "  rotected",
   "  VectorialPointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  ouble",
   "  [",
   "  ]",
   "  diag",
   "  =",
   "  new",
   "  double",
   "  [",
   "  cols",
   "  ]",
   "  ;",
   "  ouble",
   "  [",
   "  ]",
   "  oldX",
   "  =",
   "  new",
   "  double",
   "  [",
   "  cols",
   "  ]",
   "  ;",
   "  ouble",
   "  [",
   "  ]",
   "  oldRes",
   "  =",
   "  new",
   "  double",
   "  [",
   "  rows",
   "  ]",
   "  ;",
   "  double",
   "  [",
   "  ]",
   "  oldObj",
   "  =",
   "  new",
   "  double",
   "  [",
   "  rows",
   "  ]",
   "  ;",
   "  double",
   "  [",
   "  ]",
   "- oldObj",
   "- =",
   "- new",
   "- double",
   "- [",
   "- rows",
   "- ]",
   "- ;",
   "- double",
   "- [",
   "- ]",
   "- qtf",
   "- =",
   "- new",
   "- double",
   "- [",
   "- rows",
   "- ]",
   "- ;",
   "- double",
   "- [",
   "- ]",
   "  qtf",
   "  =",
   "  new",
   "  double",
   "  [",
   "  rows",
   "  ]",
   "  ;",
   "  ouble",
   "  [",
   "  ]",
   "  work1",
   "  =",
   "  new",
   "  double",
   "  [",
   "  cols",
   "  ]",
   "  ;",
   "  ouble",
   "  [",
   "  ]",
   "  work2",
   "  =",
   "  new",
   "  double",
   "  [",
   "  cols",
   "  ]",
   "  ;",
   "  ouble",
   "  [",
   "  ]",
   "  work3",
   "  =",
   "  new",
   "  double",
   "  [",
   "  cols",
   "  ]",
   "  ;"
  ]
 },
 {
  "number": 64,
  "changes_set": [
   "  rotected",
   "  VectorialPointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  oolean",
   "  firstIteration",
   "  =",
   "  true",
   "  ;",
   "  ectorialPointValuePair",
   "  current",
   "  =",
   "  new",
   "  VectorialPointValuePair",
   "  (",
   "  point",
   "  ,",
   "  objective",
   "  )",
   "  ;",
   "  hile",
   "  (",
   "  true",
   "  )",
   "  {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  rows",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "- for",
   "- (",
   "- int",
   "- i",
   "- =",
   "- 0",
   "- ;",
   "- i",
   "- <",
   "- rows",
   "- ;",
   "- i",
   "- ++",
   "- )",
   "- {",
   "  qtf",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  residuals",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "- qtf",
   "- [",
   "- i",
   "- ]",
   "- =",
   "- residuals",
   "- [",
   "- i",
   "- ]",
   "- ;",
   "- }",
   "  }",
   "  ncrementIterationsCounter",
   "  (",
   "  )",
   "  ;",
   "  /",
   "  compute",
   "  the",
   "  Q",
   "  .",
   "  R",
   "  .",
   "  decomposition",
   "  of",
   "  the",
   "  jacobian",
   "  matrix"
  ]
 },
 {
  "number": 64,
  "changes_set": [
   "  rotected",
   "  VectorialPointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  rDecomposition",
   "  (",
   "  )",
   "  ;",
   "  /",
   "  compute",
   "  Qt",
   "  .",
   "  resqTy",
   "  (",
   "- qtf",
   "+ residuals",
   "  )",
   "  ;",
   "  qTy",
   "  (",
   "  qtf",
   "  )",
   "  ;",
   "  /",
   "  now",
   "  we",
   "  don",
   "  need",
   "  Q",
   "  anymore",
   "  ,",
   "  /",
   "  so",
   "  let",
   "  jacobian",
   "  contain",
   "  the",
   "  R",
   "  matrix",
   "  with",
   "  its",
   "  diagonal",
   "  elementsor",
   "  (",
   "  int",
   "  k",
   "  =",
   "  0",
   "  ;",
   "  k",
   "  <",
   "  solvedCols",
   "  ;",
   "  ++",
   "  k",
   "  )",
   "  {"
  ]
 },
 {
  "number": 64,
  "changes_set": [
   "  rotected",
   "  VectorialPointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  f",
   "  (",
   "  s",
   "  !=",
   "  0",
   "  )",
   "  {",
   "  ouble",
   "  sum",
   "  =",
   "  0",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <=",
   "  j",
   "  ;",
   "  ++",
   "  i",
   "  )",
   "  {",
   "  sum",
   "  +=",
   "  jacobian",
   "  [",
   "  i",
   "  ]",
   "  [",
   "  pj",
   "  ]",
   "  *",
   "- qtf",
   "+ residuals",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  sum",
   "  +=",
   "  jacobian",
   "  [",
   "  i",
   "  ]",
   "  [",
   "  pj",
   "  ]",
   "  *",
   "  qtf",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  axCosine",
   "  =",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  maxCosine",
   "  ,",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  sum",
   "  )",
   "  /",
   "  (",
   "  s",
   "  *",
   "  cost",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 64,
  "changes_set": [
   "  rotected",
   "  VectorialPointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  f",
   "  (",
   "  maxCosine",
   "  <=",
   "  orthoTolerance",
   "  )",
   "  {",
   "  /",
   "  convergence",
   "  has",
   "  been",
   "  reachedupdateResidualsAndCost",
   "  (",
   "  )",
   "  ;",
   "- updateResidualsAndCost",
   "- (",
   "- )",
   "- ;",
   "- current",
   "- =",
   "- new",
   "- VectorialPointValuePair",
   "- (",
   "- point",
   "- ,",
   "- objective",
   "- )",
   "- ;",
   "  current",
   "  =",
   "  new",
   "  VectorialPointValuePair",
   "  (",
   "  point",
   "  ,",
   "  objective",
   "  )",
   "  ;",
   "  eturn",
   "  current",
   "  ;"
  ]
 },
 {
  "number": 64,
  "changes_set": [
   "  rotected",
   "  VectorialPointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  ouble",
   "  [",
   "  ]",
   "  tmpVec",
   "  =",
   "  residuals",
   "  ;",
   "  esiduals",
   "  =",
   "  oldRes",
   "  ;",
   "  ldRes",
   "  =",
   "  tmpVec",
   "  ;",
   "  tmpVec",
   "  =",
   "  objective",
   "  ;",
   "- tmpVec",
   "- =",
   "- objective",
   "- ;",
   "  objective",
   "  =",
   "  oldObj",
   "- ;",
   "- objective",
   "- =",
   "- oldObj",
   "- ;",
   "- oldObj",
   "- =",
   "- tmpVec",
   "  ;",
   "  oldObj",
   "  =",
   "  tmpVec",
   "  ;",
   "  /",
   "  determine",
   "  the",
   "  Levenberg",
   "  -",
   "  Marquardt",
   "  parameterdetermineLMParameter",
   "  (",
   "- qtf",
   "+ oldRes",
   "  ,",
   "  delta",
   "  ,",
   "  diag",
   "  ,",
   "  work1",
   "  ,",
   "  work2",
   "  ,",
   "  work3",
   "  )",
   "  ;",
   "  determineLMParameter",
   "  (",
   "  qtf",
   "  ,",
   "  delta",
   "  ,",
   "  diag",
   "  ,",
   "  work1",
   "  ,",
   "  work2",
   "  ,",
   "  work3",
   "  )",
   "  ;",
   "  /",
   "  compute",
   "  the",
   "  new",
   "  point",
   "  and",
   "  the",
   "  norm",
   "  of",
   "  the",
   "  evolution",
   "  directionouble",
   "  lmNorm",
   "  =",
   "  0",
   "  ;"
  ]
 },
 {
  "number": 64,
  "changes_set": [
   "  rotected",
   "  VectorialPointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  /",
   "  evaluate",
   "  the",
   "  function",
   "  at",
   "  x",
   "  +",
   "  p",
   "  and",
   "  calculate",
   "  its",
   "  normpdateResidualsAndCost",
   "  (",
   "  )",
   "  ;",
   "+ current",
   "+ =",
   "+ new",
   "+ VectorialPointValuePair",
   "+ (",
   "+ point",
   "+ ,",
   "+ objective",
   "+ )",
   "+ ;",
   "  /",
   "  compute",
   "  the",
   "  scaled",
   "  actual",
   "  reductionouble",
   "  actRed",
   "  =",
   "  -",
   "  1.0",
   "  ;"
  ]
 },
 {
  "number": 64,
  "changes_set": [
   "  rotected",
   "  VectorialPointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  Norm",
   "  +=",
   "  xK",
   "  *",
   "  xK",
   "  ;",
   "  Norm",
   "  =",
   "  Math",
   "  .",
   "  sqrt",
   "  (",
   "  xNorm",
   "  )",
   "  ;",
   "  current",
   "  =",
   "  new",
   "  VectorialPointValuePair",
   "  (",
   "  point",
   "  ,",
   "  objective",
   "  )",
   "  ;",
   "- current",
   "- =",
   "- new",
   "- VectorialPointValuePair",
   "- (",
   "- point",
   "- ,",
   "- objective",
   "- )",
   "- ;",
   "  /",
   "  tests",
   "  for",
   "  convergence",
   "  .",
   "- if",
   "- (",
   "- checker",
   "- !=",
   "- null",
   "- )",
   "- {",
   "  if",
   "  (",
   "  checker",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  /",
   "  we",
   "  use",
   "  the",
   "  vectorial",
   "  convergence",
   "  checkerif",
   "  (",
   "  checker",
   "  .",
   "  converged",
   "  (",
   "  getIterations",
   "  (",
   "  )",
   "  ,",
   "  previous",
   "  ,",
   "  current",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- checker",
   "- .",
   "- converged",
   "- (",
   "- getIterations",
   "- (",
   "- )",
   "- ,",
   "- previous",
   "- ,",
   "- current",
   "- )",
   "- )",
   "- {",
   "  return",
   "  current",
   "  ;",
   "- return",
   "- current",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  else",
   "  {",
   "  /",
   "  failed",
   "  iteration",
   "  ,",
   "  reset",
   "  the",
   "  previous",
   "  valuesost",
   "  =",
   "  previousCost",
   "  ;"
  ]
 },
 {
  "number": 64,
  "changes_set": [
   "  rotected",
   "  VectorialPointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  mpVec",
   "  =",
   "  residuals",
   "  ;",
   "  esiduals",
   "  =",
   "  oldRes",
   "  ;",
   "  ldRes",
   "  =",
   "  tmpVec",
   "  ;",
   "  tmpVec",
   "  =",
   "  objective",
   "  ;",
   "- tmpVec",
   "- =",
   "- objective",
   "- ;",
   "  objective",
   "  =",
   "  oldObj",
   "- ;",
   "- objective",
   "- =",
   "- oldObj",
   "- ;",
   "- oldObj",
   "- =",
   "- tmpVec",
   "  ;",
   "  oldObj",
   "  =",
   "  tmpVec",
   "  ;",
   "  f",
   "  (",
   "  checker",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  f",
   "  (",
   "  (",
   "  (",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  actRed",
   "  )",
   "  <=",
   "  costRelativeTolerance",
   "  )",
   "  &&"
  ]
 },
 {
  "number": 64,
  "changes_set": [
   "  rotected",
   "  VectorialPointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  delta",
   "  <=",
   "  parRelativeTolerance",
   "  *",
   "  xNorm",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  current",
   "  ;",
   "+ }",
   "+ else",
   "+ {",
   "+ if",
   "+ (",
   "+ checker",
   "+ .",
   "+ converged",
   "+ (",
   "+ getIterations",
   "+ (",
   "+ )",
   "+ ,",
   "+ previous",
   "+ ,",
   "+ current",
   "+ )",
   "+ )",
   "+ {",
   "+ return",
   "+ current",
   "+ ;",
   "+ }",
   "  /",
   "  tests",
   "  for",
   "  termination",
   "  and",
   "  stringent",
   "  tolerances",
   "  /",
   "  (",
   "  2.2204e-16",
   "  is",
   "  the",
   "  machine",
   "  epsilon",
   "  for",
   "  IEEE754",
   "  )"
  ]
 },
 {
  "number": 70,
  "changes_set": [
   "  nheritDoc",
   "  }",
   "  *",
   "  /",
   "  ublic",
   "  double",
   "  solve",
   "  (",
   "  final",
   "  UnivariateRealFunction",
   "  f",
   "  ,",
   "  double",
   "  min",
   "  ,",
   "  double",
   "  max",
   "  ,",
   "  double",
   "  initial",
   "  )",
   "  hrows",
   "  MaxIterationsExceededException",
   "  ,",
   "  FunctionEvaluationException",
   "  {",
   "  return",
   "  solve",
   "  (",
   "- f",
   "- ,",
   "  min",
   "  ,",
   "  max",
   "  )",
   "  ;",
   "  return",
   "  solve",
   "  (",
   "  f",
   "  ,",
   "  min",
   "  ,",
   "  max",
   "  )",
   "  ;",
   "  *",
   "  *",
   "  {"
  ]
 },
 {
  "number": 68,
  "changes_set": [
   "  ublic",
   "  LevenbergMarquardtOptimizer",
   "  (",
   "  )",
   "  {",
   "  etMaxIterations",
   "  (",
   "  1000",
   "  )",
   "  ;",
   "  /",
   "  default",
   "  values",
   "  for",
   "  the",
   "  tuning",
   "  parameterssetConvergenceChecker",
   "  (",
   "  null",
   "  )",
   "  ;",
   "- setConvergenceChecker",
   "- (",
   "- null",
   "- )",
   "- ;",
   "  etInitialStepBoundFactor",
   "  (",
   "  100.0",
   "  )",
   "  ;",
   "  etCostRelativeTolerance",
   "  (",
   "  1.0e-10",
   "  )",
   "  ;",
   "  etParRelativeTolerance",
   "  (",
   "  1.0e-10",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 68,
  "changes_set": [
   "  rotected",
   "  VectorialPointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  /",
   "  outer",
   "  loopmPar",
   "  =",
   "  0",
   "  ;",
   "  oolean",
   "  firstIteration",
   "  =",
   "  true",
   "- ;",
   "- VectorialPointValuePair",
   "- current",
   "- =",
   "- new",
   "- VectorialPointValuePair",
   "- (",
   "- point",
   "- ,",
   "- objective",
   "- )",
   "  ;",
   "  VectorialPointValuePair",
   "  current",
   "  =",
   "  new",
   "  VectorialPointValuePair",
   "  (",
   "  point",
   "  ,",
   "  objective",
   "  )",
   "  ;",
   "  hile",
   "  (",
   "  true",
   "  )",
   "  {",
   "  ncrementIterationsCounter",
   "  (",
   "  )",
   "  ;",
   "  /",
   "  compute",
   "  the",
   "  Q",
   "  .",
   "  R",
   "  .",
   "  decomposition",
   "  of",
   "  the",
   "  jacobian",
   "  matrixVectorialPointValuePair",
   "  previous",
   "  =",
   "  current",
   "  ;",
   "- VectorialPointValuePair",
   "- previous",
   "- =",
   "- current",
   "- ;",
   "  pdateJacobian",
   "  (",
   "  )",
   "  ;",
   "  rDecomposition",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 68,
  "changes_set": [
   "  rotected",
   "  VectorialPointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  f",
   "  (",
   "  maxCosine",
   "  <=",
   "  orthoTolerance",
   "  )",
   "  {",
   "  /",
   "  convergence",
   "  has",
   "  been",
   "  reachedreturn",
   "- current",
   "+ new",
   "+ VectorialPointValuePair",
   "+ (",
   "+ point",
   "+ ,",
   "+ objective",
   "+ )",
   "  ;",
   "  return",
   "  current",
   "  ;",
   "  /",
   "  rescale",
   "  if",
   "  necessary"
  ]
 },
 {
  "number": 68,
  "changes_set": [
   "  rotected",
   "  VectorialPointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  /",
   "  evaluate",
   "  the",
   "  function",
   "  at",
   "  x",
   "  +",
   "  p",
   "  and",
   "  calculate",
   "  its",
   "  normpdateResidualsAndCost",
   "  (",
   "  )",
   "  ;",
   "  current",
   "  =",
   "  new",
   "  VectorialPointValuePair",
   "  (",
   "  point",
   "  ,",
   "  objective",
   "  )",
   "  ;",
   "- current",
   "- =",
   "- new",
   "- VectorialPointValuePair",
   "- (",
   "- point",
   "- ,",
   "- objective",
   "- )",
   "- ;",
   "  /",
   "  compute",
   "  the",
   "  scaled",
   "  actual",
   "  reductionouble",
   "  actRed",
   "  =",
   "  -",
   "  1.0",
   "  ;"
  ]
 },
 {
  "number": 68,
  "changes_set": [
   "  rotected",
   "  VectorialPointValuePair",
   "  doOptimize",
   "  (",
   "  )",
   "  /",
   "  tests",
   "  for",
   "  convergence",
   "  .",
   "- if",
   "- (",
   "- checker",
   "- !=",
   "- null",
   "- )",
   "- {",
   "  if",
   "  (",
   "  checker",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  /",
   "  we",
   "  use",
   "  the",
   "  vectorial",
   "  convergence",
   "  checkerif",
   "  (",
   "  checker",
   "  .",
   "  converged",
   "  (",
   "  getIterations",
   "  (",
   "  )",
   "  ,",
   "  previous",
   "  ,",
   "  current",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- checker",
   "- .",
   "- converged",
   "- (",
   "- getIterations",
   "- (",
   "- )",
   "- ,",
   "- previous",
   "- ,",
   "- current",
   "- )",
   "- )",
   "- {",
   "- return",
   "- current",
   "- ;",
   "  return",
   "  current",
   "  ;",
   "  }",
   "- }",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  /",
   "  we",
   "  use",
   "  the",
   "  Levenberg",
   "  -",
   "  Marquardt",
   "  specific",
   "  convergence",
   "  parametersf",
   "  (",
   "  (",
   "  (",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  actRed",
   "  )",
   "  <=",
   "  costRelativeTolerance",
   "  )",
   "  &&",
   "  preRed",
   "  <=",
   "  costRelativeTolerance",
   "  )",
   "  &&",
   "  ratio",
   "  <=",
   "  2.0",
   "  )",
   "  )",
   "  ||",
   "  delta",
   "  <=",
   "  parRelativeTolerance",
   "  *",
   "  xNorm",
   "  )",
   "  )",
   "  {",
   "  return",
   "- current",
   "+ new",
   "+ VectorialPointValuePair",
   "+ (",
   "+ point",
   "+ ,",
   "+ objective",
   "+ )",
   "  ;",
   "  return",
   "  current",
   "  ;",
   "- }",
   "  }",
   "  /",
   "  tests",
   "  for",
   "  termination",
   "  and",
   "  stringent",
   "  tolerances",
   "  /",
   "  (",
   "  2.2204e-16",
   "  is",
   "  the",
   "  machine",
   "  epsilon",
   "  for",
   "  IEEE754",
   "  )"
  ]
 },
 {
  "number": 69,
  "changes_set": [
   "  ublic",
   "  RealMatrix",
   "  getCorrelationPValues",
   "  (",
   "  )",
   "  throws",
   "  MathException",
   "  {",
   "  else",
   "  {",
   "  ouble",
   "  r",
   "  =",
   "  correlationMatrix",
   "  .",
   "  getEntry",
   "  (",
   "  i",
   "  ,",
   "  j",
   "  )",
   "  ;",
   "  ouble",
   "  t",
   "  =",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  r",
   "  *",
   "  Math",
   "  .",
   "  sqrt",
   "  (",
   "  (",
   "  nObs",
   "  -",
   "  2",
   "  )",
   "  /",
   "  (",
   "  1",
   "  -",
   "  r",
   "  *",
   "  r",
   "  )",
   "  )",
   "  )",
   "  ;",
   "  out",
   "  [",
   "  i",
   "  ]",
   "  [",
   "  j",
   "  ]",
   "  =",
   "  2",
   "  *",
   "+ (",
   "+ 1",
   "+ -",
   "  tDistribution",
   "  .",
   "  cumulativeProbability",
   "  (",
   "- -",
   "  t",
   "+ )",
   "  )",
   "  ;",
   "  out",
   "  [",
   "  i",
   "  ]",
   "  [",
   "  j",
   "  ]",
   "  =",
   "  2",
   "  *",
   "  tDistribution",
   "  .",
   "  cumulativeProbability",
   "  (",
   "  -",
   "  t",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 71,
  "changes_set": [
   "  ublic",
   "  double",
   "  integrate",
   "  (",
   "  final",
   "  FirstOrderDifferentialEquations",
   "  equations",
   "  ,",
   "  /",
   "  it",
   "  is",
   "  so",
   "  small",
   "  (",
   "  much",
   "  probably",
   "  exactly",
   "  0",
   "  due",
   "  to",
   "  limited",
   "  accuracy",
   "  )",
   "  /",
   "  that",
   "  the",
   "  code",
   "  above",
   "  would",
   "  fail",
   "  handling",
   "  it",
   "  .",
   "  /",
   "  So",
   "  we",
   "  set",
   "  up",
   "  an",
   "  artificial",
   "  0",
   "  size",
   "  step",
   "  by",
   "  copying",
   "  statesinterpolator",
   "  .",
   "  storeTime",
   "  (",
   "  stepStart",
   "  )",
   "  ;",
   "- interpolator",
   "- .",
   "- storeTime",
   "- (",
   "- stepStart",
   "- )",
   "- ;",
   "- System",
   "- .",
   "- arraycopy",
   "- (",
   "- y",
   "- ,",
   "- 0",
   "- ,",
   "- yTmp",
   "- ,",
   "- 0",
   "- ,",
   "- y0",
   "- .",
   "- length",
   "- )",
   "- ;",
   "  System",
   "  .",
   "  arraycopy",
   "  (",
   "  y",
   "  ,",
   "  0",
   "  ,",
   "  yTmp",
   "  ,",
   "  0",
   "  ,",
   "  y0",
   "  .",
   "  length",
   "  )",
   "  ;",
   "  hNew",
   "- =",
   "- 0",
   "- ;",
   "- hNew",
   "- =",
   "- 0",
   "- ;",
   "- stepSize",
   "  =",
   "  0",
   "  ;",
   "  stepSize",
   "  =",
   "  0",
   "  ;",
   "  oop",
   "  =",
   "  false",
   "  ;",
   "  else",
   "  {",
   "  /",
   "  reject",
   "  the",
   "  step",
   "  to",
   "  match",
   "  exactly",
   "  the",
   "  next",
   "  switch",
   "  time"
  ]
 },
 {
  "number": 71,
  "changes_set": [
   "  ublic",
   "  double",
   "  integrate",
   "  (",
   "  final",
   "  FirstOrderDifferentialEquations",
   "  equations",
   "  ,",
   "  /",
   "  it",
   "  is",
   "  so",
   "  small",
   "  (",
   "  much",
   "  probably",
   "  exactly",
   "  0",
   "  due",
   "  to",
   "  limited",
   "  accuracy",
   "  )",
   "  /",
   "  that",
   "  the",
   "  code",
   "  above",
   "  would",
   "  fail",
   "  handling",
   "  it",
   "  .",
   "  /",
   "  So",
   "  we",
   "  set",
   "  up",
   "  an",
   "  artificial",
   "  0",
   "  size",
   "  step",
   "  by",
   "  copying",
   "  statesinterpolator",
   "  .",
   "  storeTime",
   "  (",
   "  stepStart",
   "  )",
   "  ;",
   "- interpolator",
   "- .",
   "- storeTime",
   "- (",
   "- stepStart",
   "- )",
   "- ;",
   "  System",
   "  .",
   "  arraycopy",
   "  (",
   "  y",
   "  ,",
   "  0",
   "  ,",
   "  yTmp",
   "  ,",
   "  0",
   "  ,",
   "  y0",
   "  .",
   "  length",
   "  )",
   "- ;",
   "- System",
   "- .",
   "- arraycopy",
   "- (",
   "- y",
   "- ,",
   "- 0",
   "- ,",
   "- yTmp",
   "- ,",
   "- 0",
   "- ,",
   "- y0",
   "- .",
   "- length",
   "- )",
   "- ;",
   "- stepSize",
   "- =",
   "- 0",
   "  ;",
   "  stepSize",
   "  =",
   "  0",
   "  ;",
   "  oop",
   "  =",
   "  false",
   "  ;",
   "  else",
   "  {",
   "  /",
   "  reject",
   "  the",
   "  step",
   "  to",
   "  match",
   "  exactly",
   "  the",
   "  next",
   "  switch",
   "  time"
  ]
 },
 {
  "number": 72,
  "changes_set": [
   "  ublic",
   "  double",
   "  solve",
   "  (",
   "  final",
   "  UnivariateRealFunction",
   "  f",
   "  ,",
   "  /",
   "  return",
   "  the",
   "  first",
   "  endpoint",
   "  if",
   "  it",
   "  is",
   "  good",
   "  enoughouble",
   "  yMin",
   "  =",
   "  f",
   "  .",
   "  value",
   "  (",
   "  min",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  yMin",
   "  )",
   "  <=",
   "  functionValueAccuracy",
   "  )",
   "  {",
   "  setResult",
   "  (",
   "- min",
   "+ yMin",
   "  ,",
   "  0",
   "  )",
   "  ;",
   "  setResult",
   "  (",
   "  min",
   "  ,",
   "  0",
   "  )",
   "  ;",
   "  eturn",
   "  result",
   "  ;"
  ]
 },
 {
  "number": 72,
  "changes_set": [
   "  ublic",
   "  double",
   "  solve",
   "  (",
   "  final",
   "  UnivariateRealFunction",
   "  f",
   "  ,",
   "  /",
   "  return",
   "  the",
   "  second",
   "  endpoint",
   "  if",
   "  it",
   "  is",
   "  good",
   "  enoughouble",
   "  yMax",
   "  =",
   "  f",
   "  .",
   "  value",
   "  (",
   "  max",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  yMax",
   "  )",
   "  <=",
   "  functionValueAccuracy",
   "  )",
   "  {",
   "  setResult",
   "  (",
   "- max",
   "+ yMax",
   "  ,",
   "  0",
   "  )",
   "  ;",
   "  setResult",
   "  (",
   "  max",
   "  ,",
   "  0",
   "  )",
   "  ;",
   "  eturn",
   "  result",
   "  ;"
  ]
 },
 {
  "number": 67,
  "changes_set": [
   "  nheritDoc",
   "  }",
   "  *",
   "  /",
   "  ublic",
   "  double",
   "  getFunctionValue",
   "  (",
   "  )",
   "  {",
   "  return",
   "- optimaValues",
   "- [",
   "- 0",
   "- ]",
   "+ optimizer",
   "+ .",
   "+ getFunctionValue",
   "+ (",
   "+ )",
   "  ;",
   "  return",
   "  optimaValues",
   "  [",
   "  0",
   "  ]",
   "  ;",
   "  *",
   "  *",
   "  {"
  ]
 },
 {
  "number": 67,
  "changes_set": [
   "  nheritDoc",
   "  }",
   "  *",
   "  /",
   "  ublic",
   "  double",
   "  getResult",
   "  (",
   "  )",
   "  {",
   "  return",
   "- optima",
   "- [",
   "- 0",
   "- ]",
   "+ optimizer",
   "+ .",
   "+ getResult",
   "+ (",
   "+ )",
   "  ;",
   "  return",
   "  optima",
   "  [",
   "  0",
   "  ]",
   "  ;",
   "  *",
   "  *",
   "  {"
  ]
 },
 {
  "number": 73,
  "changes_set": [
   "  ublic",
   "  double",
   "  solve",
   "  (",
   "  final",
   "  UnivariateRealFunction",
   "  f",
   "  ,",
   "  eturn",
   "  solve",
   "  (",
   "  f",
   "  ,",
   "  initial",
   "  ,",
   "  yInitial",
   "  ,",
   "  max",
   "  ,",
   "  yMax",
   "  ,",
   "  initial",
   "  ,",
   "  yInitial",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  yMin",
   "  *",
   "  yMax",
   "  >",
   "  0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- yMin",
   "- *",
   "- yMax",
   "- >",
   "- 0",
   "- )",
   "- {",
   "- throw",
   "- MathRuntimeException",
   "- .",
   "- createIllegalArgumentException",
   "- (",
   "  throw",
   "  MathRuntimeException",
   "  .",
   "  createIllegalArgumentException",
   "  (",
   "  NON_BRACKETING_MESSAGE",
   "  ,",
   "  min",
   "  ,",
   "  max",
   "  ,",
   "  yMin",
   "  ,",
   "  yMax",
   "  )",
   "  ;",
   "- NON_BRACKETING_MESSAGE",
   "- ,",
   "- min",
   "- ,",
   "- max",
   "- ,",
   "- yMin",
   "- ,",
   "- yMax",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  full",
   "  Brent",
   "  algorithm",
   "  starting",
   "  with",
   "  provided",
   "  initial",
   "  guesseturn",
   "  solve",
   "  (",
   "  f",
   "  ,",
   "  min",
   "  ,",
   "  yMin",
   "  ,",
   "  max",
   "  ,",
   "  yMax",
   "  ,",
   "  initial",
   "  ,",
   "  yInitial",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 74,
  "changes_set": [
   "  ublic",
   "  double",
   "  integrate",
   "  (",
   "  final",
   "  FirstOrderDifferentialEquations",
   "  equations",
   "  ,",
   "  f",
   "  (",
   "  firstTime",
   "  )",
   "  {",
   "  final",
   "  double",
   "  [",
   "  ]",
   "  scale",
   "- =",
   "- new",
   "- double",
   "- [",
   "- y0",
   "- .",
   "- length",
   "- ]",
   "  ;",
   "  final",
   "  double",
   "  [",
   "  ]",
   "  scale",
   "  =",
   "  new",
   "  double",
   "  [",
   "  y0",
   "  .",
   "  length",
   "  ]",
   "  ;",
   "  f",
   "  (",
   "  vecAbsoluteTolerance",
   "  ==",
   "  null",
   "  )",
   "  {",
   "+ scale",
   "- for",
   "- (",
   "- int",
   "- i",
   "  =",
   "+ new",
   "+ double",
   "+ [",
   "+ y0",
   "- 0",
   "- ;",
   "- i",
   "- <",
   "- scale",
   "  .",
   "  length",
   "+ ]",
   "  ;",
   "- ++",
   "- i",
   "+ java",
   "+ .",
   "+ util",
   "+ .",
   "+ Arrays",
   "+ .",
   "+ fill",
   "+ (",
   "+ scale",
   "+ ,",
   "+ scalAbsoluteTolerance",
   "  )",
   "- {",
   "+ ;",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  scale",
   "  .",
   "  length",
   "  ;",
   "  ++",
   "  i",
   "  )",
   "  {",
   "  scale",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  scalAbsoluteTolerance",
   "  +",
   "  scalRelativeTolerance",
   "  *",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  y",
   "  [",
   "  i",
   "  ]",
   "  )",
   "  ;",
   "- scale",
   "- [",
   "- i",
   "- ]",
   "- =",
   "- scalAbsoluteTolerance",
   "- +",
   "- scalRelativeTolerance",
   "- *",
   "- Math",
   "- .",
   "- abs",
   "- (",
   "- y",
   "- [",
   "- i",
   "- ]",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  else",
   "  {",
   "+ scale",
   "- for",
   "- (",
   "- int",
   "- i",
   "  =",
   "- 0",
   "+ vecAbsoluteTolerance",
   "  ;",
   "- i",
   "- <",
   "- scale",
   "- .",
   "- length",
   "- ;",
   "- ++",
   "- i",
   "- )",
   "- {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  scale",
   "  .",
   "  length",
   "  ;",
   "  ++",
   "  i",
   "  )",
   "  {",
   "  scale",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  vecAbsoluteTolerance",
   "  [",
   "  i",
   "  ]",
   "  +",
   "  vecRelativeTolerance",
   "  [",
   "  i",
   "  ]",
   "  *",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  y",
   "  [",
   "  i",
   "  ]",
   "  )",
   "  ;",
   "- scale",
   "- [",
   "- i",
   "- ]",
   "- =",
   "- vecAbsoluteTolerance",
   "- [",
   "- i",
   "- ]",
   "- +",
   "- vecRelativeTolerance",
   "- [",
   "- i",
   "- ]",
   "- *",
   "- Math",
   "- .",
   "- abs",
   "- (",
   "- y",
   "- [",
   "- i",
   "- ]",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  New",
   "  =",
   "  initializeStep",
   "  (",
   "  equations",
   "  ,",
   "  forward",
   "  ,",
   "  getOrder",
   "  (",
   "  )",
   "  ,",
   "  scale",
   "  ,",
   "  tepStart",
   "  ,",
   "  y",
   "  ,",
   "  yDotK",
   "  [",
   "  0",
   "  ]",
   "  ,",
   "  yTmp",
   "  ,",
   "  yDotK",
   "  [",
   "  1",
   "  ]",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 75,
  "changes_set": [
   "  eprecatedublic",
   "  double",
   "  getPct",
   "  (",
   "  Object",
   "  v",
   "  )",
   "  {",
   "  return",
   "- getPct",
   "+ getCumPct",
   "  (",
   "  (",
   "  Comparable",
   "  <",
   "  ?",
   "  >",
   "  )",
   "  v",
   "  )",
   "  ;",
   "  return",
   "  getPct",
   "  (",
   "  (",
   "  Comparable",
   "  <",
   "  ?",
   "  >",
   "  )",
   "  v",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 77,
  "changes_set": [
   "  ublic",
   "  double",
   "  getL1Norm",
   "  (",
   "  )",
   "  {",
   "  ublic",
   "  double",
   "  getLInfNorm",
   "  (",
   "  )",
   "  {",
   "  ouble",
   "  max",
   "  =",
   "  0",
   "  ;",
   "  or",
   "  (",
   "  double",
   "  a",
   "  :",
   "  data",
   "  )",
   "  {",
   "  max",
   "- =",
   "+ +=",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  max",
   "  ,",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  a",
   "  )",
   "  )",
   "  ;",
   "  max",
   "  =",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  max",
   "  ,",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  a",
   "  )",
   "  )",
   "  ;",
   "  eturn",
   "  max",
   "  ;"
  ]
 },
 {
  "number": 77,
  "changes_set": [
   "  ublic",
   "  double",
   "  getL1Distance",
   "  (",
   "  double",
   "  [",
   "  ]",
   "  v",
   "  )",
   "  throws",
   "  IllegalArgumentException",
   "  {",
   "  eturn",
   "  max",
   "  ;",
   "+ public",
   "+ double",
   "+ getLInfNorm",
   "+ (",
   "+ )",
   "+ {",
   "+ double",
   "+ max",
   "+ =",
   "+ 0",
   "+ ;",
   "+ Iterator",
   "+ iter",
   "+ =",
   "+ entries",
   "+ .",
   "+ iterator",
   "+ (",
   "+ )",
   "+ ;",
   "+ while",
   "+ (",
   "+ iter",
   "+ .",
   "+ hasNext",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "+ iter",
   "+ .",
   "+ advance",
   "+ (",
   "+ )",
   "+ ;",
   "+ max",
   "+ +=",
   "+ iter",
   "+ .",
   "+ value",
   "+ (",
   "+ )",
   "+ ;",
   "+ }",
   "+ return",
   "+ max",
   "+ ;",
   "+ }",
   "  *",
   "  *",
   "  Optimized",
   "  method",
   "  to",
   "  compute",
   "  LInfDistance",
   "  ."
  ]
 },
 {
  "number": 82,
  "changes_set": [
   "  rivate",
   "  Integer",
   "  getPivotRow",
   "  (",
   "  final",
   "  int",
   "  col",
   "  ,",
   "  final",
   "  SimplexTableau",
   "  tableau",
   "  )",
   "  {",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  tableau",
   "  .",
   "  getNumObjectiveFunctions",
   "  (",
   "  )",
   "  ;",
   "  i",
   "  <",
   "  tableau",
   "  .",
   "  getHeight",
   "  (",
   "  )",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  inal",
   "  double",
   "  rhs",
   "  =",
   "  tableau",
   "  .",
   "  getEntry",
   "  (",
   "  i",
   "  ,",
   "  tableau",
   "  .",
   "  getWidth",
   "  (",
   "  )",
   "  -",
   "  1",
   "  )",
   "  ;",
   "  inal",
   "  double",
   "  entry",
   "  =",
   "  tableau",
   "  .",
   "  getEntry",
   "  (",
   "  i",
   "  ,",
   "  col",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  MathUtils",
   "  .",
   "  compareTo",
   "  (",
   "  entry",
   "  ,",
   "  0",
   "  ,",
   "  epsilon",
   "  )",
   "- >",
   "+ >=",
   "  0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  MathUtils",
   "  .",
   "  compareTo",
   "  (",
   "  entry",
   "  ,",
   "  0",
   "  ,",
   "  epsilon",
   "  )",
   "  >",
   "  0",
   "  )",
   "  {",
   "  inal",
   "  double",
   "  ratio",
   "  =",
   "  rhs",
   "  /",
   "  entry",
   "  ;",
   "  f",
   "  (",
   "  ratio",
   "  <",
   "  minRatio",
   "  )",
   "  {",
   "  inRatio",
   "  =",
   "  ratio",
   "  ;"
  ]
 },
 {
  "number": 76,
  "changes_set": [
   "  ublic",
   "  RealMatrix",
   "  getU",
   "  (",
   "  )",
   "  f",
   "  (",
   "  m",
   "  >=",
   "  n",
   "  )",
   "  {",
   "  /",
   "  the",
   "  tridiagonal",
   "  matrix",
   "  is",
   "  Bt",
   "  .",
   "  B",
   "  ,",
   "  where",
   "  B",
   "  is",
   "  upper",
   "  bidiagonalinal",
   "  RealMatrix",
   "  e",
   "  =",
   "  eigenDecomposition",
   "  .",
   "  getV",
   "  (",
   "  )",
   "  .",
   "  getSubMatrix",
   "  (",
   "  0",
   "  ,",
   "+ p",
   "+ -",
   "+ 1",
   "+ ,",
   "+ 0",
   "+ ,",
   "+ p",
   "+ -",
   "+ 1",
   "+ )",
   "+ ;",
   "+ eigenDecomposition",
   "+ .",
   "+ getV",
   "+ (",
   "+ )",
   "+ .",
   "+ getSubMatrix",
   "+ (",
   "+ 0",
   "+ ,",
   "  n",
   "  -",
   "  1",
   "  ,",
   "  0",
   "  ,",
   "  p",
   "  -",
   "  1",
   "  )",
   "  ;",
   "- eigenDecomposition",
   "- .",
   "- getV",
   "- (",
   "- )",
   "- .",
   "- getSubMatrix",
   "- (",
   "- 0",
   "- ,",
   "- n",
   "- -",
   "- 1",
   "- ,",
   "- 0",
   "- ,",
   "- p",
   "- -",
   "- 1",
   "- )",
   "- ;",
   "  inal",
   "  double",
   "  [",
   "  ]",
   "  [",
   "  ]",
   "  eData",
   "  =",
   "  e",
   "  .",
   "  getData",
   "  (",
   "  )",
   "  ;",
   "  inal",
   "  double",
   "  [",
   "  ]",
   "  [",
   "  ]",
   "  wData",
   "  =",
   "  new",
   "  double",
   "  [",
   "  m",
   "  ]",
   "  [",
   "  p",
   "  ]",
   "  ;",
   "  ouble",
   "  [",
   "  ]",
   "  ei1",
   "  =",
   "  eData",
   "  [",
   "  0",
   "  ]",
   "  ;",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  p",
   "+ -",
   "+ 1",
   "  ;",
   "  ++",
   "  i",
   "  )",
   "  {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  p",
   "  ;",
   "  ++",
   "  i",
   "  )",
   "  {",
   "  /",
   "  compute",
   "  W",
   "  =",
   "  B",
   "  .",
   "  E",
   "  .",
   "  S",
   "  ^",
   "  (",
   "  -",
   "  1",
   "  )",
   "  where",
   "  E",
   "  is",
   "  the",
   "  eigenvectors",
   "  matrixinal",
   "  double",
   "  mi",
   "  =",
   "  mainBidiagonal",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  inal",
   "  double",
   "  [",
   "  ]",
   "  ei0",
   "  =",
   "  ei1",
   "  ;",
   "  inal",
   "  double",
   "  [",
   "  ]",
   "  wi",
   "  =",
   "  wData",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  if",
   "  (",
   "  i",
   "  <",
   "  n",
   "  -",
   "  1",
   "  )",
   "  {",
   "- if",
   "- (",
   "- i",
   "- <",
   "- n",
   "- -",
   "- 1",
   "- )",
   "- {",
   "  i1",
   "  =",
   "  eData",
   "  [",
   "  i",
   "  +",
   "  1",
   "  ]",
   "  ;",
   "  inal",
   "  double",
   "  si",
   "  =",
   "  secondaryBidiagonal",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  j",
   "  =",
   "  0",
   "  ;",
   "  j",
   "  <",
   "  p",
   "  ;",
   "  ++",
   "  j",
   "  )",
   "  {",
   "  i",
   "  [",
   "  j",
   "  ]",
   "  =",
   "  (",
   "  mi",
   "  *",
   "  ei0",
   "  [",
   "  j",
   "  ]",
   "  +",
   "  si",
   "  *",
   "  ei1",
   "  [",
   "  j",
   "  ]",
   "  )",
   "  /",
   "  singularValues",
   "  [",
   "  j",
   "  ]",
   "  ;",
   "  }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  or",
   "  (",
   "  int",
   "  j",
   "  =",
   "  0",
   "  ;",
   "  j",
   "  <",
   "  p",
   "  ;",
   "  ++",
   "  j",
   "  )",
   "  {",
   "+ wData",
   "+ [",
   "+ p",
   "+ -",
   "+ 1",
   "+ ]",
   "+ [",
   "+ j",
   "+ ]",
   "+ =",
   "+ ei1",
   "+ [",
   "+ j",
   "+ ]",
   "+ *",
   "+ mainBidiagonal",
   "+ [",
   "+ p",
   "+ -",
   "+ 1",
   "+ ]",
   "+ /",
   "+ singularValues",
   "+ [",
   "+ j",
   "+ ]",
   "+ ;",
   "  wi",
   "  [",
   "  j",
   "  ]",
   "  =",
   "  mi",
   "  *",
   "  ei0",
   "  [",
   "  j",
   "  ]",
   "  /",
   "  singularValues",
   "  [",
   "  j",
   "  ]",
   "  ;",
   "- wi",
   "- [",
   "- j",
   "- ]",
   "- =",
   "- mi",
   "- *",
   "- ei0",
   "- [",
   "- j",
   "- ]",
   "- /",
   "- singularValues",
   "- [",
   "- j",
   "- ]",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  p",
   "  ;",
   "  i",
   "  <",
   "  m",
   "  ;",
   "  ++",
   "  i",
   "  )",
   "  {",
   "  Data",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  new",
   "  double",
   "  [",
   "  p",
   "  ]",
   "  ;"
  ]
 },
 {
  "number": 76,
  "changes_set": [
   "  ublic",
   "  RealMatrix",
   "  getV",
   "  (",
   "  )",
   "  /",
   "  the",
   "  tridiagonal",
   "  matrix",
   "  is",
   "  B",
   "  .",
   "  Bt",
   "  ,",
   "  where",
   "  B",
   "  is",
   "  lower",
   "  bidiagonal",
   "  /",
   "  compute",
   "  W",
   "  =",
   "  Bt",
   "  .",
   "  E",
   "  .",
   "  S",
   "  ^",
   "  (",
   "  -",
   "  1",
   "  )",
   "  where",
   "  E",
   "  is",
   "  the",
   "  eigenvectors",
   "  matrixinal",
   "  RealMatrix",
   "  e",
   "  =",
   "  eigenDecomposition",
   "  .",
   "  getV",
   "  (",
   "  )",
   "  .",
   "  getSubMatrix",
   "  (",
   "  0",
   "  ,",
   "+ p",
   "+ -",
   "+ 1",
   "+ ,",
   "+ 0",
   "+ ,",
   "+ p",
   "+ -",
   "+ 1",
   "+ )",
   "+ ;",
   "+ eigenDecomposition",
   "+ .",
   "+ getV",
   "+ (",
   "+ )",
   "+ .",
   "+ getSubMatrix",
   "+ (",
   "+ 0",
   "+ ,",
   "  m",
   "  -",
   "  1",
   "  ,",
   "  0",
   "  ,",
   "  p",
   "  -",
   "  1",
   "  )",
   "  ;",
   "- eigenDecomposition",
   "- .",
   "- getV",
   "- (",
   "- )",
   "- .",
   "- getSubMatrix",
   "- (",
   "- 0",
   "- ,",
   "- m",
   "- -",
   "- 1",
   "- ,",
   "- 0",
   "- ,",
   "- p",
   "- -",
   "- 1",
   "- )",
   "- ;",
   "  inal",
   "  double",
   "  [",
   "  ]",
   "  [",
   "  ]",
   "  eData",
   "  =",
   "  e",
   "  .",
   "  getData",
   "  (",
   "  )",
   "  ;",
   "  inal",
   "  double",
   "  [",
   "  ]",
   "  [",
   "  ]",
   "  wData",
   "  =",
   "  new",
   "  double",
   "  [",
   "  n",
   "  ]",
   "  [",
   "  p",
   "  ]",
   "  ;",
   "  ouble",
   "  [",
   "  ]",
   "  ei1",
   "  =",
   "  eData",
   "  [",
   "  0",
   "  ]",
   "  ;",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  p",
   "+ -",
   "+ 1",
   "  ;",
   "  ++",
   "  i",
   "  )",
   "  {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  p",
   "  ;",
   "  ++",
   "  i",
   "  )",
   "  {",
   "  inal",
   "  double",
   "  mi",
   "  =",
   "  mainBidiagonal",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  inal",
   "  double",
   "  [",
   "  ]",
   "  ei0",
   "  =",
   "  ei1",
   "  ;",
   "  inal",
   "  double",
   "  [",
   "  ]",
   "  wi",
   "  =",
   "  wData",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "- if",
   "- (",
   "- i",
   "- <",
   "- m",
   "- -",
   "- 1",
   "- )",
   "- {",
   "  if",
   "  (",
   "  i",
   "  <",
   "  m",
   "  -",
   "  1",
   "  )",
   "  {",
   "  i1",
   "  =",
   "  eData",
   "  [",
   "  i",
   "  +",
   "  1",
   "  ]",
   "  ;",
   "  inal",
   "  double",
   "  si",
   "  =",
   "  secondaryBidiagonal",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  j",
   "  =",
   "  0",
   "  ;",
   "  j",
   "  <",
   "  p",
   "  ;",
   "  ++",
   "  j",
   "  )",
   "  {",
   "  i",
   "  [",
   "  j",
   "  ]",
   "  =",
   "  (",
   "  mi",
   "  *",
   "  ei0",
   "  [",
   "  j",
   "  ]",
   "  +",
   "  si",
   "  *",
   "  ei1",
   "  [",
   "  j",
   "  ]",
   "  )",
   "  /",
   "  singularValues",
   "  [",
   "  j",
   "  ]",
   "  ;",
   "  }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  or",
   "  (",
   "  int",
   "  j",
   "  =",
   "  0",
   "  ;",
   "  j",
   "  <",
   "  p",
   "  ;",
   "  ++",
   "  j",
   "  )",
   "  {",
   "+ wData",
   "+ [",
   "+ p",
   "+ -",
   "+ 1",
   "+ ]",
   "+ [",
   "+ j",
   "+ ]",
   "+ =",
   "+ ei1",
   "+ [",
   "+ j",
   "+ ]",
   "+ *",
   "+ mainBidiagonal",
   "+ [",
   "+ p",
   "+ -",
   "+ 1",
   "+ ]",
   "+ /",
   "+ singularValues",
   "+ [",
   "+ j",
   "+ ]",
   "+ ;",
   "  wi",
   "  [",
   "  j",
   "  ]",
   "  =",
   "  mi",
   "  *",
   "  ei0",
   "  [",
   "  j",
   "  ]",
   "  /",
   "  singularValues",
   "  [",
   "  j",
   "  ]",
   "  ;",
   "- wi",
   "- [",
   "- j",
   "- ]",
   "- =",
   "- mi",
   "- *",
   "- ei0",
   "- [",
   "- j",
   "- ]",
   "- /",
   "- singularValues",
   "- [",
   "- j",
   "- ]",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  p",
   "  ;",
   "  i",
   "  <",
   "  n",
   "  ;",
   "  ++",
   "  i",
   "  )",
   "  {",
   "  Data",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  new",
   "  double",
   "  [",
   "  p",
   "  ]",
   "  ;"
  ]
 },
 {
  "number": 84,
  "changes_set": [
   "  ublic",
   "  MultiDirectional",
   "  (",
   "  final",
   "  double",
   "  khi",
   "  ,",
   "  final",
   "  double",
   "  gamma",
   "  )",
   "  {",
   "  rotected",
   "  void",
   "  iterateSimplex",
   "  (",
   "  final",
   "  Comparator",
   "  <",
   "  RealPointValuePair",
   "  >",
   "  comparator",
   "  )",
   "  hrows",
   "  FunctionEvaluationException",
   "  ,",
   "  OptimizationException",
   "  ,",
   "  IllegalArgumentException",
   "  {",
   "  final",
   "  RealConvergenceChecker",
   "  checker",
   "  =",
   "  getConvergenceChecker",
   "  (",
   "  )",
   "  ;",
   "- final",
   "- RealConvergenceChecker",
   "- checker",
   "- =",
   "- getConvergenceChecker",
   "- (",
   "- )",
   "- ;",
   "  hile",
   "  (",
   "  true",
   "  )",
   "  {",
   "  ncrementIterationsCounter",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 84,
  "changes_set": [
   "  rotected",
   "  void",
   "  iterateSimplex",
   "  (",
   "  final",
   "  Comparator",
   "  <",
   "  RealPointValuePair",
   "  >",
   "  comparator",
   "  )",
   "  inal",
   "  RealPointValuePair",
   "  contracted",
   "  =",
   "  evaluateNewSimplex",
   "  (",
   "  original",
   "  ,",
   "  gamma",
   "  ,",
   "  comparator",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  comparator",
   "  .",
   "  compare",
   "  (",
   "  contracted",
   "  ,",
   "  best",
   "  )",
   "  <",
   "  0",
   "  )",
   "  {",
   "  /",
   "  accept",
   "  the",
   "  contracted",
   "  simplexreturn",
   "  ;",
   "- return",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  check",
   "  convergencefinal",
   "- int",
   "- iter",
   "- =",
   "- getIterations",
   "- (",
   "- )",
   "- ;",
   "- final",
   "  int",
   "  iter",
   "  =",
   "  getIterations",
   "  (",
   "  )",
   "  ;",
   "  boolean",
   "  converged",
   "  =",
   "  true",
   "  ;",
   "- boolean",
   "- converged",
   "- =",
   "- true",
   "- ;",
   "- for",
   "- (",
   "- int",
   "- i",
   "- =",
   "- 0",
   "- ;",
   "- i",
   "- <",
   "- simplex",
   "- .",
   "- length",
   "- ;",
   "- ++",
   "- i",
   "- )",
   "- {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  simplex",
   "  .",
   "  length",
   "  ;",
   "  ++",
   "  i",
   "  )",
   "  {",
   "  converged",
   "  &=",
   "  checker",
   "  .",
   "  converged",
   "  (",
   "  iter",
   "  ,",
   "  original",
   "  [",
   "  i",
   "  ]",
   "  ,",
   "  simplex",
   "  [",
   "  i",
   "  ]",
   "  )",
   "  ;",
   "- converged",
   "- &=",
   "- checker",
   "- .",
   "- converged",
   "- (",
   "- iter",
   "- ,",
   "- original",
   "- [",
   "- i",
   "- ]",
   "- ,",
   "- simplex",
   "- [",
   "- i",
   "- ]",
   "- )",
   "- ;",
   "  }",
   "- }",
   "- if",
   "- (",
   "- converged",
   "- )",
   "- {",
   "  if",
   "  (",
   "  converged",
   "  )",
   "  {",
   "  eturn",
   "  ;"
  ]
 },
 {
  "number": 81,
  "changes_set": [
   "  rivate",
   "  void",
   "  computeGershgorinCircles",
   "  (",
   "  )",
   "  {",
   "  owerSpectra",
   "  =",
   "  Math",
   "  .",
   "  min",
   "  (",
   "  lowerSpectra",
   "  ,",
   "  lower",
   "  )",
   "  ;",
   "  inal",
   "  double",
   "  upper",
   "  =",
   "  dCurrent",
   "  +",
   "  eCurrent",
   "  ;",
   "  ork",
   "  [",
   "  upperStart",
   "  +",
   "  m",
   "  -",
   "  1",
   "  ]",
   "  =",
   "  upper",
   "  ;",
   "  upperSpectra",
   "  =",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  upperSpectra",
   "  ,",
   "  upper",
   "  )",
   "  ;",
   "- upperSpectra",
   "- =",
   "- Math",
   "- .",
   "- max",
   "- (",
   "- upperSpectra",
   "- ,",
   "- upper",
   "- )",
   "- ;",
   "  inPivot",
   "  =",
   "  MathUtils",
   "  .",
   "  SAFE_MIN",
   "  *",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  1.0",
   "  ,",
   "  eMax",
   "  *",
   "  eMax",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 81,
  "changes_set": [
   "  rivate",
   "  void",
   "  processGeneralBlock",
   "  (",
   "  final",
   "  int",
   "  n",
   "  )",
   "  iagMax",
   "  =",
   "  work",
   "  [",
   "  4",
   "  *",
   "  i0",
   "  ]",
   "  ;",
   "  ffDiagMin",
   "  =",
   "  work",
   "  [",
   "  4",
   "  *",
   "  i0",
   "  +",
   "  2",
   "  ]",
   "  ;",
   "  ouble",
   "  previousEMin",
   "  =",
   "  work",
   "  [",
   "  4",
   "  *",
   "  i0",
   "  +",
   "  3",
   "  ]",
   "  ;",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  4",
   "  *",
   "  i0",
   "  ;",
   "  i",
   "  <",
   "  4",
   "  *",
   "  n0",
   "  -",
   "+ 11",
   "- 16",
   "- ;",
   "- i",
   "- +=",
   "- 4",
   "- )",
   "- {",
   "- for",
   "- (",
   "- int",
   "- i",
   "- =",
   "- 4",
   "- *",
   "- i0",
   "- ;",
   "- i",
   "- <",
   "- 4",
   "- *",
   "- n0",
   "- -",
   "- 16",
   "  ;",
   "  i",
   "  +=",
   "  4",
   "  )",
   "  {",
   "  if",
   "  (",
   "  (",
   "  work",
   "  [",
   "  i",
   "  +",
   "  3",
   "  ]",
   "  <=",
   "  TOLERANCE_2",
   "  *",
   "  work",
   "  [",
   "  i",
   "  ]",
   "  )",
   "- ||",
   "+ &&",
   "+ for",
   "+ (",
   "+ int",
   "+ i",
   "+ =",
   "+ 4",
   "+ *",
   "+ i0",
   "+ ;",
   "+ i",
   "+ <",
   "+ 4",
   "+ *",
   "+ n0",
   "+ -",
   "+ 16",
   "+ ;",
   "+ i",
   "+ +=",
   "+ 4",
   "+ )",
   "+ {",
   "  if",
   "  (",
   "  (",
   "  work",
   "  [",
   "  i",
   "  +",
   "  3",
   "  ]",
   "  <=",
   "  TOLERANCE_2",
   "  *",
   "  work",
   "  [",
   "  i",
   "  ]",
   "  )",
   "  ||",
   "  work",
   "  [",
   "  i",
   "  +",
   "  2",
   "  ]",
   "  <=",
   "  TOLERANCE_2",
   "  *",
   "  sigma",
   "  )",
   "  )",
   "  {",
   "  /",
   "  insert",
   "  a",
   "  splitork",
   "  [",
   "  i",
   "  +",
   "  2",
   "  ]",
   "  =",
   "  -",
   "  sigma",
   "  ;"
  ]
 },
 {
  "number": 81,
  "changes_set": [
   "  rivate",
   "  void",
   "  computeShiftIncrement",
   "  (",
   "  final",
   "  int",
   "  start",
   "  ,",
   "  final",
   "  int",
   "  end",
   "  ,",
   "  final",
   "  int",
   "  defouble",
   "  a2",
   "  =",
   "  (",
   "  work",
   "  [",
   "  np",
   "  -",
   "  8",
   "  ]",
   "  /",
   "  b2",
   "  )",
   "  *",
   "  (",
   "  1",
   "  +",
   "  work",
   "  [",
   "  np",
   "  -",
   "  4",
   "  ]",
   "  /",
   "  b1",
   "  )",
   "  ;",
   "  /",
   "  approximate",
   "  contribution",
   "  to",
   "  norm",
   "  squared",
   "  from",
   "  i",
   "  <",
   "  nn",
   "  -",
   "  2.",
   "  if",
   "  (",
   "  end",
   "  -",
   "  start",
   "  >",
   "- 3",
   "+ 2",
   "  )",
   "  {",
   "  if",
   "  (",
   "  end",
   "  -",
   "  start",
   "  >",
   "  3",
   "  )",
   "  {",
   "  or",
   "  (",
   "  int",
   "  i4",
   "  =",
   "  nn",
   "  -",
   "  17",
   "  ;",
   "  i4",
   "  >=",
   "  4",
   "  *",
   "  start",
   "  +",
   "  2",
   "  +",
   "  pingPong",
   "  ;",
   "  i4",
   "  -=",
   "  4",
   "  )",
   "  {"
  ]
 },
 {
  "number": 80,
  "changes_set": [
   "  rivate",
   "  int",
   "  goodStep",
   "  (",
   "  final",
   "  int",
   "  start",
   "  ,",
   "  final",
   "  int",
   "  end",
   "  )",
   "  {",
   "  rivate",
   "  boolean",
   "  flipIfWarranted",
   "  (",
   "  final",
   "  int",
   "  n",
   "  ,",
   "  final",
   "  int",
   "  step",
   "  )",
   "  {",
   "  f",
   "  (",
   "  1.5",
   "  *",
   "  work",
   "  [",
   "  pingPong",
   "  ]",
   "  <",
   "  work",
   "  [",
   "  4",
   "  *",
   "  (",
   "  n",
   "  -",
   "  1",
   "  )",
   "  +",
   "  pingPong",
   "  ]",
   "  )",
   "  {",
   "  /",
   "  flip",
   "  arrayint",
   "  j",
   "  =",
   "  4",
   "  *",
   "- (",
   "  n",
   "  -",
   "  1",
   "- )",
   "  ;",
   "  int",
   "  j",
   "  =",
   "  4",
   "  *",
   "  (",
   "  n",
   "  -",
   "  1",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  j",
   "  ;",
   "  i",
   "  +=",
   "  4",
   "  )",
   "  {",
   "  or",
   "  (",
   "  int",
   "  k",
   "  =",
   "  0",
   "  ;",
   "  k",
   "  <",
   "  4",
   "  ;",
   "  k",
   "  +=",
   "  step",
   "  )",
   "  {",
   "  inal",
   "  double",
   "  tmp",
   "  =",
   "  work",
   "  [",
   "  i",
   "  +",
   "  k",
   "  ]",
   "  ;"
  ]
 },
 {
  "number": 78,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  evaluateStep",
   "  (",
   "  final",
   "  StepInterpolator",
   "  interpolator",
   "  )",
   "  f",
   "  (",
   "  g0Positive",
   "  ^",
   "  (",
   "  gb",
   "  >=",
   "  0",
   "  )",
   "  )",
   "  {",
   "  /",
   "  there",
   "  is",
   "  a",
   "  sign",
   "  change",
   "  :",
   "  an",
   "  event",
   "  is",
   "  expected",
   "  during",
   "  this",
   "  stepif",
   "  (",
   "  ga",
   "  *",
   "  gb",
   "  >",
   "  0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- ga",
   "- *",
   "- gb",
   "- >",
   "- 0",
   "- )",
   "- {",
   "  /",
   "  this",
   "  is",
   "  a",
   "  corner",
   "  case",
   "  :",
   "  /",
   "  -",
   "  there",
   "  was",
   "  an",
   "  event",
   "  near",
   "  ta",
   "  ,",
   "  /",
   "  -",
   "  there",
   "  is",
   "  another",
   "  event",
   "  between",
   "  ta",
   "  and",
   "  tb"
  ]
 },
 {
  "number": 78,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  evaluateStep",
   "  (",
   "  final",
   "  StepInterpolator",
   "  interpolator",
   "  )",
   "  /",
   "  this",
   "  implies",
   "  that",
   "  the",
   "  real",
   "  sign",
   "  of",
   "  ga",
   "  is",
   "  the",
   "  same",
   "  as",
   "  gb",
   "  ,",
   "  so",
   "  we",
   "  need",
   "  to",
   "  slightly",
   "  /",
   "  shift",
   "  ta",
   "  to",
   "  make",
   "  sure",
   "  ga",
   "  and",
   "  gb",
   "  get",
   "  opposite",
   "  signs",
   "  and",
   "  the",
   "  solver",
   "  won",
   "  complain",
   "  /",
   "  about",
   "  bracketingfinal",
   "  double",
   "  epsilon",
   "  =",
   "  (",
   "  forward",
   "  ?",
   "  0.25",
   "  :",
   "  -",
   "  0.25",
   "  )",
   "  *",
   "  convergence",
   "  ;",
   "- final",
   "- double",
   "- epsilon",
   "- =",
   "- (",
   "- forward",
   "- ?",
   "- 0.25",
   "- :",
   "- -",
   "- 0.25",
   "- )",
   "- *",
   "- convergence",
   "- ;",
   "- for",
   "- (",
   "- int",
   "- k",
   "- =",
   "- 0",
   "- ;",
   "- (",
   "- k",
   "- <",
   "- 4",
   "- )",
   "- &&",
   "- (",
   "- ga",
   "- *",
   "- gb",
   "- >",
   "- 0",
   "- )",
   "- ;",
   "- ++",
   "- k",
   "- )",
   "- {",
   "  for",
   "  (",
   "  int",
   "  k",
   "  =",
   "  0",
   "  ;",
   "  (",
   "  k",
   "  <",
   "  4",
   "  )",
   "  &&",
   "  (",
   "  ga",
   "  *",
   "  gb",
   "  >",
   "  0",
   "  )",
   "  ;",
   "  ++",
   "  k",
   "  )",
   "  {",
   "  ta",
   "  +=",
   "  epsilon",
   "  ;",
   "- ta",
   "- +=",
   "- epsilon",
   "- ;",
   "- interpolator",
   "- .",
   "- setInterpolatedTime",
   "- (",
   "- ta",
   "- )",
   "- ;",
   "  interpolator",
   "  .",
   "  setInterpolatedTime",
   "  (",
   "  ta",
   "  )",
   "  ;",
   "  ga",
   "  =",
   "  handler",
   "  .",
   "  g",
   "  (",
   "  ta",
   "  ,",
   "  interpolator",
   "  .",
   "  getInterpolatedState",
   "  (",
   "  )",
   "  )",
   "  ;",
   "- ga",
   "- =",
   "- handler",
   "- .",
   "- g",
   "- (",
   "- ta",
   "- ,",
   "- interpolator",
   "- .",
   "- getInterpolatedState",
   "- (",
   "- )",
   "- )",
   "- ;",
   "  }",
   "- }",
   "- if",
   "- (",
   "- ga",
   "- *",
   "- gb",
   "- >",
   "- 0",
   "- )",
   "- {",
   "  if",
   "  (",
   "  ga",
   "  *",
   "  gb",
   "  >",
   "  0",
   "  )",
   "  {",
   "  /",
   "  this",
   "  should",
   "  never",
   "  happenthrow",
   "  MathRuntimeException",
   "  .",
   "  createInternalError",
   "  (",
   "  null",
   "  )",
   "  ;",
   "- throw",
   "- MathRuntimeException",
   "- .",
   "- createInternalError",
   "- (",
   "- null",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  /",
   "  variation",
   "  direction",
   "  ,",
   "  with",
   "  respect",
   "  to",
   "  the",
   "  integration",
   "  directionncreasing",
   "  =",
   "  gb",
   "  >=",
   "  ga",
   "  ;"
  ]
 },
 {
  "number": 83,
  "changes_set": [
   "  rivate",
   "  Integer",
   "  getBasicRowForSolution",
   "  (",
   "  final",
   "  int",
   "  col",
   "  )",
   "  {",
   "  /",
   "  rivate",
   "  Integer",
   "  getBasicRow",
   "  (",
   "  final",
   "  int",
   "  col",
   "  ,",
   "  boolean",
   "  ignoreObjectiveRows",
   "  )",
   "  {",
   "  nteger",
   "  row",
   "  =",
   "  null",
   "  ;",
   "  int",
   "  start",
   "  =",
   "- ignoreObjectiveRows",
   "- ?",
   "  getNumObjectiveFunctions",
   "  (",
   "  )",
   "- :",
   "- 0",
   "  ;",
   "  int",
   "  start",
   "  =",
   "  ignoreObjectiveRows",
   "  ?",
   "  getNumObjectiveFunctions",
   "  (",
   "  )",
   "  :",
   "  0",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  start",
   "  ;",
   "  i",
   "  <",
   "  getHeight",
   "  (",
   "  )",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  f",
   "  (",
   "  MathUtils",
   "  .",
   "  equals",
   "  (",
   "  getEntry",
   "  (",
   "  i",
   "  ,",
   "  col",
   "  )",
   "  ,",
   "  1.0",
   "  ,",
   "  epsilon",
   "  )",
   "  &&",
   "  (",
   "  row",
   "  ==",
   "  null",
   "  )",
   "  )",
   "  {",
   "  ow",
   "  =",
   "  i",
   "  ;"
  ]
 },
 {
  "number": 83,
  "changes_set": [
   "  rivate",
   "  void",
   "  copyArray",
   "  (",
   "  final",
   "  double",
   "  [",
   "  ]",
   "  src",
   "  ,",
   "  final",
   "  double",
   "  [",
   "  ]",
   "  dest",
   "  ,",
   "  /",
   "  rotected",
   "  RealPointValuePair",
   "  getSolution",
   "  (",
   "  )",
   "  {",
   "  ouble",
   "  [",
   "  ]",
   "  coefficients",
   "  =",
   "  new",
   "  double",
   "  [",
   "  getOriginalNumDecisionVariables",
   "  (",
   "  )",
   "  ]",
   "  ;",
   "  Integer",
   "  negativeVarBasicRow",
   "  =",
   "- getBasicRowForSolution",
   "+ getBasicRow",
   "  (",
   "  getNegativeDecisionVariableOffset",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  Integer",
   "  negativeVarBasicRow",
   "  =",
   "  getBasicRowForSolution",
   "  (",
   "  getNegativeDecisionVariableOffset",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  ouble",
   "  mostNegative",
   "  =",
   "  negativeVarBasicRow",
   "  ==",
   "  null",
   "  ?",
   "  0",
   "  :",
   "  getEntry",
   "  (",
   "  negativeVarBasicRow",
   "  ,",
   "  getRhsOffset",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  et",
   "  <",
   "  Integer",
   "  >",
   "  basicRows",
   "  =",
   "  new",
   "  HashSet",
   "  <",
   "  Integer",
   "  >",
   "  (",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  coefficients",
   "  .",
   "  length",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  Integer",
   "  basicRow",
   "  =",
   "- getBasicRowForSolution",
   "+ getBasicRow",
   "  (",
   "  getNumObjectiveFunctions",
   "  (",
   "  )",
   "  +",
   "  i",
   "  )",
   "  ;",
   "  Integer",
   "  basicRow",
   "  =",
   "  getBasicRowForSolution",
   "  (",
   "  getNumObjectiveFunctions",
   "  (",
   "  )",
   "  +",
   "  i",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  basicRows",
   "  .",
   "  contains",
   "  (",
   "  basicRow",
   "  )",
   "  )",
   "  {",
   "  /",
   "  if",
   "  multiple",
   "  variables",
   "  can",
   "  take",
   "  a",
   "  given",
   "  value",
   "  /",
   "  then",
   "  we",
   "  choose",
   "  the",
   "  first",
   "  and",
   "  set",
   "  the",
   "  rest",
   "  equal",
   "  to",
   "  0"
  ]
 },
 {
  "number": 79,
  "changes_set": [
   "  eturn",
   "  the",
   "  L",
   "  <",
   "  sub",
   "  >",
   "  2",
   "  <",
   "  /",
   "  sub",
   "  >",
   "  distance",
   "  between",
   "  the",
   "  two",
   "  points",
   "  /",
   "  ublic",
   "  static",
   "  double",
   "  distance",
   "  (",
   "  int",
   "  [",
   "  ]",
   "  p1",
   "  ,",
   "  int",
   "  [",
   "  ]",
   "  p2",
   "  )",
   "  {",
   "- double",
   "+ int",
   "  sum",
   "  =",
   "  0",
   "  ;",
   "  double",
   "  sum",
   "  =",
   "  0",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  p1",
   "  .",
   "  length",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  final",
   "- double",
   "+ int",
   "  dp",
   "  =",
   "  p1",
   "  [",
   "  i",
   "  ]",
   "  -",
   "  p2",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  final",
   "  double",
   "  dp",
   "  =",
   "  p1",
   "  [",
   "  i",
   "  ]",
   "  -",
   "  p2",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  um",
   "  +=",
   "  dp",
   "  *",
   "  dp",
   "  ;",
   "  eturn",
   "  Math",
   "  .",
   "  sqrt",
   "  (",
   "  sum",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 85,
  "changes_set": [
   "  ublic",
   "  static",
   "  double",
   "  solve",
   "  (",
   "  UnivariateRealFunction",
   "  f",
   "  ,",
   "  double",
   "  x0",
   "  ,",
   "  double",
   "  x1",
   "  ,",
   "  while",
   "  (",
   "  (",
   "  fa",
   "  *",
   "  fb",
   "  >",
   "  0.0",
   "  )",
   "  &&",
   "  (",
   "  numIterations",
   "  <",
   "  maximumIterations",
   "  )",
   "  &&",
   "  (",
   "  a",
   "  >",
   "  lowerBound",
   "  )",
   "  ||",
   "  (",
   "  b",
   "  <",
   "  upperBound",
   "  )",
   "  )",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  fa",
   "  *",
   "  fb",
   "- >",
   "+ >=",
   "  0.0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  fa",
   "  *",
   "  fb",
   "  >",
   "  0.0",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  ConvergenceException",
   "  (",
   "  number",
   "  of",
   "  iterations",
   "  =",
   "  {",
   "  0",
   "  }",
   "  ,",
   "  maximum",
   "  iterations",
   "  =",
   "  {",
   "  1",
   "  }",
   "  ,",
   "  \" +initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \"",
   "  +"
  ]
 },
 {
  "number": 89,
  "changes_set": [
   "  eprecatedublic",
   "  void",
   "  addValue",
   "  (",
   "  Object",
   "  v",
   "- )",
   "- {",
   "- if",
   "- (",
   "- v",
   "- instanceof",
   "- Comparable",
   "- <",
   "- ?",
   "- >",
   "  )",
   "  {",
   "  if",
   "  (",
   "  v",
   "  instanceof",
   "  Comparable",
   "  <",
   "  ?",
   "  >",
   "  )",
   "  {",
   "  ddValue",
   "  (",
   "  (",
   "  Comparable",
   "  <",
   "  ?",
   "  >",
   "  )",
   "  v",
   "  )",
   "  ;",
   "  }",
   "  else",
   "  {",
   "- }",
   "- else",
   "- {",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"Object must implement Comparable\"",
   "- )",
   "- ;",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Object must implement Comparable\"",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  *",
   "  *"
  ]
 },
 {
  "number": 87,
  "changes_set": [
   "  rotected",
   "  static",
   "  double",
   "  getInvertedCoeffiecientSum",
   "  (",
   "  final",
   "  RealVector",
   "  coefficientsrivate",
   "  Integer",
   "  getBasicRow",
   "  (",
   "  final",
   "  int",
   "  col",
   "  )",
   "  {",
   "  nteger",
   "  row",
   "  =",
   "  null",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  getNumObjectiveFunctions",
   "  (",
   "  )",
   "  ;",
   "  i",
   "  <",
   "  getHeight",
   "  (",
   "  )",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  if",
   "  (",
   "+ !",
   "  MathUtils",
   "  .",
   "  equals",
   "  (",
   "  getEntry",
   "  (",
   "  i",
   "  ,",
   "  col",
   "  )",
   "  ,",
   "- 1.0",
   "+ 0.0",
   "  ,",
   "  epsilon",
   "  )",
   "- &&",
   "+ )",
   "+ {",
   "+ if",
   "  (",
   "  row",
   "  ==",
   "  null",
   "- )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  MathUtils",
   "  .",
   "  equals",
   "  (",
   "  getEntry",
   "  (",
   "  i",
   "  ,",
   "  col",
   "  )",
   "  ,",
   "  1.0",
   "  ,",
   "  epsilon",
   "  )",
   "  &&",
   "  (",
   "  row",
   "  ==",
   "  null",
   "  )",
   "  )",
   "  {",
   "  ow",
   "  =",
   "  i",
   "  ;",
   "  }",
   "  else",
   "- if",
   "- (",
   "- !",
   "- MathUtils",
   "- .",
   "- equals",
   "- (",
   "- getEntry",
   "- (",
   "- i",
   "- ,",
   "- col",
   "- )",
   "- ,",
   "- 0.0",
   "- ,",
   "- epsilon",
   "- )",
   "- )",
   "  {",
   "  }",
   "  else",
   "  if",
   "  (",
   "  !",
   "  MathUtils",
   "  .",
   "  equals",
   "  (",
   "  getEntry",
   "  (",
   "  i",
   "  ,",
   "  col",
   "  )",
   "  ,",
   "  0.0",
   "  ,",
   "  epsilon",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  null",
   "  ;",
   "+ }",
   "  eturn",
   "  row",
   "  ;"
  ]
 },
 {
  "number": 86,
  "changes_set": [
   "  ublic",
   "  CholeskyDecompositionImpl",
   "  (",
   "  final",
   "  RealMatrix",
   "  matrix",
   "  ,",
   "  inal",
   "  double",
   "  [",
   "  ]",
   "  lI",
   "  =",
   "  lTData",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "+ if",
   "+ (",
   "+ lTData",
   "+ [",
   "+ i",
   "+ ]",
   "+ [",
   "+ i",
   "+ ]",
   "+ <",
   "+ absolutePositivityThreshold",
   "+ )",
   "+ {",
   "+ throw",
   "+ new",
   "+ NotPositiveDefiniteMatrixException",
   "+ (",
   "+ )",
   "+ ;",
   "+ }",
   "  /",
   "  check",
   "  off",
   "  -",
   "  diagonal",
   "  elements",
   "  (",
   "  and",
   "  reset",
   "  them",
   "  to",
   "  0",
   "  )",
   "  or",
   "  (",
   "  int",
   "  j",
   "  =",
   "  i",
   "  +",
   "  1",
   "  ;",
   "  j",
   "  <",
   "  order",
   "  ;",
   "  ++",
   "  j",
   "  )",
   "  {",
   "  inal",
   "  double",
   "  [",
   "  ]",
   "  lJ",
   "  =",
   "  lTData",
   "  [",
   "  j",
   "  ]",
   "  ;"
  ]
 },
 {
  "number": 86,
  "changes_set": [
   "  ublic",
   "  CholeskyDecompositionImpl",
   "  (",
   "  final",
   "  RealMatrix",
   "  matrix",
   "  ,",
   "  inal",
   "  double",
   "  [",
   "  ]",
   "  ltI",
   "  =",
   "  lTData",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  /",
   "  check",
   "  diagonal",
   "  elementif",
   "  (",
   "  ltI",
   "  [",
   "  i",
   "  ]",
   "  <",
   "  absolutePositivityThreshold",
   "  )",
   "  {",
   "- if",
   "- (",
   "- ltI",
   "- [",
   "- i",
   "- ]",
   "- <",
   "- absolutePositivityThreshold",
   "- )",
   "- {",
   "  throw",
   "  new",
   "  NotPositiveDefiniteMatrixException",
   "  (",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- NotPositiveDefiniteMatrixException",
   "- (",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  tI",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  Math",
   "  .",
   "  sqrt",
   "  (",
   "  ltI",
   "  [",
   "  i",
   "  ]",
   "  )",
   "  ;",
   "  inal",
   "  double",
   "  inverse",
   "  =",
   "  1.0",
   "  /",
   "  ltI",
   "  [",
   "  i",
   "  ]",
   "  ;"
  ]
 },
 {
  "number": 88,
  "changes_set": [
   "  rotected",
   "  RealPointValuePair",
   "  getSolution",
   "  (",
   "  )",
   "  {",
   "  nteger",
   "  basicRow",
   "  =",
   "  etBasicRow",
   "  (",
   "  getNumObjectiveFunctions",
   "  (",
   "  )",
   "  +",
   "  getOriginalNumDecisionVariables",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  ouble",
   "  mostNegative",
   "  =",
   "  basicRow",
   "  ==",
   "  null",
   "  ?",
   "  0",
   "  :",
   "  getEntry",
   "  (",
   "  basicRow",
   "  ,",
   "  getRhsOffset",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  Set",
   "  <",
   "  Integer",
   "  >",
   "  basicRows",
   "  =",
   "  new",
   "  HashSet",
   "  <",
   "  Integer",
   "  >",
   "  (",
   "  )",
   "  ;",
   "- Set",
   "- <",
   "- Integer",
   "- >",
   "- basicRows",
   "- =",
   "- new",
   "- HashSet",
   "- <",
   "- Integer",
   "- >",
   "- (",
   "- )",
   "- ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  coefficients",
   "  .",
   "  length",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  asicRow",
   "  =",
   "  getBasicRow",
   "  (",
   "  getNumObjectiveFunctions",
   "  (",
   "  )",
   "  +",
   "  i",
   "  )",
   "  ;",
   "- if",
   "- (",
   "- basicRows",
   "- .",
   "- contains",
   "- (",
   "- basicRow",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  basicRows",
   "  .",
   "  contains",
   "  (",
   "  basicRow",
   "  )",
   "  )",
   "  {",
   "  /",
   "  if",
   "  multiple",
   "  variables",
   "  can",
   "  take",
   "  a",
   "  given",
   "  value",
   "  /",
   "  then",
   "  we",
   "  choose",
   "  the",
   "  first",
   "  and",
   "  set",
   "  the",
   "  rest",
   "  equal",
   "  to",
   "  0",
   "  coefficients",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  0",
   "  ;",
   "- coefficients",
   "- [",
   "- i",
   "- ]",
   "- =",
   "- 0",
   "- ;",
   "  }",
   "  else",
   "  {",
   "- }",
   "- else",
   "- {",
   "- basicRows",
   "- .",
   "- add",
   "- (",
   "- basicRow",
   "- )",
   "- ;",
   "  basicRows",
   "  .",
   "  add",
   "  (",
   "  basicRow",
   "  )",
   "  ;",
   "  oefficients",
   "  [",
   "  i",
   "  ]",
   "  =",
   "  basicRow",
   "  ==",
   "  null",
   "  ?",
   "  0",
   "  :",
   "  getEntry",
   "  (",
   "  basicRow",
   "  ,",
   "  getRhsOffset",
   "  (",
   "  )",
   "  )",
   "  )",
   "  -",
   "  restrictToNonNegative",
   "  ?",
   "  0",
   "  :",
   "  mostNegative",
   "  )",
   "  ;",
   "+ if",
   "+ (",
   "+ basicRow",
   "+ !=",
   "+ null",
   "+ )",
   "+ {",
   "+ for",
   "+ (",
   "+ int",
   "+ j",
   "+ =",
   "+ getNumObjectiveFunctions",
   "+ (",
   "+ )",
   "+ ;",
   "+ j",
   "+ <",
   "+ getNumObjectiveFunctions",
   "+ (",
   "+ )",
   "+ +",
   "+ i",
   "+ ;",
   "+ j",
   "+ ++",
   "+ )",
   "+ {",
   "+ if",
   "+ (",
   "+ tableau",
   "+ .",
   "+ getEntry",
   "+ (",
   "+ basicRow",
   "+ ,",
   "+ j",
   "+ )",
   "+ ==",
   "+ 1",
   "+ )",
   "+ {",
   "+ coefficients",
   "+ [",
   "+ i",
   "+ ]",
   "+ =",
   "+ 0",
   "+ ;",
   "+ }",
   "+ }",
   "  eturn",
   "  new",
   "  RealPointValuePair",
   "  (",
   "  coefficients",
   "  ,",
   "  f",
   "  .",
   "  getValue",
   "  (",
   "  coefficients",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 91,
  "changes_set": [
   "  ublic",
   "  Fraction",
   "  abs",
   "  (",
   "  )",
   "  {",
   "  than",
   "  <",
   "  tt",
   "  >",
   "  object",
   "  <",
   "  /",
   "  tt",
   "  >",
   "  ,",
   "  0",
   "  if",
   "  they",
   "  are",
   "  equal",
   "  .",
   "  /",
   "  ublic",
   "  int",
   "  compareTo",
   "  (",
   "  Fraction",
   "  object",
   "  )",
   "  {",
   "- long",
   "+ double",
   "  nOd",
   "  =",
   "+ doubleValue",
   "  (",
   "- (",
   "- long",
   "  )",
   "- numerator",
   "- )",
   "- *",
   "+ ;",
   "+ double",
   "+ dOn",
   "+ =",
   "  object",
   "  .",
   "- denominator",
   "+ doubleValue",
   "+ (",
   "+ )",
   "  ;",
   "  long",
   "  nOd",
   "  =",
   "  (",
   "  (",
   "  long",
   "  )",
   "  numerator",
   "  )",
   "  *",
   "  object",
   "  .",
   "  denominator",
   "- ;",
   "- long",
   "- dOn",
   "- =",
   "- (",
   "- (",
   "- long",
   "- )",
   "- denominator",
   "- )",
   "- *",
   "- object",
   "- .",
   "- numerator",
   "  ;",
   "  long",
   "  dOn",
   "  =",
   "  (",
   "  (",
   "  long",
   "  )",
   "  denominator",
   "  )",
   "  *",
   "  object",
   "  .",
   "  numerator",
   "  ;",
   "  eturn",
   "  (",
   "  nOd",
   "  <",
   "  dOn",
   "  )",
   "  ?",
   "  -",
   "  1",
   "  :",
   "  (",
   "  (",
   "  nOd",
   "  >",
   "  dOn",
   "  )",
   "  ?",
   "  +",
   "  1",
   "  :",
   "  0",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 93,
  "changes_set": [
   "  hrows",
   "  IllegalArgumentException",
   "  if",
   "  n",
   "  <",
   "  0",
   "  /",
   "  ublic",
   "  static",
   "  long",
   "  factorial",
   "  (",
   "  final",
   "  int",
   "  n",
   "  )",
   "  {",
   "+ long",
   "+ result",
   "+ =",
   "+ Math",
   "+ .",
   "+ round",
   "+ (",
   "+ factorialDouble",
   "+ (",
   "+ n",
   "+ )",
   "+ )",
   "+ ;",
   "  if",
   "  (",
   "- n",
   "- <",
   "- 0",
   "+ result",
   "+ ==",
   "+ Long",
   "+ .",
   "+ MAX_VALUE",
   "  )",
   "  {",
   "  if",
   "  (",
   "  n",
   "  <",
   "  0",
   "  )",
   "  {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"must have n >= 0 for n!\"",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"must have n >= 0 for n!\"",
   "- )",
   "- ;",
   "  }",
   "- }",
   "- if",
   "- (",
   "- n",
   "- >",
   "- 20",
   "- )",
   "- {",
   "  if",
   "  (",
   "  n",
   "  >",
   "  20",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  ArithmeticException",
   "  (",
   "  factorial",
   "  value",
   "  is",
   "  too",
   "  large",
   "  to",
   "  fit",
   "  in",
   "  a",
   "  long"
  ]
 },
 {
  "number": 93,
  "changes_set": [
   "  ublic",
   "  static",
   "  double",
   "  factorialDouble",
   "  (",
   "  final",
   "  int",
   "  n",
   "  )",
   "  {",
   "  f",
   "  (",
   "  n",
   "  <",
   "  0",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"must have n >= 0 for n!\"",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  n",
   "  <",
   "  21",
   "  )",
   "  {",
   "- if",
   "- (",
   "- n",
   "- <",
   "- 21",
   "- )",
   "- {",
   "  return",
   "  factorial",
   "  (",
   "  n",
   "  )",
   "  ;",
   "- return",
   "- factorial",
   "- (",
   "- n",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  Math",
   "  .",
   "  floor",
   "  (",
   "  Math",
   "  .",
   "  exp",
   "  (",
   "  factorialLog",
   "  (",
   "  n",
   "  )",
   "  )",
   "  +",
   "  0.5",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 93,
  "changes_set": [
   "  ublic",
   "  static",
   "  double",
   "  factorialLog",
   "  (",
   "  final",
   "  int",
   "  n",
   "  )",
   "  {",
   "  f",
   "  (",
   "  n",
   "  <",
   "  0",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"must have n > 0 for n!\"",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  n",
   "  <",
   "  21",
   "  )",
   "  {",
   "- if",
   "- (",
   "- n",
   "- <",
   "- 21",
   "- )",
   "- {",
   "  return",
   "  Math",
   "  .",
   "  log",
   "  (",
   "  factorial",
   "  (",
   "  n",
   "  )",
   "  )",
   "  ;",
   "- return",
   "- Math",
   "- .",
   "- log",
   "- (",
   "- factorial",
   "- (",
   "- n",
   "- )",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  ouble",
   "  logSum",
   "  =",
   "  0",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  2",
   "  ;",
   "  i",
   "  <=",
   "  n",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  ogSum",
   "  +=",
   "  Math",
   "  .",
   "  log",
   "  (",
   "  (",
   "  double",
   "  )",
   "  i",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 95,
  "changes_set": [
   "  eturn",
   "  initial",
   "  domain",
   "  value",
   "  /",
   "  rotected",
   "  double",
   "  getInitialDomain",
   "  (",
   "  double",
   "  p",
   "  )",
   "  {",
   "  double",
   "  ret",
   "- =",
   "- 1.0",
   "  ;",
   "  double",
   "  ret",
   "  =",
   "  1.0",
   "  ;",
   "  ouble",
   "  d",
   "  =",
   "  getDenominatorDegreesOfFreedom",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  d",
   "  >",
   "  2.0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- d",
   "- >",
   "- 2.0",
   "- )",
   "- {",
   "  /",
   "  use",
   "  meanet",
   "  =",
   "  d",
   "  /",
   "  (",
   "  d",
   "  -",
   "  2.0",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  eturn",
   "  ret",
   "  ;"
  ]
 },
 {
  "number": 94,
  "changes_set": [
   "  ince",
   "  1.1",
   "  /",
   "  ublic",
   "  static",
   "  int",
   "  gcd",
   "  (",
   "  int",
   "  u",
   "  ,",
   "  int",
   "  v",
   "  )",
   "  {",
   "  if",
   "  (",
   "- (",
   "  u",
   "+ *",
   "- ==",
   "- 0",
   "- )",
   "- ||",
   "- (",
   "  v",
   "  ==",
   "  0",
   "- )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  (",
   "  u",
   "  ==",
   "  0",
   "  )",
   "  ||",
   "  (",
   "  v",
   "  ==",
   "  0",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  (",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  u",
   "  )",
   "  +",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  v",
   "  )",
   "  )",
   "  ;",
   "  /",
   "  keep",
   "  u",
   "  and",
   "  v",
   "  negative",
   "  ,",
   "  as",
   "  negative",
   "  integers",
   "  range",
   "  down",
   "  to"
  ]
 },
 {
  "number": 90,
  "changes_set": [
   "  eprecatedublic",
   "  void",
   "  addValue",
   "  (",
   "  Object",
   "  v",
   "  )",
   "  {",
   "  addValue",
   "  (",
   "  (",
   "  Comparable",
   "  <",
   "  ?",
   "  >",
   "  )",
   "  v",
   "  )",
   "  ;",
   "- addValue",
   "- (",
   "- (",
   "- Comparable",
   "- <",
   "- ?",
   "- >",
   "- )",
   "- v",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  *",
   "  *",
   "  Adds",
   "  1",
   "  to",
   "  the",
   "  frequency",
   "  count",
   "  for",
   "  v",
   "  ."
  ]
 },
 {
  "number": 90,
  "changes_set": [
   "  hrows",
   "  IllegalArgumentException",
   "  if",
   "  <",
   "  code",
   "  >",
   "  v",
   "  <",
   "  /",
   "  code",
   "  >",
   "  is",
   "  not",
   "  comparable",
   "  with",
   "  previous",
   "  entries",
   "  /",
   "- public",
   "- void",
   "- addValue",
   "- (",
   "- Comparable",
   "- <",
   "- ?",
   "- >",
   "- v",
   "- )",
   "- {",
   "  public",
   "  void",
   "  addValue",
   "  (",
   "  Comparable",
   "  <",
   "  ?",
   "  >",
   "  v",
   "  )",
   "  {",
   "  bject",
   "  obj",
   "  =",
   "  v",
   "  ;",
   "  f",
   "  (",
   "  v",
   "  instanceof",
   "  Integer",
   "  )",
   "  {",
   "  bj",
   "  =",
   "  Long",
   "  .",
   "  valueOf",
   "  (",
   "  (",
   "  (",
   "  Integer",
   "  )",
   "  v",
   "  )",
   "  .",
   "  longValue",
   "  (",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 96,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  equals",
   "  (",
   "  Object",
   "  other",
   "  )",
   "  {",
   "  f",
   "  (",
   "  rhs",
   "  .",
   "  isNaN",
   "  (",
   "  )",
   "  )",
   "  {",
   "  et",
   "  =",
   "  this",
   "  .",
   "  isNaN",
   "  (",
   "  )",
   "  ;",
   "  else",
   "  {",
   "  ret",
   "  =",
   "  (",
   "+ Double",
   "+ .",
   "+ doubleToRawLongBits",
   "+ (",
   "  real",
   "+ )",
   "  ==",
   "+ Double",
   "+ .",
   "+ doubleToRawLongBits",
   "+ (",
   "  rhs",
   "  .",
   "- real",
   "+ getReal",
   "+ (",
   "+ )",
   "+ )",
   "  )",
   "  &&",
   "  (",
   "+ Double",
   "+ .",
   "+ doubleToRawLongBits",
   "+ (",
   "  imaginary",
   "+ )",
   "  ==",
   "+ Double",
   "+ .",
   "+ doubleToRawLongBits",
   "+ (",
   "  rhs",
   "  .",
   "- imaginary",
   "+ getImaginary",
   "+ (",
   "+ )",
   "+ )",
   "  )",
   "  ;",
   "  ret",
   "  =",
   "  (",
   "  real",
   "  ==",
   "  rhs",
   "  .",
   "  real",
   "  )",
   "  &&",
   "  (",
   "  imaginary",
   "  ==",
   "  rhs",
   "  .",
   "  imaginary",
   "  )",
   "  ;",
   "  catch",
   "  (",
   "  ClassCastException",
   "  ex",
   "  )",
   "  {",
   "  /",
   "  ignore",
   "  exception"
  ]
 },
 {
  "number": 92,
  "changes_set": [
   "  ublic",
   "  static",
   "  long",
   "  binomialCoefficient",
   "  (",
   "  final",
   "  int",
   "  n",
   "  ,",
   "  final",
   "  int",
   "  k",
   "  )",
   "  {",
   "  f",
   "  (",
   "  (",
   "  k",
   "  ==",
   "  1",
   "  )",
   "  ||",
   "  (",
   "  k",
   "  ==",
   "  n",
   "  -",
   "  1",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  n",
   "  ;",
   "+ long",
   "+ result",
   "+ =",
   "+ Math",
   "+ .",
   "+ round",
   "+ (",
   "+ binomialCoefficientDouble",
   "+ (",
   "+ n",
   "+ ,",
   "+ k",
   "+ )",
   "+ )",
   "+ ;",
   "+ if",
   "+ (",
   "+ result",
   "+ ==",
   "+ Long",
   "+ .",
   "+ MAX_VALUE",
   "+ )",
   "+ {",
   "+ throw",
   "+ new",
   "+ ArithmeticException",
   "+ (",
   "+ \"result too large to represent in a long integer\"",
   "+ )",
   "+ ;",
   "+ }",
   "  /",
   "  Use",
   "  symmetry",
   "  for",
   "  large",
   "  kif",
   "  (",
   "  k",
   "  >",
   "  n",
   "  /",
   "  2",
   "  )",
   "- if",
   "- (",
   "- k",
   "- >",
   "- n",
   "- /",
   "- 2",
   "- )",
   "- return",
   "- binomialCoefficient",
   "- (",
   "- n",
   "- ,",
   "- n",
   "- -",
   "- k",
   "- )",
   "- ;",
   "  return",
   "  binomialCoefficient",
   "  (",
   "  n",
   "  ,",
   "  n",
   "  -",
   "  k",
   "  )",
   "  ;",
   "  /",
   "  We",
   "  use",
   "  the",
   "  formula",
   "  /",
   "  (",
   "  n",
   "  choose",
   "  k",
   "  )",
   "  =",
   "  n",
   "  !",
   "  /",
   "  (",
   "  n",
   "  -",
   "  k",
   "  )",
   "  !",
   "  /",
   "  k",
   "  !",
   "  /",
   "  (",
   "  n",
   "  choose",
   "  k",
   "  )",
   "  ==",
   "  (",
   "  (",
   "  n",
   "  -",
   "  k",
   "  +",
   "  1",
   "  )",
   "  *",
   "  ...",
   "  *",
   "  n",
   "  )",
   "  /",
   "  (",
   "  1",
   "  *",
   "  ...",
   "  *",
   "  k",
   "  )",
   "  /",
   "  which",
   "  could",
   "  be",
   "  written",
   "  /",
   "  (",
   "  n",
   "  choose",
   "  k",
   "  )",
   "  ==",
   "  (",
   "  n",
   "  -",
   "  1",
   "  choose",
   "  k",
   "  -",
   "  1",
   "  )",
   "  *",
   "  n",
   "  /",
   "  klong",
   "  result",
   "  =",
   "  1",
   "  ;",
   "- long",
   "- result",
   "- =",
   "- 1",
   "- ;",
   "- if",
   "- (",
   "- n",
   "- <=",
   "- 61",
   "- )",
   "- {",
   "  if",
   "  (",
   "  n",
   "  <=",
   "  61",
   "  )",
   "  {",
   "  /",
   "  For",
   "  n",
   "  <=",
   "  61",
   "  ,",
   "  the",
   "  naive",
   "  implementation",
   "  cannot",
   "  overflow",
   "  .",
   "  for",
   "  (",
   "  int",
   "  j",
   "  =",
   "  1",
   "  ,",
   "  i",
   "  =",
   "  n",
   "  -",
   "  k",
   "  +",
   "  1",
   "  ;",
   "  j",
   "  <=",
   "  k",
   "  ;",
   "  i",
   "  ++",
   "  ,",
   "  j",
   "  ++",
   "  )",
   "  {",
   "- for",
   "- (",
   "- int",
   "- j",
   "- =",
   "- 1",
   "- ,",
   "- i",
   "- =",
   "- n",
   "- -",
   "- k",
   "- +",
   "- 1",
   "- ;",
   "- j",
   "- <=",
   "- k",
   "- ;",
   "- i",
   "- ++",
   "- ,",
   "- j",
   "- ++",
   "- )",
   "- {",
   "  result",
   "  =",
   "  result",
   "  *",
   "  i",
   "  /",
   "  j",
   "  ;",
   "- result",
   "- =",
   "- result",
   "- *",
   "- i",
   "- /",
   "- j",
   "- ;",
   "  }",
   "- }",
   "- }",
   "- else",
   "- if",
   "- (",
   "- n",
   "- <=",
   "- 66",
   "- )",
   "- {",
   "  }",
   "  else",
   "  if",
   "  (",
   "  n",
   "  <=",
   "  66",
   "  )",
   "  {",
   "  /",
   "  For",
   "  n",
   "  >",
   "  61",
   "  but",
   "  n",
   "  <=",
   "  66",
   "  ,",
   "  the",
   "  result",
   "  cannot",
   "  overflow",
   "  ,",
   "  /",
   "  but",
   "  we",
   "  must",
   "  take",
   "  care",
   "  not",
   "  to",
   "  overflow",
   "  intermediate",
   "  values",
   "  .",
   "  for",
   "  (",
   "  int",
   "  j",
   "  =",
   "  1",
   "  ,",
   "  i",
   "  =",
   "  n",
   "  -",
   "  k",
   "  +",
   "  1",
   "  ;",
   "  j",
   "  <=",
   "  k",
   "  ;",
   "  i",
   "  ++",
   "  ,",
   "  j",
   "  ++",
   "  )",
   "  {",
   "- for",
   "- (",
   "- int",
   "- j",
   "- =",
   "- 1",
   "- ,",
   "- i",
   "- =",
   "- n",
   "- -",
   "- k",
   "- +",
   "- 1",
   "- ;",
   "- j",
   "- <=",
   "- k",
   "- ;",
   "- i",
   "- ++",
   "- ,",
   "- j",
   "- ++",
   "- )",
   "- {",
   "  /",
   "  We",
   "  know",
   "  that",
   "  (",
   "  result",
   "  *",
   "  i",
   "  )",
   "  is",
   "  divisible",
   "  by",
   "  j",
   "  ,",
   "  /",
   "  but",
   "  (",
   "  result",
   "  *",
   "  i",
   "  )",
   "  may",
   "  overflow",
   "  ,",
   "  so",
   "  we",
   "  split",
   "  j",
   "  :",
   "  /",
   "  Filter",
   "  out",
   "  the",
   "  gcd",
   "  ,",
   "  d",
   "  ,",
   "  so",
   "  j",
   "  /",
   "  d",
   "  and",
   "  i",
   "  /",
   "  d",
   "  are",
   "  integer",
   "  .",
   "  /",
   "  result",
   "  is",
   "  divisible",
   "  by",
   "  (",
   "  j",
   "  /",
   "  d",
   "  )",
   "  because",
   "  (",
   "  j",
   "  /",
   "  d",
   "  )",
   "  /",
   "  is",
   "  relative",
   "  prime",
   "  to",
   "  (",
   "  i",
   "  /",
   "  d",
   "  )",
   "  and",
   "  is",
   "  a",
   "  divisor",
   "  of",
   "  /",
   "  result",
   "  *",
   "  (",
   "  i",
   "  /",
   "  d",
   "  )",
   "  .",
   "  long",
   "  d",
   "  =",
   "  gcd",
   "  (",
   "  i",
   "  ,",
   "  j",
   "  )",
   "  ;",
   "- long",
   "- d",
   "- =",
   "- gcd",
   "- (",
   "- i",
   "- ,",
   "- j",
   "- )",
   "- ;",
   "  result",
   "  =",
   "  (",
   "  result",
   "  /",
   "  (",
   "  j",
   "  /",
   "  d",
   "  )",
   "  )",
   "  *",
   "  (",
   "  i",
   "  /",
   "  d",
   "  )",
   "  ;",
   "- result",
   "- =",
   "- (",
   "- result",
   "- /",
   "- (",
   "- j",
   "- /",
   "- d",
   "- )",
   "- )",
   "- *",
   "- (",
   "- i",
   "- /",
   "- d",
   "- )",
   "- ;",
   "  }",
   "- }",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  /",
   "  For",
   "  n",
   "  >",
   "  66",
   "  ,",
   "  a",
   "  result",
   "  overflow",
   "  might",
   "  occur",
   "  ,",
   "  so",
   "  we",
   "  check",
   "  /",
   "  the",
   "  multiplication",
   "  ,",
   "  taking",
   "  care",
   "  to",
   "  not",
   "  overflow",
   "  /",
   "  unnecessary",
   "  .",
   "  for",
   "  (",
   "  int",
   "  j",
   "  =",
   "  1",
   "  ,",
   "  i",
   "  =",
   "  n",
   "  -",
   "  k",
   "  +",
   "  1",
   "  ;",
   "  j",
   "  <=",
   "  k",
   "  ;",
   "  i",
   "  ++",
   "  ,",
   "  j",
   "  ++",
   "  )",
   "  {",
   "- for",
   "- (",
   "- int",
   "- j",
   "- =",
   "- 1",
   "- ,",
   "- i",
   "- =",
   "- n",
   "- -",
   "- k",
   "- +",
   "- 1",
   "- ;",
   "- j",
   "- <=",
   "- k",
   "- ;",
   "- i",
   "- ++",
   "- ,",
   "- j",
   "- ++",
   "- )",
   "- {",
   "  long",
   "  d",
   "  =",
   "  gcd",
   "  (",
   "  i",
   "  ,",
   "  j",
   "  )",
   "  ;",
   "- long",
   "- d",
   "- =",
   "- gcd",
   "- (",
   "- i",
   "- ,",
   "- j",
   "- )",
   "- ;",
   "  result",
   "  =",
   "  mulAndCheck",
   "  (",
   "  (",
   "  result",
   "  /",
   "  (",
   "  j",
   "  /",
   "  d",
   "  )",
   "  )",
   "  ,",
   "  (",
   "  i",
   "  /",
   "  d",
   "  )",
   "  )",
   "  ;",
   "- result",
   "- =",
   "- mulAndCheck",
   "- (",
   "- (",
   "- result",
   "- /",
   "- (",
   "- j",
   "- /",
   "- d",
   "- )",
   "- )",
   "- ,",
   "- (",
   "- i",
   "- /",
   "- d",
   "- )",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  eturn",
   "  result",
   "  ;"
  ]
 },
 {
  "number": 92,
  "changes_set": [
   "  hrows",
   "  IllegalArgumentException",
   "  if",
   "  preconditions",
   "  are",
   "  not",
   "  met",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  double",
   "  binomialCoefficientDouble",
   "  (",
   "  final",
   "  int",
   "  n",
   "  ,",
   "  final",
   "  int",
   "  k",
   "  )",
   "  {",
   "  if",
   "  (",
   "  n",
   "  <",
   "  k",
   "  )",
   "  {",
   "- if",
   "- (",
   "- n",
   "- <",
   "- k",
   "- )",
   "- {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "+ \"must have n >= k for binomial coefficient (n,k)\"",
   "+ )",
   "+ ;",
   "+ }",
   "+ if",
   "+ (",
   "+ n",
   "+ <",
   "+ 0",
   "+ )",
   "+ {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "- \"must have n >= k for binomial coefficient (n,k)\"",
   "+ \"must have n >= 0 for binomial coefficient (n,k)\"",
   "  )",
   "  ;",
   "- \"must have n >= k for binomial coefficient (n,k)\"",
   "- )",
   "- ;",
   "  }",
   "- }",
   "  if",
   "  (",
   "+ (",
   "  n",
   "- <",
   "+ ==",
   "+ k",
   "+ )",
   "+ ||",
   "+ (",
   "+ k",
   "+ ==",
   "  0",
   "  )",
   "- {",
   "- if",
   "- (",
   "- n",
   "- <",
   "- 0",
   "- )",
   "- {",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"must have n >= 0 for binomial coefficient (n,k)\"",
   "- )",
   "- ;",
   "- \"must have n >= 0 for binomial coefficient (n,k)\"",
   "- )",
   "- ;",
   "- }",
   "- }",
   "- if",
   "- (",
   "- (",
   "- n",
   "- ==",
   "- k",
   "- )",
   "- ||",
   "- (",
   "- k",
   "- ==",
   "- 0",
   "- )",
   "- )",
   "- {",
   "- if",
   "- (",
   "- (",
   "- n",
   "- ==",
   "- k",
   "- )",
   "- ||",
   "- (",
   "- k",
   "- ==",
   "- 0",
   "- )",
   "  )",
   "  {",
   "  return",
   "  1d",
   "  ;",
   "- return",
   "- 1d",
   "- ;",
   "- }",
   "  }",
   "  if",
   "  (",
   "  (",
   "  k",
   "  ==",
   "  1",
   "  )",
   "  ||",
   "  (",
   "  k",
   "  ==",
   "  n",
   "  -",
   "  1",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- (",
   "- k",
   "- ==",
   "- 1",
   "- )",
   "- ||",
   "- (",
   "- k",
   "- ==",
   "- n",
   "- -",
   "- 1",
   "- )",
   "- )",
   "- {",
   "  return",
   "  n",
   "  ;",
   "- return",
   "- n",
   "- ;",
   "- }",
   "  }",
   "  if",
   "  (",
   "  k",
   "  >",
   "  n",
   "  /",
   "  2",
   "  )",
   "  {",
   "- if",
   "- (",
   "- k",
   "- >",
   "- n",
   "- /",
   "- 2",
   "- )",
   "- {",
   "  return",
   "  binomialCoefficientDouble",
   "  (",
   "  n",
   "  ,",
   "  n",
   "  -",
   "  k",
   "  )",
   "  ;",
   "- return",
   "- binomialCoefficientDouble",
   "- (",
   "- n",
   "- ,",
   "- n",
   "- -",
   "- k",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  if",
   "  (",
   "  n",
   "  <",
   "  67",
   "  )",
   "  {",
   "- if",
   "- (",
   "- n",
   "- <",
   "- 67",
   "- )",
   "- {",
   "  return",
   "  binomialCoefficient",
   "  (",
   "  n",
   "  ,",
   "  k",
   "  )",
   "  ;",
   "- return",
   "- binomialCoefficient",
   "- (",
   "- n",
   "- ,",
   "- k",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  double",
   "  result",
   "  =",
   "  1d",
   "  ;",
   "- double",
   "- result",
   "- =",
   "- 1d",
   "- ;",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  1",
   "  ;",
   "  i",
   "  <=",
   "  k",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "- for",
   "- (",
   "- int",
   "- i",
   "- =",
   "- 1",
   "- ;",
   "- i",
   "- <=",
   "- k",
   "- ;",
   "- i",
   "- ++",
   "- )",
   "- {",
   "  result",
   "  *=",
   "  (",
   "  double",
   "  )",
   "  (",
   "  n",
   "  -",
   "  k",
   "  +",
   "  i",
   "  )",
   "  /",
   "  (",
   "  double",
   "  )",
   "  i",
   "  ;",
   "- result",
   "- *=",
   "+ }",
   "+ return",
   "+ Math",
   "+ .",
   "+ floor",
   "  (",
   "- double",
   "- )",
   "+ Math",
   "+ .",
   "+ exp",
   "  (",
   "+ binomialCoefficientLog",
   "+ (",
   "  n",
   "- -",
   "+ ,",
   "  k",
   "+ )",
   "+ )",
   "  +",
   "- i",
   "+ 0.5",
   "  )",
   "- /",
   "- (",
   "- double",
   "- )",
   "- i",
   "  ;",
   "- }",
   "- }",
   "  return",
   "  Math",
   "  .",
   "  floor",
   "  (",
   "  result",
   "  +",
   "  0.5",
   "  )",
   "  ;",
   "- return",
   "- Math",
   "- .",
   "- floor",
   "- (",
   "- result",
   "- +",
   "- 0.5",
   "- )",
   "- ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 92,
  "changes_set": [
   "  ublic",
   "  static",
   "  double",
   "  binomialCoefficientLog",
   "  (",
   "  final",
   "  int",
   "  n",
   "  ,",
   "  final",
   "  int",
   "  k",
   "  )",
   "  {",
   "  For",
   "  values",
   "  small",
   "  enough",
   "  to",
   "  do",
   "  exact",
   "  integer",
   "  computation",
   "  ,",
   "  return",
   "  the",
   "  log",
   "  of",
   "  the",
   "  exact",
   "  value",
   "  /",
   "  if",
   "  (",
   "  n",
   "  <",
   "  67",
   "  )",
   "  {",
   "- if",
   "- (",
   "- n",
   "- <",
   "- 67",
   "- )",
   "- {",
   "  return",
   "  Math",
   "  .",
   "  log",
   "  (",
   "  binomialCoefficient",
   "  (",
   "  n",
   "  ,",
   "  k",
   "  )",
   "  )",
   "  ;",
   "- return",
   "- Math",
   "- .",
   "- log",
   "- (",
   "- binomialCoefficient",
   "- (",
   "- n",
   "- ,",
   "- k",
   "- )",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  *",
   "  Return",
   "  the",
   "  log",
   "  of",
   "  binomialCoefficientDouble",
   "  for",
   "  values",
   "  that",
   "  will",
   "  notoverflow",
   "  binomialCoefficientDouble",
   "  /",
   "  if",
   "  (",
   "  n",
   "  <",
   "  1030",
   "  )",
   "  {",
   "- if",
   "- (",
   "- n",
   "- <",
   "- 1030",
   "- )",
   "- {",
   "- return",
   "- Math",
   "- .",
   "- log",
   "- (",
   "- binomialCoefficientDouble",
   "- (",
   "- n",
   "- ,",
   "- k",
   "- )",
   "- )",
   "- ;",
   "  return",
   "  Math",
   "  .",
   "  log",
   "  (",
   "  binomialCoefficientDouble",
   "  (",
   "  n",
   "  ,",
   "  k",
   "  )",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  *",
   "  Sum",
   "  logs",
   "  for",
   "  values",
   "  that",
   "  could",
   "  overflow"
  ]
 },
 {
  "number": 98,
  "changes_set": [
   "  ublic",
   "  BigDecimal",
   "  getTrace",
   "  (",
   "  )",
   "  throws",
   "  IllegalArgumentException",
   "  {",
   "  inal",
   "  int",
   "  nRows",
   "  =",
   "  this",
   "  .",
   "  getRowDimension",
   "  (",
   "  )",
   "  ;",
   "  inal",
   "  int",
   "  nCols",
   "  =",
   "  this",
   "  .",
   "  getColumnDimension",
   "  (",
   "  )",
   "  ;",
   "  final",
   "  BigDecimal",
   "  [",
   "  ]",
   "  out",
   "  =",
   "  new",
   "  BigDecimal",
   "  [",
   "- nRows",
   "+ v",
   "+ .",
   "+ length",
   "  ]",
   "  ;",
   "  final",
   "  BigDecimal",
   "  [",
   "  ]",
   "  out",
   "  =",
   "  new",
   "  BigDecimal",
   "  [",
   "  nRows",
   "  ]",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  row",
   "  =",
   "  0",
   "  ;",
   "  row",
   "  <",
   "  nRows",
   "  ;",
   "  row",
   "  ++",
   "  )",
   "  {",
   "  igDecimal",
   "  sum",
   "  =",
   "  ZERO",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  nCols",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {"
  ]
 },
 {
  "number": 98,
  "changes_set": [
   "  ublic",
   "  double",
   "  getTrace",
   "  (",
   "  )",
   "  throws",
   "  IllegalArgumentException",
   "  {",
   "  f",
   "  (",
   "  v",
   "  .",
   "  length",
   "  !=",
   "  nCols",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"vector has wrong length\"",
   "  )",
   "  ;",
   "  final",
   "  double",
   "  [",
   "  ]",
   "  out",
   "  =",
   "  new",
   "  double",
   "  [",
   "- nRows",
   "+ v",
   "+ .",
   "+ length",
   "  ]",
   "  ;",
   "  final",
   "  double",
   "  [",
   "  ]",
   "  out",
   "  =",
   "  new",
   "  double",
   "  [",
   "  nRows",
   "  ]",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  row",
   "  =",
   "  0",
   "  ;",
   "  row",
   "  <",
   "  nRows",
   "  ;",
   "  row",
   "  ++",
   "  )",
   "  {",
   "  inal",
   "  double",
   "  [",
   "  ]",
   "  dataRow",
   "  =",
   "  data",
   "  [",
   "  row",
   "  ]",
   "  ;",
   "  ouble",
   "  sum",
   "  =",
   "  0",
   "  ;"
  ]
 },
 {
  "number": 101,
  "changes_set": [
   "  ublic",
   "  Complex",
   "  parse",
   "  (",
   "  String",
   "  source",
   "  ,",
   "  ParsePosition",
   "  pos",
   "  )",
   "  {",
   "  nt",
   "  n",
   "  =",
   "  getImaginaryCharacter",
   "  (",
   "  )",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "  tartIndex",
   "  =",
   "  pos",
   "  .",
   "  getIndex",
   "  (",
   "  )",
   "  ;",
   "  nt",
   "  endIndex",
   "  =",
   "  startIndex",
   "  +",
   "  n",
   "  ;",
   "  if",
   "  (",
   "- (",
   "- startIndex",
   "- >=",
   "- source",
   "- .",
   "- length",
   "- (",
   "- )",
   "- )",
   "- ||",
   "  if",
   "  (",
   "  (",
   "  startIndex",
   "  >=",
   "- source",
   "- .",
   "- length",
   "- (",
   "- )",
   "- )",
   "- ||",
   "- (",
   "- endIndex",
   "- >",
   "  source",
   "  .",
   "  length",
   "  (",
   "  )",
   "  )",
   "  ||",
   "  (",
   "  endIndex",
   "  >",
   "  source",
   "  .",
   "  length",
   "  (",
   "  )",
   "  )",
   "  ||",
   "  ource",
   "  .",
   "  substring",
   "  (",
   "  startIndex",
   "  ,",
   "  endIndex",
   "  )",
   "  .",
   "  compareTo",
   "  (",
   "  etImaginaryCharacter",
   "  (",
   "  )",
   "  )",
   "  !=",
   "  0",
   "  )",
   "  {",
   "  /",
   "  set",
   "  index",
   "  back",
   "  to",
   "  initial",
   "  ,",
   "  error",
   "  index",
   "  should",
   "  be",
   "  the",
   "  start",
   "  index"
  ]
 },
 {
  "number": 105,
  "changes_set": [
   "  eturn",
   "  sum",
   "  of",
   "  squared",
   "  errors",
   "  associated",
   "  with",
   "  the",
   "  regression",
   "  model",
   "  /",
   "  ublic",
   "  double",
   "  getSumSquaredErrors",
   "  (",
   "  )",
   "  {",
   "  return",
   "- Math",
   "- .",
   "- max",
   "- (",
   "- 0d",
   "- ,",
   "  sumYY",
   "  -",
   "  sumXY",
   "  *",
   "  sumXY",
   "  /",
   "  sumXX",
   "- )",
   "  ;",
   "  return",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  0d",
   "  ,",
   "  sumYY",
   "  -",
   "  sumXY",
   "  *",
   "  sumXY",
   "  /",
   "  sumXX",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 104,
  "changes_set": [
   "  rivate",
   "  static",
   "  final",
   "  long",
   "  serialVersionUID",
   "  =",
   "  -",
   "  6587513359895466954L",
   "  ;",
   "  *",
   "  *",
   "  Maximum",
   "  allowed",
   "  numerical",
   "  error",
   "  .",
   "  *",
   "  /",
   "  private",
   "  static",
   "  final",
   "  double",
   "  DEFAULT_EPSILON",
   "  =",
   "- 10e-15",
   "+ 10e-9",
   "  ;",
   "  private",
   "  static",
   "  final",
   "  double",
   "  DEFAULT_EPSILON",
   "  =",
   "  10e-15",
   "  ;",
   "  *",
   "  *",
   "  Lanczos",
   "  coefficients",
   "  *",
   "  /",
   "  rivate",
   "  static",
   "  double",
   "  [",
   "  ]",
   "  lanczos",
   "  ="
  ]
 },
 {
  "number": 97,
  "changes_set": [
   "  ublic",
   "  double",
   "  solve",
   "  (",
   "  double",
   "  min",
   "  ,",
   "  double",
   "  max",
   "  )",
   "  throws",
   "  MaxIterationsExceededExceptio",
   "  /",
   "  Verify",
   "  bracketingouble",
   "  sign",
   "  =",
   "  yMin",
   "  *",
   "  yMax",
   "  ;",
   "  if",
   "  (",
   "  sign",
   "- >",
   "+ >=",
   "  0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  sign",
   "  >",
   "  0",
   "  )",
   "  {",
   "  /",
   "  check",
   "  if",
   "  either",
   "  value",
   "  is",
   "  close",
   "  to",
   "  a",
   "  zeroif",
   "  (",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  yMin",
   "  )",
   "  <=",
   "  functionValueAccuracy",
   "  )",
   "  {",
   "+ setResult",
   "+ (",
   "+ min",
   "+ ,",
   "+ 0",
   "+ )",
   "+ ;",
   "+ ret",
   "+ =",
   "+ min",
   "+ ;",
   "+ }",
   "+ else",
   "  if",
   "  (",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "- yMin",
   "+ yMax",
   "  )",
   "  <=",
   "  functionValueAccuracy",
   "  )",
   "  {",
   "  setResult",
   "  (",
   "- min",
   "- ,",
   "- 0",
   "- )",
   "- ;",
   "- setResult",
   "- (",
   "- min",
   "- ,",
   "- 0",
   "- )",
   "- ;",
   "- ret",
   "- =",
   "- min",
   "- ;",
   "- ret",
   "- =",
   "- min",
   "- ;",
   "- }",
   "- else",
   "- if",
   "- (",
   "- Math",
   "- .",
   "- abs",
   "- (",
   "- yMax",
   "- )",
   "- <=",
   "- functionValueAccuracy",
   "- )",
   "- {",
   "- }",
   "- else",
   "- if",
   "- (",
   "- Math",
   "- .",
   "- abs",
   "- (",
   "- yMax",
   "- )",
   "- <=",
   "- functionValueAccuracy",
   "- )",
   "- {",
   "- setResult",
   "- (",
   "  max",
   "  ,",
   "  0",
   "  )",
   "  ;",
   "- setResult",
   "- (",
   "- max",
   "- ,",
   "- 0",
   "- )",
   "- ;",
   "  ret",
   "  =",
   "  max",
   "  ;",
   "- ret",
   "- =",
   "- max",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  /",
   "  neither",
   "  value",
   "  is",
   "  close",
   "  to",
   "  zero",
   "  and",
   "  min",
   "  and",
   "  max",
   "  do",
   "  not",
   "  bracket",
   "  root",
   "  .",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  \"Function values at endpoints do not have different signs.\"",
   "  +",
   "  Endpoints",
   "  :",
   "  [",
   "  \" + min + \"",
   "  ,",
   "  \" + max + \"",
   "  ]",
   "  \" +Values: [\"",
   "  +",
   "  yMin",
   "  +",
   "  \",\"",
   "  +",
   "  yMax",
   "  +",
   "  \"]\"",
   "  )",
   "  ;",
   "  }",
   "- }",
   "- }",
   "  else",
   "- if",
   "- (",
   "- sign",
   "- <",
   "- 0",
   "- )",
   "  {",
   "+ }",
   "  }",
   "  else",
   "  if",
   "  (",
   "  sign",
   "  <",
   "  0",
   "  )",
   "  {",
   "  /",
   "  solve",
   "  using",
   "  only",
   "  the",
   "  first",
   "  endpoint",
   "  as",
   "  initial",
   "  guesset",
   "  =",
   "  solve",
   "  (",
   "  min",
   "  ,",
   "  yMin",
   "  ,",
   "  max",
   "  ,",
   "  yMax",
   "  ,",
   "  min",
   "  ,",
   "  yMin",
   "  )",
   "  ;",
   "  }",
   "  else",
   "  {",
   "- }",
   "- else",
   "- {",
   "  /",
   "  either",
   "  min",
   "  or",
   "  max",
   "  is",
   "  a",
   "  rootif",
   "  (",
   "  yMin",
   "  ==",
   "  0.0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- yMin",
   "- ==",
   "- 0.0",
   "- )",
   "- {",
   "  ret",
   "  =",
   "  min",
   "  ;",
   "- ret",
   "- =",
   "- min",
   "- ;",
   "  }",
   "  else",
   "  {",
   "- }",
   "- else",
   "- {",
   "  ret",
   "  =",
   "  max",
   "  ;",
   "- ret",
   "- =",
   "- max",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  ret",
   "  ;"
  ]
 },
 {
  "number": 100,
  "changes_set": [
   "  ublic",
   "  double",
   "  getChiSquare",
   "  (",
   "  EstimationProblem",
   "  problem",
   "  )",
   "  {",
   "  /",
   "  compute",
   "  transpose",
   "  (",
   "  J",
   "  )",
   "  .",
   "  J",
   "  ,",
   "  avoiding",
   "  building",
   "  big",
   "  intermediate",
   "  matricesinal",
   "  int",
   "  rows",
   "  =",
   "  problem",
   "  .",
   "  getMeasurements",
   "  (",
   "  )",
   "  .",
   "  length",
   "  ;",
   "  final",
   "  int",
   "  cols",
   "  =",
   "  problem",
   "  .",
   "- getUnboundParameters",
   "+ getAllParameters",
   "  (",
   "  )",
   "  .",
   "  length",
   "  ;",
   "  final",
   "  int",
   "  cols",
   "  =",
   "  problem",
   "  .",
   "  getUnboundParameters",
   "  (",
   "  )",
   "  .",
   "  length",
   "  ;",
   "  inal",
   "  int",
   "  max",
   "  =",
   "  cols",
   "  *",
   "  rows",
   "  ;",
   "  ouble",
   "  [",
   "  ]",
   "  [",
   "  ]",
   "  jTj",
   "  =",
   "  new",
   "  double",
   "  [",
   "  cols",
   "  ]",
   "  [",
   "  cols",
   "  ]",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  cols",
   "  ;",
   "  ++",
   "  i",
   "  )",
   "  {"
  ]
 },
 {
  "number": 100,
  "changes_set": [
   "  ublic",
   "  double",
   "  getChiSquare",
   "  (",
   "  EstimationProblem",
   "  problem",
   "  )",
   "  {",
   "  ublic",
   "  double",
   "  [",
   "  ]",
   "  guessParametersErrors",
   "  (",
   "  EstimationProblem",
   "  problem",
   "  )",
   "  hrows",
   "  EstimationException",
   "  {",
   "  nt",
   "  m",
   "  =",
   "  problem",
   "  .",
   "  getMeasurements",
   "  (",
   "  )",
   "  .",
   "  length",
   "  ;",
   "  int",
   "  p",
   "  =",
   "  problem",
   "  .",
   "- getUnboundParameters",
   "+ getAllParameters",
   "  (",
   "  )",
   "  .",
   "  length",
   "  ;",
   "  int",
   "  p",
   "  =",
   "  problem",
   "  .",
   "  getUnboundParameters",
   "  (",
   "  )",
   "  .",
   "  length",
   "  ;",
   "  f",
   "  (",
   "  m",
   "  <=",
   "  p",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  EstimationException",
   "  (",
   "  \"no degrees of freedom ({0} measurements, {1} parameters)\"",
   "  ,",
   "  ew",
   "  Object",
   "  [",
   "  ]",
   "  {",
   "  new",
   "  Integer",
   "  (",
   "  m",
   "  )",
   "  ,",
   "  new",
   "  Integer",
   "  (",
   "  p",
   "  )",
   "  }",
   "  )",
   "  ;",
   "  double",
   "  [",
   "  ]",
   "  errors",
   "  =",
   "  new",
   "  double",
   "  [",
   "  problem",
   "  .",
   "- getUnboundParameters",
   "+ getAllParameters",
   "  (",
   "  )",
   "  .",
   "  length",
   "  ]",
   "  ;",
   "  double",
   "  [",
   "  ]",
   "  errors",
   "  =",
   "  new",
   "  double",
   "  [",
   "  problem",
   "  .",
   "  getUnboundParameters",
   "  (",
   "  )",
   "  .",
   "  length",
   "  ]",
   "  ;",
   "  inal",
   "  double",
   "  c",
   "  =",
   "  Math",
   "  .",
   "  sqrt",
   "  (",
   "  getChiSquare",
   "  (",
   "  problem",
   "  )",
   "  /",
   "  (",
   "  m",
   "  -",
   "  p",
   "  )",
   "  )",
   "  ;",
   "  ouble",
   "  [",
   "  ]",
   "  [",
   "  ]",
   "  covar",
   "  =",
   "  getCovariances",
   "  (",
   "  problem",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  errors",
   "  .",
   "  length",
   "  ;",
   "  ++",
   "  i",
   "  )",
   "  {"
  ]
 },
 {
  "number": 103,
  "changes_set": [
   "  ublic",
   "  void",
   "  setStandardDeviation",
   "  (",
   "  double",
   "  sd",
   "  )",
   "  {",
   "  convergence",
   "  exception",
   "  is",
   "  caught",
   "  and",
   "  0",
   "  or",
   "  1",
   "  is",
   "  returned",
   "  .",
   "  /",
   "  ublic",
   "  double",
   "  cumulativeProbability",
   "  (",
   "  double",
   "  x",
   "  )",
   "  throws",
   "  MathException",
   "- {",
   "- try",
   "  {",
   "  try",
   "  {",
   "  eturn",
   "  0.5",
   "  *",
   "  (",
   "  1.0",
   "  +",
   "  Erf",
   "  .",
   "  erf",
   "  (",
   "  (",
   "  x",
   "  -",
   "  mean",
   "  )",
   "  /",
   "  standardDeviation",
   "  *",
   "  Math",
   "  .",
   "  sqrt",
   "  (",
   "  2.0",
   "  )",
   "  )",
   "  )",
   "  )",
   "  ;",
   "  }",
   "  catch",
   "  (",
   "  MaxIterationsExceededException",
   "  ex",
   "  )",
   "  {",
   "- }",
   "- catch",
   "- (",
   "- MaxIterationsExceededException",
   "- ex",
   "- )",
   "- {",
   "  if",
   "  (",
   "  x",
   "  <",
   "  (",
   "  mean",
   "  -",
   "  20",
   "  *",
   "  standardDeviation",
   "  )",
   "  )",
   "  {"
  ]
 },
 {
  "number": 99,
  "changes_set": [
   "  ublic",
   "  static",
   "  int",
   "  gcd",
   "  (",
   "  final",
   "  int",
   "  p",
   "  ,",
   "  final",
   "  int",
   "  q",
   "  )",
   "  {",
   "  nt",
   "  u",
   "  =",
   "  p",
   "  ;",
   "  nt",
   "  v",
   "  =",
   "  q",
   "  ;",
   "  f",
   "  (",
   "  (",
   "  u",
   "  ==",
   "  0",
   "  )",
   "  ||",
   "  (",
   "  v",
   "  ==",
   "  0",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  (",
   "  u",
   "  ==",
   "  Integer",
   "  .",
   "  MIN_VALUE",
   "  )",
   "  ||",
   "  (",
   "  v",
   "  ==",
   "  Integer",
   "  .",
   "  MIN_VALUE",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- (",
   "- u",
   "- ==",
   "- Integer",
   "- .",
   "- MIN_VALUE",
   "- )",
   "- ||",
   "- (",
   "- v",
   "- ==",
   "- Integer",
   "- .",
   "- MIN_VALUE",
   "- )",
   "- )",
   "- {",
   "  throw",
   "  MathRuntimeException",
   "  .",
   "  createArithmeticException",
   "  (",
   "- throw",
   "- MathRuntimeException",
   "- .",
   "- createArithmeticException",
   "- (",
   "- \"overflow: gcd({0}, {1}) is 2^31\"",
   "- ,",
   "  \"overflow: gcd({0}, {1}) is 2^31\"",
   "  ,",
   "  new",
   "  Object",
   "  [",
   "  ]",
   "  {",
   "  p",
   "  ,",
   "  q",
   "  }",
   "  )",
   "  ;",
   "- new",
   "- Object",
   "- [",
   "- ]",
   "- {",
   "- p",
   "- ,",
   "- q",
   "- }",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  (",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  u",
   "  )",
   "  +",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  v",
   "  )",
   "  )",
   "  ;",
   "  /",
   "  keep",
   "  u",
   "  and",
   "  v",
   "  negative",
   "  ,",
   "  as",
   "  negative",
   "  integers",
   "  range",
   "  down",
   "  to"
  ]
 },
 {
  "number": 99,
  "changes_set": [
   "  ublic",
   "  static",
   "  int",
   "  lcm",
   "  (",
   "  int",
   "  a",
   "  ,",
   "  int",
   "  b",
   "  )",
   "  {",
   "  eturn",
   "  0",
   "  ;",
   "  nt",
   "  lcm",
   "  =",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  mulAndCheck",
   "  (",
   "  a",
   "  /",
   "  gcd",
   "  (",
   "  a",
   "  ,",
   "  b",
   "  )",
   "  ,",
   "  b",
   "  )",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  lcm",
   "  ==",
   "  Integer",
   "  .",
   "  MIN_VALUE",
   "  )",
   "  {",
   "- if",
   "- (",
   "- lcm",
   "- ==",
   "- Integer",
   "- .",
   "- MIN_VALUE",
   "- )",
   "- {",
   "- throw",
   "- new",
   "- ArithmeticException",
   "- (",
   "- \"overflow: lcm is 2^31\"",
   "- )",
   "- ;",
   "  throw",
   "  new",
   "  ArithmeticException",
   "  (",
   "  \"overflow: lcm is 2^31\"",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  eturn",
   "  lcm",
   "  ;"
  ]
 },
 {
  "number": 106,
  "changes_set": [
   "  ublic",
   "  Fraction",
   "  parse",
   "  (",
   "  String",
   "  source",
   "  ,",
   "  ParsePosition",
   "  pos",
   "  )",
   "  {",
   "  eturn",
   "  null",
   "  ;",
   "- if",
   "- (",
   "- num",
   "- .",
   "- intValue",
   "- (",
   "- )",
   "- <",
   "- 0",
   "- )",
   "- {",
   "  if",
   "  (",
   "  num",
   "  .",
   "  intValue",
   "  (",
   "  )",
   "  <",
   "  0",
   "  )",
   "  {",
   "  /",
   "  minus",
   "  signs",
   "  should",
   "  be",
   "  leading",
   "  ,",
   "  invalid",
   "  expressionpos",
   "  .",
   "  setIndex",
   "  (",
   "  initialIndex",
   "  )",
   "  ;",
   "- pos",
   "- .",
   "- setIndex",
   "- (",
   "- initialIndex",
   "- )",
   "- ;",
   "  return",
   "  null",
   "  ;",
   "- return",
   "- null",
   "- ;",
   "- }",
   "  }",
   "  /",
   "  parse",
   "  '/'",
   "  nt",
   "  startIndex",
   "  =",
   "  pos",
   "  .",
   "  getIndex",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 106,
  "changes_set": [
   "  ublic",
   "  Fraction",
   "  parse",
   "  (",
   "  String",
   "  source",
   "  ,",
   "  ParsePosition",
   "  pos",
   "  )",
   "  {",
   "  eturn",
   "  null",
   "  ;",
   "  if",
   "  (",
   "  den",
   "  .",
   "  intValue",
   "  (",
   "  )",
   "  <",
   "  0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- den",
   "- .",
   "- intValue",
   "- (",
   "- )",
   "- <",
   "- 0",
   "- )",
   "- {",
   "  /",
   "  minus",
   "  signs",
   "  must",
   "  be",
   "  leading",
   "  ,",
   "  invalidpos",
   "  .",
   "  setIndex",
   "  (",
   "  initialIndex",
   "  )",
   "  ;",
   "- pos",
   "- .",
   "- setIndex",
   "- (",
   "- initialIndex",
   "- )",
   "- ;",
   "  return",
   "  null",
   "  ;",
   "- return",
   "- null",
   "- ;",
   "- }",
   "  }",
   "  nt",
   "  w",
   "  =",
   "  whole",
   "  .",
   "  intValue",
   "  (",
   "  )",
   "  ;",
   "  nt",
   "  n",
   "  =",
   "  num",
   "  .",
   "  intValue",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 3,
  "changes_set": [
   "  ublic",
   "  void",
   "  captureArgumentsFrom",
   "  (",
   "  Invocation",
   "  invocation",
   "  )",
   "  {",
   "  (",
   "  CapturesArguments",
   "  )",
   "  m",
   "  )",
   "  .",
   "  captureFrom",
   "  (",
   "  invocation",
   "  .",
   "  getArgumentAt",
   "  (",
   "  position",
   "  ,",
   "  Object",
   "  .",
   "  class",
   "  )",
   "  )",
   "  ;",
   "  for",
   "  (",
   "+ int",
   "+ position",
   "+ =",
   "+ indexOfVararg",
   "+ ;",
   "+ position",
   "+ <",
   "+ matchers",
   "+ .",
   "+ size",
   "+ (",
   "+ )",
   "+ ;",
   "+ position",
   "+ ++",
   "+ )",
   "+ {",
   "  Matcher",
   "  m",
   "- :",
   "- uniqueMatcherSet",
   "+ =",
   "+ matchers",
   "+ .",
   "+ get",
   "  (",
   "- indexOfVararg",
   "+ position",
   "  )",
   "+ ;",
   "- )",
   "- {",
   "  for",
   "  (",
   "  Matcher",
   "  m",
   "  :",
   "  uniqueMatcherSet",
   "  (",
   "  indexOfVararg",
   "  )",
   "  )",
   "  {",
   "  f",
   "  (",
   "  m",
   "  instanceof",
   "  CapturesArguments",
   "  )",
   "  {",
   "- Object",
   "- rawArgument",
   "- =",
   "+ (",
   "+ (",
   "+ CapturesArguments",
   "+ )",
   "+ m",
   "+ )",
   "+ .",
   "+ captureFrom",
   "+ (",
   "  invocation",
   "  .",
   "  getRawArguments",
   "  (",
   "  )",
   "  [",
   "+ position",
   "+ -",
   "  indexOfVararg",
   "  ]",
   "+ )",
   "  ;",
   "  Object",
   "  rawArgument",
   "  =",
   "  invocation",
   "  .",
   "  getRawArguments",
   "  (",
   "  )",
   "  [",
   "  indexOfVararg",
   "  ]",
   "  ;",
   "- for",
   "- (",
   "- int",
   "- i",
   "- =",
   "- 0",
   "- ;",
   "- i",
   "- <",
   "- Array",
   "- .",
   "- getLength",
   "- (",
   "- rawArgument",
   "- )",
   "- ;",
   "- i",
   "- ++",
   "- )",
   "- {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  Array",
   "  .",
   "  getLength",
   "  (",
   "  rawArgument",
   "  )",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  (",
   "  (",
   "  CapturesArguments",
   "  )",
   "  m",
   "  )",
   "  .",
   "  captureFrom",
   "  (",
   "  Array",
   "  .",
   "  get",
   "  (",
   "  rawArgument",
   "  ,",
   "  i",
   "  )",
   "  )",
   "  ;",
   "- (",
   "- (",
   "- CapturesArguments",
   "- )",
   "- m",
   "- )",
   "- .",
   "- captureFrom",
   "- (",
   "- Array",
   "- .",
   "- get",
   "- (",
   "- rawArgument",
   "- ,",
   "- i",
   "- )",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  else",
   "  {"
  ]
 },
 {
  "number": 3,
  "changes_set": [
   "  ublic",
   "  void",
   "  captureArgumentsFrom",
   "  (",
   "  Invocation",
   "  invocation",
   "  )",
   "  {",
   "  private",
   "  Set",
   "  <",
   "  Matcher",
   "  >",
   "  uniqueMatcherSet",
   "  (",
   "  int",
   "  indexOfVararg",
   "  )",
   "  {",
   "- private",
   "- Set",
   "- <",
   "- Matcher",
   "- >",
   "- uniqueMatcherSet",
   "- (",
   "- int",
   "- indexOfVararg",
   "- )",
   "- {",
   "- HashSet",
   "- <",
   "- Matcher",
   "- >",
   "- set",
   "- =",
   "- new",
   "- HashSet",
   "- <",
   "- Matcher",
   "- >",
   "- (",
   "- )",
   "- ;",
   "  HashSet",
   "  <",
   "  Matcher",
   "  >",
   "  set",
   "  =",
   "  new",
   "  HashSet",
   "  <",
   "  Matcher",
   "  >",
   "  (",
   "  )",
   "  ;",
   "  for",
   "  (",
   "  int",
   "  position",
   "  =",
   "  indexOfVararg",
   "  ;",
   "  position",
   "  <",
   "  matchers",
   "  .",
   "  size",
   "  (",
   "  )",
   "  ;",
   "  position",
   "  ++",
   "  )",
   "  {",
   "- for",
   "- (",
   "- int",
   "- position",
   "- =",
   "- indexOfVararg",
   "- ;",
   "- position",
   "- <",
   "- matchers",
   "- .",
   "- size",
   "- (",
   "- )",
   "- ;",
   "- position",
   "- ++",
   "- )",
   "- {",
   "  Matcher",
   "  matcher",
   "  =",
   "  matchers",
   "  .",
   "  get",
   "  (",
   "  position",
   "  )",
   "  ;",
   "- Matcher",
   "- matcher",
   "- =",
   "- matchers",
   "- .",
   "- get",
   "- (",
   "- position",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- matcher",
   "- instanceof",
   "- MatcherDecorator",
   "- )",
   "- {",
   "  if",
   "  (",
   "  matcher",
   "  instanceof",
   "  MatcherDecorator",
   "  )",
   "  {",
   "  set",
   "  .",
   "  add",
   "  (",
   "  (",
   "  (",
   "  MatcherDecorator",
   "  )",
   "  matcher",
   "  )",
   "  .",
   "  getActualMatcher",
   "  (",
   "  )",
   "  )",
   "  ;",
   "- set",
   "- .",
   "- add",
   "- (",
   "- (",
   "- (",
   "- MatcherDecorator",
   "- )",
   "- matcher",
   "- )",
   "- .",
   "- getActualMatcher",
   "- (",
   "- )",
   "- )",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  set",
   "  .",
   "  add",
   "  (",
   "  matcher",
   "  )",
   "  ;",
   "- set",
   "- .",
   "- add",
   "- (",
   "- matcher",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  return",
   "  set",
   "  ;",
   "- return",
   "- set",
   "- ;",
   "- }",
   "  }",
   "  ublic",
   "  static",
   "  List",
   "  <",
   "  InvocationMatcher",
   "  >",
   "  createFrom",
   "  (",
   "  List",
   "  <",
   "  Invocation",
   "  >",
   "  invocations",
   "  )",
   "  {",
   "  inkedList",
   "  <",
   "  InvocationMatcher",
   "  >",
   "  out",
   "  =",
   "  new",
   "  LinkedList",
   "  <",
   "  InvocationMatcher",
   "  >",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 2,
  "changes_set": [
   "  ackage",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  util",
   "  ;",
   "  import",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  exceptions",
   "  .",
   "  Reporter",
   "  ;",
   "- import",
   "- org",
   "- .",
   "- mockito",
   "- .",
   "- exceptions",
   "- .",
   "- Reporter",
   "- ;",
   "  ublic",
   "  class",
   "  Timer",
   "  {"
  ]
 },
 {
  "number": 2,
  "changes_set": [
   "  rivate",
   "  long",
   "  startTime",
   "  =",
   "  -",
   "  1",
   "  ;",
   "  ublic",
   "  Timer",
   "  (",
   "  long",
   "  durationMillis",
   "  )",
   "  {",
   "  validateInput",
   "  (",
   "  durationMillis",
   "  )",
   "  ;",
   "- validateInput",
   "- (",
   "- durationMillis",
   "- )",
   "- ;",
   "  his",
   "  .",
   "  durationMillis",
   "  =",
   "  durationMillis",
   "  ;"
  ]
 },
 {
  "number": 2,
  "changes_set": [
   "  ublic",
   "  void",
   "  start",
   "  (",
   "  )",
   "  {",
   "  tartTime",
   "  =",
   "  System",
   "  .",
   "  currentTimeMillis",
   "  (",
   "  )",
   "  ;",
   "  private",
   "  void",
   "  validateInput",
   "  (",
   "  long",
   "  durationMillis",
   "  )",
   "  {",
   "- private",
   "- void",
   "- validateInput",
   "- (",
   "- long",
   "- durationMillis",
   "- )",
   "- {",
   "- if",
   "- (",
   "- durationMillis",
   "- <",
   "- 0",
   "- )",
   "- {",
   "  if",
   "  (",
   "  durationMillis",
   "  <",
   "  0",
   "  )",
   "  {",
   "  new",
   "  Reporter",
   "  (",
   "  )",
   "  .",
   "  cannotCreateTimerWithNegativeDurationTime",
   "  (",
   "  durationMillis",
   "  )",
   "  ;",
   "- new",
   "- Reporter",
   "- (",
   "- )",
   "- .",
   "- cannotCreateTimerWithNegativeDurationTime",
   "- (",
   "- durationMillis",
   "- )",
   "- ;",
   "  }",
   "  }",
   "- }",
   "- }"
  ]
 },
 {
  "number": 1,
  "changes_set": [
   "  ublic",
   "  Location",
   "  getLocation",
   "  (",
   "  )",
   "  {",
   "  ublic",
   "  void",
   "  captureArgumentsFrom",
   "  (",
   "  Invocation",
   "  invocation",
   "  )",
   "  {",
   "  f",
   "  (",
   "  invocation",
   "  .",
   "  getMethod",
   "  (",
   "  )",
   "  .",
   "  isVarArgs",
   "  (",
   "  )",
   "  )",
   "  {",
   "  nt",
   "  indexOfVararg",
   "  =",
   "  invocation",
   "  .",
   "  getRawArguments",
   "  (",
   "  )",
   "  .",
   "  length",
   "  -",
   "  1",
   "  ;",
   "- for",
   "+ throw",
   "+ new",
   "+ UnsupportedOperationException",
   "  (",
   "+ )",
   "- int",
   "- position",
   "- =",
   "- 0",
   "  ;",
   "- position",
   "- <",
   "- indexOfVararg",
   "- ;",
   "- position",
   "- ++",
   "- )",
   "- {",
   "  for",
   "  (",
   "  int",
   "  position",
   "  =",
   "  0",
   "  ;",
   "  position",
   "  <",
   "  indexOfVararg",
   "  ;",
   "  position",
   "  ++",
   "  )",
   "  {",
   "  Matcher",
   "  m",
   "  =",
   "  matchers",
   "  .",
   "  get",
   "  (",
   "  position",
   "  )",
   "  ;",
   "- Matcher",
   "- m",
   "- =",
   "- matchers",
   "- .",
   "- get",
   "- (",
   "- position",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- m",
   "- instanceof",
   "- CapturesArguments",
   "- )",
   "- {",
   "  if",
   "  (",
   "  m",
   "  instanceof",
   "  CapturesArguments",
   "  )",
   "  {",
   "  (",
   "  (",
   "  CapturesArguments",
   "  )",
   "  m",
   "  )",
   "  .",
   "  captureFrom",
   "  (",
   "  invocation",
   "  .",
   "  getArgumentAt",
   "  (",
   "  position",
   "  ,",
   "  Object",
   "  .",
   "  class",
   "  )",
   "  )",
   "  ;",
   "- (",
   "- (",
   "- CapturesArguments",
   "- )",
   "- m",
   "- )",
   "- .",
   "- captureFrom",
   "- (",
   "- invocation",
   "- .",
   "- getArgumentAt",
   "- (",
   "- position",
   "- ,",
   "- Object",
   "- .",
   "- class",
   "- )",
   "- )",
   "- ;",
   "  }",
   "  }",
   "- }",
   "- }",
   "- for",
   "- (",
   "- int",
   "- position",
   "- =",
   "- indexOfVararg",
   "- ;",
   "- position",
   "- <",
   "- matchers",
   "- .",
   "- size",
   "- (",
   "- )",
   "- ;",
   "- position",
   "- ++",
   "- )",
   "- {",
   "  for",
   "  (",
   "  int",
   "  position",
   "  =",
   "  indexOfVararg",
   "  ;",
   "  position",
   "  <",
   "  matchers",
   "  .",
   "  size",
   "  (",
   "  )",
   "  ;",
   "  position",
   "  ++",
   "  )",
   "  {",
   "  Matcher",
   "  m",
   "  =",
   "  matchers",
   "  .",
   "  get",
   "  (",
   "  position",
   "  )",
   "  ;",
   "- Matcher",
   "- m",
   "- =",
   "- matchers",
   "- .",
   "- get",
   "- (",
   "- position",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- m",
   "- instanceof",
   "- CapturesArguments",
   "- )",
   "- {",
   "  if",
   "  (",
   "  m",
   "  instanceof",
   "  CapturesArguments",
   "  )",
   "  {",
   "  (",
   "  (",
   "  CapturesArguments",
   "  )",
   "  m",
   "  )",
   "  .",
   "  captureFrom",
   "  (",
   "  invocation",
   "  .",
   "  getRawArguments",
   "  (",
   "  )",
   "  [",
   "  position",
   "  -",
   "  indexOfVararg",
   "  ]",
   "  )",
   "  ;",
   "- (",
   "- (",
   "- CapturesArguments",
   "- )",
   "- m",
   "- )",
   "- .",
   "- captureFrom",
   "- (",
   "- invocation",
   "- .",
   "- getRawArguments",
   "- (",
   "- )",
   "- [",
   "- position",
   "- -",
   "- indexOfVararg",
   "- ]",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  else",
   "  {",
   "  or",
   "  (",
   "  int",
   "  position",
   "  =",
   "  0",
   "  ;",
   "  position",
   "  <",
   "  matchers",
   "  .",
   "  size",
   "  (",
   "  )",
   "  ;",
   "  position",
   "  ++",
   "  )",
   "  {"
  ]
 },
 {
  "number": 7,
  "changes_set": [
   "  rivate",
   "  void",
   "  readTypeVariables",
   "  (",
   "  )",
   "  {",
   "  or",
   "  (",
   "  Type",
   "  type",
   "  :",
   "  typeVariable",
   "  .",
   "  getBounds",
   "  (",
   "  )",
   "  )",
   "  {",
   "  egisterTypeVariablesOn",
   "  (",
   "  type",
   "  )",
   "  ;",
   "  registerTypeParametersOn",
   "  (",
   "  new",
   "  TypeVariable",
   "  [",
   "  ]",
   "  {",
   "  typeVariable",
   "  }",
   "  )",
   "  ;",
   "- registerTypeParametersOn",
   "- (",
   "- new",
   "- TypeVariable",
   "- [",
   "- ]",
   "- {",
   "- typeVariable",
   "- }",
   "- )",
   "- ;",
   "  egisterTypeVariablesOn",
   "  (",
   "  getActualTypeArgumentFor",
   "  (",
   "  typeVariable",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 4,
  "changes_set": [
   "  ublic",
   "  void",
   "  noMoreInteractionsWanted",
   "  (",
   "  Invocation",
   "  undesired",
   "  ,",
   "  List",
   "  <",
   "  VerificationAwarhrow",
   "  new",
   "  NoInteractionsWanted",
   "  (",
   "  join",
   "  (",
   "  No",
   "  interactions",
   "  wanted",
   "  here",
   "  :",
   "  \",ew LocationImpl(),\"",
   "  But",
   "  found",
   "  this",
   "  interaction",
   "  on",
   "  mock",
   "  +",
   "- safelyGetMockName",
   "- (",
   "  undesired",
   "  .",
   "  getMock",
   "  (",
   "- )",
   "  )",
   "  +",
   "  \"':\"",
   "  ,",
   "  \"But found this interaction on mock '\"",
   "  +",
   "  safelyGetMockName",
   "  (",
   "  undesired",
   "  .",
   "  getMock",
   "  (",
   "  )",
   "  )",
   "  +",
   "  \"':\"",
   "  ,",
   "  ndesired",
   "  .",
   "  getLocation",
   "  (",
   "  )",
   "  ,",
   "  cenario",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 4,
  "changes_set": [
   "  ublic",
   "  void",
   "  noMoreInteractionsWantedInOrder",
   "  (",
   "  Invocation",
   "  undesired",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  VerificationInOrderFailure",
   "  (",
   "  join",
   "  (",
   "  No",
   "  interactions",
   "  wanted",
   "  here",
   "  :",
   "  \",ew LocationImpl(),\"",
   "  But",
   "  found",
   "  this",
   "  interaction",
   "  on",
   "  mock",
   "  +",
   "- safelyGetMockName",
   "- (",
   "  undesired",
   "  .",
   "  getMock",
   "  (",
   "- )",
   "  )",
   "  +",
   "  \"':\"",
   "  ,",
   "  \"But found this interaction on mock '\"",
   "  +",
   "  safelyGetMockName",
   "  (",
   "  undesired",
   "  .",
   "  getMock",
   "  (",
   "  )",
   "  )",
   "  +",
   "  \"':\"",
   "  ,",
   "  ndesired",
   "  .",
   "  getLocation",
   "  (",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 4,
  "changes_set": [
   "  ublic",
   "  void",
   "  cannotInjectDependency",
   "  (",
   "  Field",
   "  field",
   "  ,",
   "  Object",
   "  matchingMock",
   "  ,",
   "  Exception",
   "  drivate",
   "  String",
   "  exceptionCauseMessageIfAvailable",
   "  (",
   "  Exception",
   "  details",
   "  )",
   "  {",
   "  if",
   "  (",
   "  details",
   "  .",
   "  getCause",
   "  (",
   "  )",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- details",
   "- .",
   "- getCause",
   "- (",
   "- )",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  return",
   "  details",
   "  .",
   "  getMessage",
   "  (",
   "  )",
   "  ;",
   "- return",
   "- details",
   "- .",
   "- getMessage",
   "- (",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  details",
   "  .",
   "  getCause",
   "  (",
   "  )",
   "  .",
   "  getMessage",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 11,
  "changes_set": [
   "  verrideublic",
   "  boolean",
   "  equals",
   "  (",
   "  Object",
   "  o",
   "  )",
   "  {",
   "  if",
   "  (",
   "  this",
   "  ==",
   "  o",
   "  )",
   "  {",
   "- if",
   "- (",
   "- this",
   "- ==",
   "- o",
   "- )",
   "- {",
   "  return",
   "  true",
   "  ;",
   "- return",
   "- true",
   "- ;",
   "- }",
   "  }",
   "  if",
   "  (",
   "  o",
   "  instanceof",
   "  DelegatingMethod",
   "  )",
   "  {",
   "- if",
   "- (",
   "- o",
   "- instanceof",
   "- DelegatingMethod",
   "- )",
   "- {",
   "- DelegatingMethod",
   "- that",
   "- =",
   "- (",
   "- DelegatingMethod",
   "- )",
   "- o",
   "- ;",
   "  DelegatingMethod",
   "  that",
   "  =",
   "  (",
   "  DelegatingMethod",
   "  )",
   "  o",
   "  ;",
   "  return",
   "  method",
   "  .",
   "  equals",
   "  (",
   "  that",
   "  .",
   "  method",
   "  )",
   "  ;",
   "- return",
   "- method",
   "- .",
   "- equals",
   "- (",
   "- that",
   "- .",
   "- method",
   "- )",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  eturn",
   "  method",
   "  .",
   "  equals",
   "  (",
   "  o",
   "  )",
   "  ;",
   "  }",
   "- }"
  ]
 },
 {
  "number": 11,
  "changes_set": [
   "  verrideublic",
   "  int",
   "  hashCode",
   "  (",
   "  )",
   "  {",
   "  return",
   "+ 1",
   "- method",
   "- .",
   "- hashCode",
   "- (",
   "- )",
   "  ;",
   "  return",
   "  method",
   "  .",
   "  hashCode",
   "  (",
   "  )",
   "  ;",
   "  No",
   "  newline",
   "  at",
   "  end",
   "  of",
   "  file"
  ]
 },
 {
  "number": 10,
  "changes_set": [
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  util",
   "  .",
   "  MockUtil",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  util",
   "  .",
   "  reflection",
   "  .",
   "  GenericMetadataSupport",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  invocation",
   "  .",
   "  InvocationOnMock",
   "  ;",
   "  import",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  mock",
   "  .",
   "  MockCreationSettings",
   "  ;",
   "- import",
   "- org",
   "- .",
   "- mockito",
   "- .",
   "- mock",
   "- .",
   "- MockCreationSettings",
   "- ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  stubbing",
   "  .",
   "  Answer",
   "  ;",
   "  mport",
   "  java",
   "  .",
   "  io",
   "  .",
   "  IOException",
   "  ;"
  ]
 },
 {
  "number": 10,
  "changes_set": [
   "  rivate",
   "  Object",
   "  deepStub",
   "  (",
   "  InvocationOnMock",
   "  invocation",
   "  ,",
   "  GenericMetadataSupport",
   "  retu",
   "  /",
   "  record",
   "  deep",
   "  stub",
   "  answereturn",
   "  recordDeepStubAnswer",
   "  (",
   "  newDeepStubMock",
   "  (",
   "  returnTypeGenericMetadata",
   "- ,",
   "- invocation",
   "- .",
   "- getMock",
   "- (",
   "- )",
   "  )",
   "  ,",
   "  newDeepStubMock",
   "  (",
   "  returnTypeGenericMetadata",
   "  ,",
   "  invocation",
   "  .",
   "  getMock",
   "  (",
   "  )",
   "  )",
   "  ,",
   "  ontainer",
   "  ;"
  ]
 },
 {
  "number": 10,
  "changes_set": [
   "  eturn",
   "  The",
   "  mock",
   "  /",
   "  private",
   "  Object",
   "  newDeepStubMock",
   "  (",
   "  GenericMetadataSupport",
   "  returnTypeGenericMetadata",
   "- ,",
   "- Object",
   "- parentMock",
   "  )",
   "  {",
   "  private",
   "  Object",
   "  newDeepStubMock",
   "  (",
   "  GenericMetadataSupport",
   "  returnTypeGenericMetadata",
   "  ,",
   "  Object",
   "  parentMock",
   "  )",
   "  {",
   "- MockCreationSettings",
   "- parentMockSettings",
   "- =",
   "- new",
   "- MockUtil",
   "- (",
   "- )",
   "- .",
   "- getMockSettings",
   "- (",
   "- parentMock",
   "- )",
   "- ;",
   "  MockCreationSettings",
   "  parentMockSettings",
   "  =",
   "  new",
   "  MockUtil",
   "  (",
   "  )",
   "  .",
   "  getMockSettings",
   "  (",
   "  parentMock",
   "  )",
   "  ;",
   "  eturn",
   "  mockitoCore",
   "  (",
   "  )",
   "  .",
   "  mock",
   "  (",
   "  eturnTypeGenericMetadata",
   "  .",
   "  rawType",
   "  (",
   "  )",
   "  ,",
   "  withSettingsUsing",
   "  (",
   "  returnTypeGenericMetadata",
   "- ,",
   "- parentMockSettings",
   "  )",
   "  withSettingsUsing",
   "  (",
   "  returnTypeGenericMetadata",
   "  ,",
   "  parentMockSettings",
   "  )",
   "  ;",
   "  private",
   "  MockSettings",
   "  withSettingsUsing",
   "  (",
   "  GenericMetadataSupport",
   "  returnTypeGenericMetadata",
   "- ,",
   "- MockCreationSettings",
   "- parentMockSettings",
   "  )",
   "  {",
   "  private",
   "  MockSettings",
   "  withSettingsUsing",
   "  (",
   "  GenericMetadataSupport",
   "  returnTypeGenericMetadata",
   "  ,",
   "  MockCreationSettings",
   "  parentMockSettings",
   "  )",
   "  {",
   "  ockSettings",
   "  mockSettings",
   "  =",
   "  returnTypeGenericMetadata",
   "  .",
   "  hasRawExtraInterfaces",
   "  (",
   "  )",
   "  ?",
   "  ithSettings",
   "  (",
   "  )",
   "  .",
   "  extraInterfaces",
   "  (",
   "  returnTypeGenericMetadata",
   "  .",
   "  rawExtraInterfaces",
   "  (",
   "  )",
   "  )",
   "  withSettings",
   "  (",
   "  )",
   "  ;",
   "  return",
   "- propagateSerializationSettings",
   "+ mockSettings",
   "+ .",
   "+ serializable",
   "  (",
   "- mockSettings",
   "- ,",
   "- parentMockSettings",
   "  )",
   "  return",
   "  propagateSerializationSettings",
   "  (",
   "  mockSettings",
   "  ,",
   "  parentMockSettings",
   "  )",
   "  defaultAnswer",
   "  (",
   "  returnsDeepStubsAnswerUsing",
   "  (",
   "  returnTypeGenericMetadata",
   "  )",
   "  )",
   "  ;",
   "  private",
   "  MockSettings",
   "  propagateSerializationSettings",
   "  (",
   "  MockSettings",
   "  mockSettings",
   "  ,",
   "  MockCreationSettings",
   "  parentMockSettings",
   "  )",
   "  {",
   "- private",
   "- MockSettings",
   "- propagateSerializationSettings",
   "- (",
   "- MockSettings",
   "- mockSettings",
   "- ,",
   "- MockCreationSettings",
   "- parentMockSettings",
   "- )",
   "- {",
   "  return",
   "  mockSettings",
   "  .",
   "  serializable",
   "  (",
   "  parentMockSettings",
   "  .",
   "  getSerializableMode",
   "  (",
   "  )",
   "  )",
   "  ;",
   "- return",
   "- mockSettings",
   "- .",
   "- serializable",
   "- (",
   "- parentMockSettings",
   "- .",
   "- getSerializableMode",
   "- (",
   "- )",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  rivate",
   "  ReturnsDeepStubs",
   "  returnsDeepStubsAnswerUsing",
   "  (",
   "  final",
   "  GenericMetadataSupport",
   "  returnTypeGenericMetadata",
   "  )",
   "  {",
   "  eturn",
   "  new",
   "  ReturnsDeepStubsSerializationFallback",
   "  (",
   "  returnTypeGenericMetadata",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 5,
  "changes_set": [
   "  ublic",
   "  void",
   "  verify",
   "  (",
   "  VerificationData",
   "  data",
   "  )",
   "  {",
   "  catch",
   "  (",
   "  MockitoAssertionError",
   "  e",
   "  )",
   "  {",
   "  rror",
   "  =",
   "  handleVerifyException",
   "  (",
   "  e",
   "  )",
   "  ;",
   "  catch",
   "  (",
   "- AssertionError",
   "+ org",
   "+ .",
   "+ mockito",
   "+ .",
   "+ exceptions",
   "+ .",
   "+ verification",
   "+ .",
   "+ junit",
   "+ .",
   "+ ArgumentsAreDifferent",
   "  e",
   "  )",
   "  {",
   "  catch",
   "  (",
   "  AssertionError",
   "  e",
   "  )",
   "  {",
   "  rror",
   "  =",
   "  handleVerifyException",
   "  (",
   "  e",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  <",
   "  code",
   "  >",
   "  false",
   "  <",
   "  /",
   "  code",
   "  >",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  boolean",
   "  anyBoolean",
   "  (",
   "  )",
   "  {",
   "  return",
   "  reportMatcher",
   "  (",
   "+ Any",
   "- new",
   "- InstanceOf",
   "- (",
   "- Boolean",
   "  .",
   "+ ANY",
   "- class",
   "- )",
   "  )",
   "  .",
   "  returnFalse",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  reportMatcher",
   "  (",
   "  new",
   "  InstanceOf",
   "  (",
   "  Boolean",
   "  .",
   "  class",
   "  )",
   "  )",
   "  .",
   "  returnFalse",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  <",
   "  code",
   "  >",
   "  0",
   "  <",
   "  /",
   "  code",
   "  >",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  byte",
   "  anyByte",
   "  (",
   "  )",
   "  {",
   "  return",
   "  reportMatcher",
   "  (",
   "+ Any",
   "- new",
   "- InstanceOf",
   "- (",
   "- Byte",
   "  .",
   "+ ANY",
   "- class",
   "- )",
   "  )",
   "  .",
   "  returnZero",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  reportMatcher",
   "  (",
   "  new",
   "  InstanceOf",
   "  (",
   "  Byte",
   "  .",
   "  class",
   "  )",
   "  )",
   "  .",
   "  returnZero",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  <",
   "  code",
   "  >",
   "  0",
   "  <",
   "  /",
   "  code",
   "  >",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  char",
   "  anyChar",
   "  (",
   "  )",
   "  {",
   "  return",
   "  reportMatcher",
   "  (",
   "+ Any",
   "- new",
   "- InstanceOf",
   "- (",
   "- Character",
   "  .",
   "+ ANY",
   "- class",
   "- )",
   "  )",
   "  .",
   "  returnChar",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  reportMatcher",
   "  (",
   "  new",
   "  InstanceOf",
   "  (",
   "  Character",
   "  .",
   "  class",
   "  )",
   "  )",
   "  .",
   "  returnChar",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  <",
   "  code",
   "  >",
   "  0",
   "  <",
   "  /",
   "  code",
   "  >",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  int",
   "  anyInt",
   "  (",
   "  )",
   "  {",
   "  return",
   "  reportMatcher",
   "  (",
   "+ Any",
   "- new",
   "- InstanceOf",
   "- (",
   "- Integer",
   "  .",
   "+ ANY",
   "- class",
   "- )",
   "  )",
   "  .",
   "  returnZero",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  reportMatcher",
   "  (",
   "  new",
   "  InstanceOf",
   "  (",
   "  Integer",
   "  .",
   "  class",
   "  )",
   "  )",
   "  .",
   "  returnZero",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  <",
   "  code",
   "  >",
   "  0",
   "  <",
   "  /",
   "  code",
   "  >",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  long",
   "  anyLong",
   "  (",
   "  )",
   "  {",
   "  return",
   "  reportMatcher",
   "  (",
   "+ Any",
   "- new",
   "- InstanceOf",
   "- (",
   "- Long",
   "  .",
   "+ ANY",
   "- class",
   "- )",
   "  )",
   "  .",
   "  returnZero",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  reportMatcher",
   "  (",
   "  new",
   "  InstanceOf",
   "  (",
   "  Long",
   "  .",
   "  class",
   "  )",
   "  )",
   "  .",
   "  returnZero",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  <",
   "  code",
   "  >",
   "  0",
   "  <",
   "  /",
   "  code",
   "  >",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  float",
   "  anyFloat",
   "  (",
   "  )",
   "  {",
   "  return",
   "  reportMatcher",
   "  (",
   "+ Any",
   "- new",
   "- InstanceOf",
   "- (",
   "- Float",
   "  .",
   "+ ANY",
   "- class",
   "- )",
   "  )",
   "  .",
   "  returnZero",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  reportMatcher",
   "  (",
   "  new",
   "  InstanceOf",
   "  (",
   "  Float",
   "  .",
   "  class",
   "  )",
   "  )",
   "  .",
   "  returnZero",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  <",
   "  code",
   "  >",
   "  0",
   "  <",
   "  /",
   "  code",
   "  >",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  double",
   "  anyDouble",
   "  (",
   "  )",
   "  {",
   "  return",
   "  reportMatcher",
   "  (",
   "+ Any",
   "- new",
   "- InstanceOf",
   "- (",
   "- Double",
   "  .",
   "+ ANY",
   "- class",
   "- )",
   "  )",
   "  .",
   "  returnZero",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  reportMatcher",
   "  (",
   "  new",
   "  InstanceOf",
   "  (",
   "  Double",
   "  .",
   "  class",
   "  )",
   "  )",
   "  .",
   "  returnZero",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  <",
   "  code",
   "  >",
   "  0",
   "  <",
   "  /",
   "  code",
   "  >",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  short",
   "  anyShort",
   "  (",
   "  )",
   "  {",
   "  return",
   "  reportMatcher",
   "  (",
   "+ Any",
   "- new",
   "- InstanceOf",
   "- (",
   "- Short",
   "  .",
   "+ ANY",
   "- class",
   "- )",
   "  )",
   "  .",
   "  returnZero",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  reportMatcher",
   "  (",
   "  new",
   "  InstanceOf",
   "  (",
   "  Short",
   "  .",
   "  class",
   "  )",
   "  )",
   "  .",
   "  returnZero",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  <",
   "  code",
   "  >",
   "  null",
   "  <",
   "  /",
   "  code",
   "  >",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  <",
   "  T",
   "  >",
   "  T",
   "  anyObject",
   "  (",
   "  )",
   "  {",
   "  return",
   "  (",
   "  T",
   "  )",
   "  reportMatcher",
   "  (",
   "+ Any",
   "- new",
   "- InstanceOf",
   "- (",
   "- Object",
   "  .",
   "+ ANY",
   "- class",
   "- )",
   "  )",
   "  .",
   "  returnNull",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  (",
   "  T",
   "  )",
   "  reportMatcher",
   "  (",
   "  new",
   "  InstanceOf",
   "  (",
   "  Object",
   "  .",
   "  class",
   "  )",
   "  )",
   "  .",
   "  returnNull",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  <",
   "  code",
   "  >",
   "  null",
   "  <",
   "  /",
   "  code",
   "  >",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  <",
   "  T",
   "  >",
   "  T",
   "  any",
   "  (",
   "  Class",
   "  <",
   "  T",
   "  >",
   "  clazz",
   "  )",
   "  {",
   "  return",
   "  (",
   "  T",
   "  )",
   "  reportMatcher",
   "  (",
   "+ Any",
   "+ .",
   "+ ANY",
   "- new",
   "- InstanceOf",
   "- (",
   "- clazz",
   "- )",
   "  )",
   "  .",
   "  returnFor",
   "  (",
   "  clazz",
   "  )",
   "  ;",
   "  return",
   "  (",
   "  T",
   "  )",
   "  reportMatcher",
   "  (",
   "  new",
   "  InstanceOf",
   "  (",
   "  clazz",
   "  )",
   "  )",
   "  .",
   "  returnFor",
   "  (",
   "  clazz",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  <",
   "  code",
   "  >",
   "  null",
   "  <",
   "  /",
   "  code",
   "  >",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  <",
   "  T",
   "  >",
   "  T",
   "  any",
   "  (",
   "  )",
   "  {",
   "  return",
   "  (",
   "  T",
   "  )",
   "+ anyObject",
   "- reportMatcher",
   "- (",
   "- Any",
   "- .",
   "- ANY",
   "- )",
   "- .",
   "- returnNull",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  (",
   "  T",
   "  )",
   "  reportMatcher",
   "  (",
   "  Any",
   "  .",
   "  ANY",
   "  )",
   "  .",
   "  returnNull",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  empty",
   "  String",
   "  (",
   "  \"\"",
   "  )",
   "  /",
   "  ublic",
   "  static",
   "  String",
   "  anyString",
   "  (",
   "  )",
   "  {",
   "  return",
   "  reportMatcher",
   "  (",
   "+ Any",
   "- new",
   "- InstanceOf",
   "- (",
   "- String",
   "  .",
   "+ ANY",
   "- class",
   "- )",
   "  )",
   "  .",
   "  returnString",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  reportMatcher",
   "  (",
   "  new",
   "  InstanceOf",
   "  (",
   "  String",
   "  .",
   "  class",
   "  )",
   "  )",
   "  .",
   "  returnString",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  empty",
   "  List",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  List",
   "  anyList",
   "  (",
   "  )",
   "  {",
   "  return",
   "  reportMatcher",
   "  (",
   "+ Any",
   "- new",
   "- InstanceOf",
   "- (",
   "- List",
   "  .",
   "+ ANY",
   "- class",
   "- )",
   "  )",
   "  .",
   "  returnList",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  reportMatcher",
   "  (",
   "  new",
   "  InstanceOf",
   "  (",
   "  List",
   "  .",
   "  class",
   "  )",
   "  )",
   "  .",
   "  returnList",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  empty",
   "  List",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  <",
   "  T",
   "  >",
   "  List",
   "  <",
   "  T",
   "  >",
   "  anyListOf",
   "  (",
   "  Class",
   "  <",
   "  T",
   "  >",
   "  clazz",
   "  )",
   "  {",
   "  return",
   "- anyList",
   "+ (",
   "+ List",
   "+ )",
   "+ reportMatcher",
   "+ (",
   "+ Any",
   "+ .",
   "+ ANY",
   "+ )",
   "+ .",
   "+ returnList",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  anyList",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  empty",
   "  Set",
   "  /",
   "  ublic",
   "  static",
   "  Set",
   "  anySet",
   "  (",
   "  )",
   "  {",
   "  return",
   "  reportMatcher",
   "  (",
   "+ Any",
   "- new",
   "- InstanceOf",
   "- (",
   "- Set",
   "  .",
   "+ ANY",
   "- class",
   "- )",
   "  )",
   "  .",
   "  returnSet",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  reportMatcher",
   "  (",
   "  new",
   "  InstanceOf",
   "  (",
   "  Set",
   "  .",
   "  class",
   "  )",
   "  )",
   "  .",
   "  returnSet",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  empty",
   "  Set",
   "  /",
   "  ublic",
   "  static",
   "  <",
   "  T",
   "  >",
   "  Set",
   "  <",
   "  T",
   "  >",
   "  anySetOf",
   "  (",
   "  Class",
   "  <",
   "  T",
   "  >",
   "  clazz",
   "  )",
   "  {",
   "  return",
   "- anySet",
   "+ (",
   "+ Set",
   "+ )",
   "+ reportMatcher",
   "+ (",
   "+ Any",
   "+ .",
   "+ ANY",
   "+ )",
   "+ .",
   "+ returnSet",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  anySet",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  empty",
   "  Map",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  Map",
   "  anyMap",
   "  (",
   "  )",
   "  {",
   "  return",
   "  reportMatcher",
   "  (",
   "+ Any",
   "- new",
   "- InstanceOf",
   "- (",
   "- Map",
   "  .",
   "+ ANY",
   "- class",
   "- )",
   "  )",
   "  .",
   "  returnMap",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  reportMatcher",
   "  (",
   "  new",
   "  InstanceOf",
   "  (",
   "  Map",
   "  .",
   "  class",
   "  )",
   "  )",
   "  .",
   "  returnMap",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  empty",
   "  Map",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  <",
   "  K",
   "  ,",
   "  V",
   "  >",
   "  Map",
   "  <",
   "  K",
   "  ,",
   "  V",
   "  >",
   "  anyMapOf",
   "  (",
   "  Class",
   "  <",
   "  K",
   "  >",
   "  keyClazz",
   "  ,",
   "  Class",
   "  <",
   "  V",
   "  >",
   "  valueClazz",
   "  )",
   "  {",
   "  return",
   "- anyMap",
   "+ reportMatcher",
   "+ (",
   "+ Any",
   "+ .",
   "+ ANY",
   "+ )",
   "+ .",
   "+ returnMap",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  anyMap",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  empty",
   "  Collection",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  Collection",
   "  anyCollection",
   "  (",
   "  )",
   "  {",
   "  return",
   "  reportMatcher",
   "  (",
   "+ Any",
   "- new",
   "- InstanceOf",
   "- (",
   "- Collection",
   "  .",
   "+ ANY",
   "- class",
   "- )",
   "  )",
   "  .",
   "  returnList",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  reportMatcher",
   "  (",
   "  new",
   "  InstanceOf",
   "  (",
   "  Collection",
   "  .",
   "  class",
   "  )",
   "  )",
   "  .",
   "  returnList",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  eturn",
   "  empty",
   "  Collection",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  <",
   "  T",
   "  >",
   "  Collection",
   "  <",
   "  T",
   "  >",
   "  anyCollectionOf",
   "  (",
   "  Class",
   "  <",
   "  T",
   "  >",
   "  clazz",
   "  )",
   "  {",
   "  return",
   "+ (",
   "- anyCollection",
   "+ Collection",
   "+ )",
   "+ reportMatcher",
   "+ (",
   "+ Any",
   "+ .",
   "+ ANY",
   "+ )",
   "+ .",
   "+ returnList",
   "  (",
   "  )",
   "  ;",
   "  return",
   "  anyCollection",
   "  (",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 9,
  "changes_set": [
   "  ackage",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  stubbing",
   "  .",
   "  answers",
   "  ;",
   "  mport",
   "  java",
   "  .",
   "  io",
   "  .",
   "  Serializable",
   "  ;",
   "  import",
   "  java",
   "  .",
   "  lang",
   "  .",
   "  reflect",
   "  .",
   "  Modifier",
   "- ;",
   "- import",
   "- java",
   "- .",
   "- lang",
   "- .",
   "- reflect",
   "- .",
   "- Modifier",
   "- ;",
   "- import",
   "- org",
   "- .",
   "- mockito",
   "- .",
   "- internal",
   "- .",
   "- stubbing",
   "- .",
   "- defaultanswers",
   "- .",
   "- GloballyConfiguredAnswer",
   "  ;",
   "  import",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  stubbing",
   "  .",
   "  defaultanswers",
   "  .",
   "  GloballyConfiguredAnswer",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  invocation",
   "  .",
   "  InvocationOnMock",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  stubbing",
   "  .",
   "  Answer",
   "  ;"
  ]
 },
 {
  "number": 9,
  "changes_set": [
   "  rivate",
   "  static",
   "  final",
   "  long",
   "  serialVersionUID",
   "  =",
   "  9057165148930624087L",
   "  ;",
   "  ublic",
   "  Object",
   "  answer",
   "  (",
   "  InvocationOnMock",
   "  invocation",
   "  )",
   "  throws",
   "  Throwable",
   "  {",
   "  if",
   "  (",
   "  Modifier",
   "  .",
   "  isAbstract",
   "  (",
   "  invocation",
   "  .",
   "  getMethod",
   "  (",
   "  )",
   "  .",
   "  getModifiers",
   "  (",
   "  )",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- Modifier",
   "- .",
   "- isAbstract",
   "- (",
   "- invocation",
   "- .",
   "- getMethod",
   "- (",
   "- )",
   "- .",
   "- getModifiers",
   "- (",
   "- )",
   "- )",
   "- )",
   "- {",
   "  return",
   "  new",
   "  GloballyConfiguredAnswer",
   "  (",
   "  )",
   "  .",
   "  answer",
   "  (",
   "  invocation",
   "  )",
   "  ;",
   "- return",
   "- new",
   "- GloballyConfiguredAnswer",
   "- (",
   "- )",
   "- .",
   "- answer",
   "- (",
   "- invocation",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  invocation",
   "  .",
   "  callRealMethod",
   "  (",
   "  )",
   "  ;",
   "  No",
   "  newline",
   "  at",
   "  end",
   "  of",
   "  file"
  ]
 },
 {
  "number": 8,
  "changes_set": [
   "  rotected",
   "  void",
   "  registerTypeVariablesOn",
   "  (",
   "  Type",
   "  classType",
   "  )",
   "  {",
   "  f",
   "  (",
   "  actualTypeArgument",
   "  instanceof",
   "  WildcardType",
   "  )",
   "  {",
   "  ontextualActualTypeParameters",
   "  .",
   "  put",
   "  (",
   "  typeParameter",
   "  ,",
   "  boundsOf",
   "  (",
   "  (",
   "  WildcardType",
   "  )",
   "  actualTypeArgument",
   "  )",
   "  )",
   "  ;",
   "  }",
   "  else",
   "- if",
   "- (",
   "- typeParameter",
   "- !=",
   "- actualTypeArgument",
   "- )",
   "  {",
   "  }",
   "  else",
   "  if",
   "  (",
   "  typeParameter",
   "  !=",
   "  actualTypeArgument",
   "  )",
   "  {",
   "  ontextualActualTypeParameters",
   "  .",
   "  put",
   "  (",
   "  typeParameter",
   "  ,",
   "  actualTypeArgument",
   "  )",
   "  ;",
   "  /",
   "  logger",
   "  .",
   "  log",
   "  (",
   "  \"For '\"",
   "  +",
   "  parameterizedType",
   "  +",
   "  \"' found type variable : { '\"",
   "  +",
   "  typeParameter",
   "  +",
   "  \"(\"",
   "  +",
   "  System",
   "  .",
   "  identityHashCode",
   "  (",
   "  typeParameter",
   "  )",
   "  +",
   "  \")\"",
   "  +",
   "  \"' : '\"",
   "  +",
   "  actualTypeArgument",
   "  +",
   "  \"(\"",
   "  +",
   "  System",
   "  .",
   "  identityHashCode",
   "  (",
   "  typeParameter",
   "  )",
   "  +",
   "  \")\"",
   "  +",
   "  \"' }\"",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 16,
  "changes_set": [
   "  eturn",
   "  mock",
   "  object",
   "  /",
   "  ublic",
   "  static",
   "  <",
   "  T",
   "  >",
   "  T",
   "  mock",
   "  (",
   "  Class",
   "  <",
   "  T",
   "  >",
   "  classToMock",
   "  ,",
   "  MockSettings",
   "  mockSettings",
   "  )",
   "  {",
   "  return",
   "  MOCKITO_CORE",
   "  .",
   "  mock",
   "  (",
   "  classToMock",
   "  ,",
   "  mockSettings",
   "- ,",
   "- true",
   "  )",
   "  ;",
   "  return",
   "  MOCKITO_CORE",
   "  .",
   "  mock",
   "  (",
   "  classToMock",
   "  ,",
   "  mockSettings",
   "  ,",
   "  true",
   "  )",
   "  ;",
   "  *",
   "  *",
   "  Creates",
   "  a",
   "  spy",
   "  of",
   "  the",
   "  real",
   "  object",
   "  .",
   "  The",
   "  spy",
   "  calls",
   "  <",
   "  b",
   "  >",
   "  real",
   "  <",
   "  /",
   "  b",
   "  >",
   "  methods",
   "  unless",
   "  they",
   "  are",
   "  stubbed",
   "  .",
   "  <",
   "  p",
   "  >",
   "  Real",
   "  spies",
   "  should",
   "  be",
   "  used",
   "  <",
   "  b",
   "  >",
   "  carefully",
   "  and",
   "  occasionally",
   "  <",
   "  /",
   "  b",
   "  >",
   "  ,",
   "  for",
   "  example",
   "  when",
   "  dealing",
   "  with",
   "  legacy",
   "  code",
   "  .",
   "  <",
   "  p",
   "  >",
   "  As",
   "  usual",
   "  you",
   "  are",
   "  going",
   "  to",
   "  read",
   "  <",
   "  b",
   "  >",
   "  the",
   "  partial",
   "  mock",
   "  warning",
   "  <",
   "  /",
   "  b",
   "  >",
   "  :",
   "  Object",
   "  oriented",
   "  programming",
   "  is",
   "  more",
   "  less",
   "  tackling",
   "  complexity",
   "  by",
   "  dividing",
   "  the",
   "  complexity",
   "  into",
   "  separate",
   "  ,",
   "  specific",
   "  ,",
   "  SRPy",
   "  objects",
   "  .",
   "  How",
   "  does",
   "  partial",
   "  mock",
   "  fit",
   "  into",
   "  this",
   "  paradigm",
   "  ?",
   "  Well",
   "  ,",
   "  it",
   "  just",
   "  doesn",
   "  .",
   "  .",
   "  Partial",
   "  mock",
   "  usually",
   "  means",
   "  that",
   "  the",
   "  complexity",
   "  has",
   "  been",
   "  moved",
   "  to",
   "  a",
   "  different",
   "  method",
   "  on",
   "  the",
   "  same",
   "  object",
   "  .",
   "  In",
   "  most",
   "  cases",
   "  ,",
   "  this",
   "  is",
   "  not",
   "  the",
   "  way",
   "  you",
   "  want",
   "  to",
   "  design",
   "  your",
   "  application",
   "  .",
   "  <",
   "  p",
   "  >",
   "  However",
   "  ,",
   "  there",
   "  are",
   "  rare",
   "  cases",
   "  when",
   "  partial",
   "  mocks",
   "  come",
   "  handy",
   "  :",
   "  dealing",
   "  with",
   "  code",
   "  you",
   "  cannot",
   "  change",
   "  easily",
   "  (",
   "  3",
   "  rd",
   "  party",
   "  interfaces",
   "  ,",
   "  interim",
   "  refactoring",
   "  of",
   "  legacy",
   "  code",
   "  etc",
   "  .",
   "  )",
   "  However",
   "  ,",
   "  I",
   "  wouldn",
   "  use",
   "  partial",
   "  mocks",
   "  for",
   "  new",
   "  ,",
   "  test",
   "  -",
   "  driven",
   "  &",
   "  well",
   "  -",
   "  designed",
   "  code",
   "  .",
   "  <",
   "  p",
   "  >",
   "  Example",
   "  :",
   "  <",
   "  pre",
   "  >",
   "  List",
   "  list",
   "  =",
   "  new",
   "  LinkedList",
   "  (",
   "  )",
   "  ;",
   "  List",
   "  spy",
   "  =",
   "  spy",
   "  (",
   "  list",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 16,
  "changes_set": [
   "  eturn",
   "  a",
   "  spy",
   "  of",
   "  the",
   "  real",
   "  object",
   "  /",
   "  ublic",
   "  static",
   "  <",
   "  T",
   "  >",
   "  T",
   "  spy",
   "  (",
   "  T",
   "  object",
   "  )",
   "  {",
   "  eturn",
   "  MOCKITO_CORE",
   "  .",
   "  mock",
   "  (",
   "  (",
   "  Class",
   "  <",
   "  T",
   "  >",
   "  )",
   "  object",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  ,",
   "  withSettings",
   "  (",
   "  )",
   "  spiedInstance",
   "  (",
   "  object",
   "  )",
   "  .",
   "  defaultAnswer",
   "  (",
   "  CALLS_REAL_METHODS",
   "  )",
   "- ,",
   "- true",
   "  )",
   "  ;",
   "  .",
   "  defaultAnswer",
   "  (",
   "  CALLS_REAL_METHODS",
   "  )",
   "  ,",
   "  true",
   "  )",
   "  ;",
   "  *",
   "  *",
   "  <",
   "  pre",
   "  >"
  ]
 },
 {
  "number": 16,
  "changes_set": [
   "  uppressWarnings",
   "  (",
   "  \"unchecked\"",
   "  )",
   "  ublic",
   "  class",
   "  MockitoCore",
   "  {",
   "  rivate",
   "  final",
   "  Reporter",
   "  reporter",
   "  =",
   "  new",
   "  Reporter",
   "  (",
   "  )",
   "  ;",
   "  rivate",
   "  final",
   "  MockUtil",
   "  mockUtil",
   "  =",
   "  new",
   "  MockUtil",
   "  (",
   "  )",
   "  ;",
   "  rivate",
   "  final",
   "  MockingProgress",
   "  mockingProgress",
   "  =",
   "  new",
   "  ThreadSafeMockingProgress",
   "  (",
   "  )",
   "  ;",
   "  public",
   "  <",
   "  T",
   "  >",
   "  T",
   "  mock",
   "  (",
   "  Class",
   "  <",
   "  T",
   "  >",
   "  classToMock",
   "  ,",
   "  MockSettings",
   "  mockSettings",
   "  ,",
   "  boolean",
   "  shouldResetOngoingStubbing",
   "  )",
   "  {",
   "+ return",
   "+ mock",
   "+ (",
   "+ classToMock",
   "+ ,",
   "+ mockSettings",
   "+ )",
   "+ ;",
   "+ }",
   "+ public",
   "+ <",
   "+ T",
   "+ >",
   "+ T",
   "+ mock",
   "+ (",
   "+ Class",
   "+ <",
   "+ T",
   "+ >",
   "+ classToMock",
   "+ ,",
   "+ MockSettings",
   "+ mockSettings",
   "+ )",
   "+ {",
   "  public",
   "  <",
   "  T",
   "  >",
   "  T",
   "  mock",
   "  (",
   "  Class",
   "  <",
   "  T",
   "  >",
   "  classToMock",
   "  ,",
   "  MockSettings",
   "  mockSettings",
   "  ,",
   "  boolean",
   "  shouldResetOngoingStubbing",
   "  )",
   "  {",
   "  ockingProgress",
   "  .",
   "  validateState",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  shouldResetOngoingStubbing",
   "  )",
   "  {",
   "- if",
   "- (",
   "- shouldResetOngoingStubbing",
   "- )",
   "- {",
   "  ockingProgress",
   "  .",
   "  resetOngoingStubbing",
   "  (",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  eturn",
   "  mockUtil",
   "  .",
   "  createMock",
   "  (",
   "  classToMock",
   "  ,",
   "  (",
   "  MockSettingsImpl",
   "  )",
   "  mockSettings",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 15,
  "changes_set": [
   "  ackage",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  configuration",
   "  .",
   "  injection",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  exceptions",
   "  .",
   "  base",
   "  .",
   "  MockitoException",
   "- ;",
   "- import",
   "- org",
   "- .",
   "- mockito",
   "- .",
   "- internal",
   "- .",
   "- util",
   "- .",
   "- reflection",
   "- .",
   "- BeanPropertySetter",
   "  ;",
   "  import",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  util",
   "  .",
   "  reflection",
   "  .",
   "  BeanPropertySetter",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  util",
   "  .",
   "  reflection",
   "  .",
   "  FieldSetter",
   "  ;",
   "  mport",
   "  java",
   "  .",
   "  lang",
   "  .",
   "  reflect",
   "  .",
   "  Field",
   "  ;"
  ]
 },
 {
  "number": 15,
  "changes_set": [
   "  ublic",
   "  OngoingInjecter",
   "  filterCandidate",
   "  (",
   "  final",
   "  Collection",
   "  <",
   "  Object",
   "  >",
   "  mocks",
   "  ,",
   "  final",
   "  Fieeturn",
   "  new",
   "  OngoingInjecter",
   "  (",
   "  )",
   "  {",
   "  ublic",
   "  boolean",
   "  thenInject",
   "  (",
   "  )",
   "  {",
   "  ry",
   "  {",
   "  if",
   "  (",
   "  !",
   "  new",
   "  BeanPropertySetter",
   "  (",
   "  fieldInstance",
   "  ,",
   "  field",
   "  )",
   "  .",
   "  set",
   "  (",
   "  matchingMock",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- !",
   "- new",
   "- BeanPropertySetter",
   "- (",
   "- fieldInstance",
   "- ,",
   "- field",
   "- )",
   "- .",
   "- set",
   "- (",
   "- matchingMock",
   "- )",
   "- )",
   "- {",
   "  ew",
   "  FieldSetter",
   "  (",
   "  fieldInstance",
   "  ,",
   "  field",
   "  )",
   "  .",
   "  set",
   "  (",
   "  matchingMock",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  catch",
   "  (",
   "  Exception",
   "  e",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  MockitoException",
   "  (",
   "  \"Problems injecting dependency in \"",
   "  +",
   "  field",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  ,",
   "  e",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 14,
  "changes_set": [
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  stubbing",
   "  .",
   "  OngoingStubbingImpl",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  stubbing",
   "  .",
   "  StubbedInvocationMatcher",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  stubbing",
   "  .",
   "  VoidMethodStubbableImpl",
   "  ;",
   "  import",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  verification",
   "  .",
   "  MockAwareVerificationMode",
   "  ;",
   "- import",
   "- org",
   "- .",
   "- mockito",
   "- .",
   "- internal",
   "- .",
   "- verification",
   "- .",
   "- MockAwareVerificationMode",
   "- ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  verification",
   "  .",
   "  VerificationDataImpl",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  stubbing",
   "  .",
   "  Answer",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  stubbing",
   "  .",
   "  VoidMethodStubbable",
   "  ;"
  ]
 },
 {
  "number": 14,
  "changes_set": [
   "  ublic",
   "  Object",
   "  handle",
   "  (",
   "  Invocation",
   "  invocation",
   "  )",
   "  throws",
   "  Throwable",
   "  {",
   "  f",
   "  (",
   "  verificationMode",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  /",
   "  We",
   "  need",
   "  to",
   "  check",
   "  if",
   "  verification",
   "  was",
   "  started",
   "  on",
   "  the",
   "  correct",
   "  mock",
   "  /",
   "  -",
   "  see",
   "  VerifyingWithAnExtraCallToADifferentMockTestif",
   "  (",
   "  verificationMode",
   "  instanceof",
   "  MockAwareVerificationMode",
   "  &&",
   "  (",
   "  (",
   "  MockAwareVerificationMode",
   "  )",
   "  verificationMode",
   "  )",
   "  .",
   "  getMock",
   "  (",
   "  )",
   "  ==",
   "  invocation",
   "  .",
   "  getMock",
   "  (",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- verificationMode",
   "- instanceof",
   "- MockAwareVerificationMode",
   "- &&",
   "- (",
   "- (",
   "- MockAwareVerificationMode",
   "- )",
   "- verificationMode",
   "- )",
   "- .",
   "- getMock",
   "- (",
   "- )",
   "- ==",
   "- invocation",
   "- .",
   "- getMock",
   "- (",
   "- )",
   "- )",
   "- {",
   "  erificationDataImpl",
   "  data",
   "  =",
   "  new",
   "  VerificationDataImpl",
   "  (",
   "  invocationContainerImpl",
   "  .",
   "  getInvocations",
   "  (",
   "  )",
   "  ,",
   "  invocationMatcher",
   "  )",
   "  ;",
   "  erificationMode",
   "  .",
   "  verify",
   "  (",
   "  data",
   "  )",
   "  ;",
   "  eturn",
   "  null",
   "  ;",
   "  }",
   "- }",
   "  nvocationContainerImpl",
   "  .",
   "  setInvocationForPotentialStubbing",
   "  (",
   "  invocationMatcher",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 14,
  "changes_set": [
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  stubbing",
   "  .",
   "  OngoingStubbingImpl",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  stubbing",
   "  .",
   "  StubberImpl",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  util",
   "  .",
   "  MockUtil",
   "- ;",
   "- import",
   "- org",
   "- .",
   "- mockito",
   "- .",
   "- internal",
   "- .",
   "- verification",
   "- .",
   "- MockAwareVerificationMode",
   "  ;",
   "  import",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  verification",
   "  .",
   "  MockAwareVerificationMode",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  verification",
   "  .",
   "  VerificationDataImpl",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  verification",
   "  .",
   "  VerificationModeFactory",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  verification",
   "  .",
   "  api",
   "  .",
   "  InOrderContext",
   "  ;"
  ]
 },
 {
  "number": 14,
  "changes_set": [
   "  ublic",
   "  IOngoingStubbing",
   "  stub",
   "  (",
   "  )",
   "  {",
   "  else",
   "  if",
   "  (",
   "  !",
   "  mockUtil",
   "  .",
   "  isMock",
   "  (",
   "  mock",
   "  )",
   "  )",
   "  {",
   "  eporter",
   "  .",
   "  notAMockPassedToVerify",
   "  (",
   "  )",
   "  ;",
   "  mockingProgress",
   "  .",
   "  verificationStarted",
   "  (",
   "- new",
   "- MockAwareVerificationMode",
   "- (",
   "- mock",
   "- ,",
   "  mode",
   "- )",
   "  )",
   "  ;",
   "  mockingProgress",
   "  .",
   "  verificationStarted",
   "  (",
   "  new",
   "  MockAwareVerificationMode",
   "  (",
   "  mock",
   "  ,",
   "  mode",
   "  )",
   "  )",
   "  ;",
   "  eturn",
   "  mock",
   "  ;"
  ]
 },
 {
  "number": 12,
  "changes_set": [
   "  ublic",
   "  Class",
   "  getGenericType",
   "  (",
   "  Field",
   "  field",
   "  )",
   "  {",
   "  ype",
   "  generic",
   "  =",
   "  field",
   "  .",
   "  getGenericType",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  generic",
   "  !=",
   "  null",
   "  &&",
   "  generic",
   "  instanceof",
   "  ParameterizedType",
   "  )",
   "  {",
   "  ype",
   "  actual",
   "  =",
   "  (",
   "  (",
   "  ParameterizedType",
   "  )",
   "  generic",
   "  )",
   "  .",
   "  getActualTypeArguments",
   "  (",
   "  )",
   "  [",
   "  0",
   "  ]",
   "  ;",
   "  if",
   "  (",
   "  actual",
   "  instanceof",
   "  Class",
   "  )",
   "  {",
   "- if",
   "- (",
   "- actual",
   "- instanceof",
   "- Class",
   "- )",
   "- {",
   "  eturn",
   "  (",
   "  Class",
   "  )",
   "  actual",
   "  ;",
   "- }",
   "- else",
   "- if",
   "- (",
   "- actual",
   "- instanceof",
   "- ParameterizedType",
   "- )",
   "- {",
   "  }",
   "  else",
   "  if",
   "  (",
   "  actual",
   "  instanceof",
   "  ParameterizedType",
   "  )",
   "  {",
   "  /",
   "  in",
   "  case",
   "  of",
   "  nested",
   "  generics",
   "  we",
   "  don",
   "  go",
   "  deepreturn",
   "  (",
   "  Class",
   "  )",
   "  (",
   "  (",
   "  ParameterizedType",
   "  )",
   "  actual",
   "  )",
   "  .",
   "  getRawType",
   "  (",
   "  )",
   "  ;",
   "- return",
   "- (",
   "- Class",
   "- )",
   "- (",
   "- (",
   "- ParameterizedType",
   "- )",
   "- actual",
   "- )",
   "- .",
   "- getRawType",
   "- (",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  Object",
   "  .",
   "  class",
   "  ;"
  ]
 },
 {
  "number": 13,
  "changes_set": [
   "  ublic",
   "  Object",
   "  handle",
   "  (",
   "  Invocation",
   "  invocation",
   "  )",
   "  throws",
   "  Throwable",
   "  {",
   "  f",
   "  (",
   "  verificationMode",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  /",
   "  We",
   "  need",
   "  to",
   "  check",
   "  if",
   "  verification",
   "  was",
   "  started",
   "  on",
   "  the",
   "  correct",
   "  mock",
   "  /",
   "  -",
   "  see",
   "  VerifyingWithAnExtraCallToADifferentMockTest",
   "  (",
   "  bug",
   "  138",
   "  )",
   "  if",
   "  (",
   "+ verificationMode",
   "+ instanceof",
   "+ MockAwareVerificationMode",
   "+ &&",
   "  (",
   "  (",
   "  MockAwareVerificationMode",
   "  )",
   "  verificationMode",
   "  )",
   "  .",
   "  getMock",
   "  (",
   "  )",
   "  ==",
   "  invocation",
   "  .",
   "  getMock",
   "  (",
   "  )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  (",
   "  (",
   "  MockAwareVerificationMode",
   "  )",
   "  verificationMode",
   "  )",
   "  .",
   "  getMock",
   "  (",
   "  )",
   "  ==",
   "  invocation",
   "  .",
   "  getMock",
   "  (",
   "  )",
   "  )",
   "  {",
   "  erificationDataImpl",
   "  data",
   "  =",
   "  new",
   "  VerificationDataImpl",
   "  (",
   "  invocationContainerImpl",
   "  ,",
   "  invocationMatcher",
   "  )",
   "  ;",
   "  erificationMode",
   "  .",
   "  verify",
   "  (",
   "  data",
   "  )",
   "  ;",
   "  eturn",
   "  null",
   "  ;",
   "  }",
   "  else",
   "  {",
   "- }",
   "- else",
   "- {",
   "  /",
   "  this",
   "  means",
   "  there",
   "  is",
   "  an",
   "  invocation",
   "  on",
   "  a",
   "  different",
   "  mock",
   "  .",
   "  Re",
   "  -",
   "  adding",
   "  verification",
   "  mode",
   "  /",
   "  -",
   "  see",
   "  VerifyingWithAnExtraCallToADifferentMockTest",
   "  (",
   "  bug",
   "  138",
   "  )",
   "  mockingProgress",
   "  .",
   "  verificationStarted",
   "  (",
   "  verificationMode",
   "  )",
   "  ;",
   "- mockingProgress",
   "- .",
   "- verificationStarted",
   "- (",
   "- verificationMode",
   "- )",
   "- ;"
  ]
 },
 {
  "number": 17,
  "changes_set": [
   "  rivate",
   "  Object",
   "  spiedInstance",
   "  ;",
   "  rivate",
   "  Answer",
   "  <",
   "  Object",
   "  >",
   "  defaultAnswer",
   "  ;",
   "  rivate",
   "  MockName",
   "  mockName",
   "  ;",
   "  private",
   "  boolean",
   "  serializable",
   "  ;",
   "- private",
   "- boolean",
   "- serializable",
   "- ;",
   "  ublic",
   "  MockSettings",
   "  serializable",
   "  (",
   "  )",
   "  {",
   "+ return",
   "  this",
   "  .",
   "+ extraInterfaces",
   "+ (",
   "+ java",
   "+ .",
   "+ io",
   "+ .",
   "- serializable",
   "+ Serializable",
   "- =",
   "- true",
   "+ .",
   "+ class",
   "+ )",
   "  ;",
   "  this",
   "  .",
   "  serializable",
   "  =",
   "  true",
   "- ;",
   "- return",
   "- this",
   "  ;",
   "  return",
   "  this",
   "  ;",
   "  ublic",
   "  MockSettings",
   "  extraInterfaces",
   "  (",
   "  Class",
   "  <",
   "  ?",
   "  >",
   "  ...",
   "  extraInterfaces",
   "  )",
   "  {"
  ]
 },
 {
  "number": 17,
  "changes_set": [
   "  ublic",
   "  MockSettings",
   "  defaultAnswer",
   "  (",
   "  Answer",
   "  defaultAnswer",
   "  )",
   "  {",
   "  ublic",
   "  boolean",
   "  isSerializable",
   "  (",
   "  )",
   "  {",
   "  return",
   "+ extraInterfaces",
   "+ !=",
   "+ null",
   "+ &&",
   "+ java",
   "+ .",
   "+ util",
   "+ .",
   "+ Arrays",
   "+ .",
   "+ asList",
   "+ (",
   "+ extraInterfaces",
   "+ )",
   "+ .",
   "+ contains",
   "+ (",
   "+ java",
   "+ .",
   "+ io",
   "+ .",
   "- serializable",
   "+ Serializable",
   "+ .",
   "+ class",
   "+ )",
   "  ;",
   "  return",
   "  serializable",
   "  ;",
   "  ublic",
   "  void",
   "  initiateMockName",
   "  (",
   "  Class",
   "  classToMock",
   "  )",
   "  {"
  ]
 },
 {
  "number": 17,
  "changes_set": [
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  creation",
   "  .",
   "  jmock",
   "  .",
   "  ClassImposterizer",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  util",
   "  .",
   "  reflection",
   "  .",
   "  LenientCopyTool",
   "  ;",
   "  import",
   "  java",
   "  .",
   "  io",
   "  .",
   "  Serializable",
   "  ;",
   "- import",
   "- java",
   "- .",
   "- io",
   "- .",
   "- Serializable",
   "- ;"
  ]
 },
 {
  "number": 17,
  "changes_set": [
   "  ublic",
   "  MockUtil",
   "  (",
   "  )",
   "  {",
   "  lass",
   "  <",
   "  ?",
   "  >",
   "  [",
   "  ]",
   "  interfaces",
   "  =",
   "  settings",
   "  .",
   "  getExtraInterfaces",
   "  (",
   "  )",
   "  ;",
   "  lass",
   "  <",
   "  ?",
   "  >",
   "  [",
   "  ]",
   "  ancillaryTypes",
   "  ;",
   "- if",
   "- (",
   "- settings",
   "- .",
   "- isSerializable",
   "- (",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  settings",
   "  .",
   "  isSerializable",
   "  (",
   "  )",
   "  )",
   "  {",
   "  ancillaryTypes",
   "  =",
   "  interfaces",
   "  ==",
   "  null",
   "  ?",
   "  new",
   "  Class",
   "  <",
   "  ?",
   "  >",
   "  [",
   "  ]",
   "  {",
   "  Serializable",
   "  .",
   "  class",
   "  }",
   "  :",
   "  new",
   "  ArrayUtils",
   "  (",
   "  )",
   "  .",
   "  concat",
   "  (",
   "  interfaces",
   "  ,",
   "  Serializable",
   "  .",
   "  class",
   "  )",
   "  ;",
   "- ancillaryTypes",
   "- =",
   "- interfaces",
   "- ==",
   "- null",
   "- ?",
   "- new",
   "- Class",
   "- <",
   "- ?",
   "- >",
   "- [",
   "- ]",
   "- {",
   "- Serializable",
   "- .",
   "- class",
   "- }",
   "- :",
   "- new",
   "- ArrayUtils",
   "- (",
   "- )",
   "- .",
   "- concat",
   "- (",
   "- interfaces",
   "- ,",
   "- Serializable",
   "- .",
   "- class",
   "- )",
   "- ;",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  ncillaryTypes",
   "  =",
   "  interfaces",
   "  ==",
   "  null",
   "  ?",
   "  new",
   "  Class",
   "  <",
   "  ?",
   "  >",
   "  [",
   "  0",
   "  ]",
   "  :",
   "  interfaces",
   "  ;",
   "  }",
   "- }",
   "  bject",
   "  spiedInstance",
   "  =",
   "  settings",
   "  .",
   "  getSpiedInstance",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 18,
  "changes_set": [
   "  bject",
   "  returnValueFor",
   "  (",
   "  Class",
   "  <",
   "  ?",
   "  >",
   "  type",
   "  )",
   "  {",
   "  eturn",
   "  Primitives",
   "  .",
   "  defaultValueForPrimitiveOrWrapper",
   "  (",
   "  type",
   "  )",
   "  ;",
   "  /",
   "  new",
   "  instances",
   "  are",
   "  used",
   "  instead",
   "  of",
   "  Collections",
   "  .",
   "  emptyList",
   "  (",
   "  )",
   "  ,",
   "  etc",
   "  .",
   "  /",
   "  to",
   "  avoid",
   "  UnsupportedOperationException",
   "  if",
   "  code",
   "  under",
   "  test",
   "  modifies",
   "  returned",
   "  collection",
   "  }",
   "  else",
   "  if",
   "  (",
   "  type",
   "  ==",
   "  Iterable",
   "  .",
   "  class",
   "  )",
   "  {",
   "- }",
   "- else",
   "- if",
   "- (",
   "- type",
   "- ==",
   "- Iterable",
   "- .",
   "- class",
   "- )",
   "- {",
   "- return",
   "- new",
   "- ArrayList",
   "- <",
   "- Object",
   "- >",
   "- (",
   "- 0",
   "- )",
   "- ;",
   "  return",
   "  new",
   "  ArrayList",
   "  <",
   "  Object",
   "  >",
   "  (",
   "  0",
   "  )",
   "  ;",
   "  else",
   "  if",
   "  (",
   "  type",
   "  ==",
   "  Collection",
   "  .",
   "  class",
   "  )",
   "  {",
   "  eturn",
   "  new",
   "  LinkedList",
   "  <",
   "  Object",
   "  >",
   "  (",
   "  )",
   "  ;",
   "  else",
   "  if",
   "  (",
   "  type",
   "  ==",
   "  Set",
   "  .",
   "  class",
   "  )",
   "  {"
  ]
 },
 {
  "number": 22,
  "changes_set": [
   "  ublic",
   "  class",
   "  Equality",
   "  {",
   "  ublic",
   "  static",
   "  boolean",
   "  areEqual",
   "  (",
   "  Object",
   "  o1",
   "  ,",
   "  Object",
   "  o2",
   "  )",
   "  {",
   "  if",
   "  (",
   "  o1",
   "  ==",
   "+ null",
   "+ ||",
   "  o2",
   "+ ==",
   "+ null",
   "  )",
   "  {",
   "  if",
   "  (",
   "  o1",
   "  ==",
   "  o2",
   "  )",
   "  {",
   "  return",
   "  true",
   "  ;",
   "- return",
   "- true",
   "- ;",
   "- }",
   "- else",
   "- if",
   "- (",
   "- o1",
   "- ==",
   "- null",
   "- ||",
   "- o2",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  }",
   "  else",
   "  if",
   "  (",
   "  o1",
   "  ==",
   "  null",
   "  ||",
   "  o2",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  eturn",
   "  o1",
   "  ==",
   "  null",
   "  &&",
   "  o2",
   "  ==",
   "  null",
   "  ;",
   "  else",
   "  if",
   "  (",
   "  isArray",
   "  (",
   "  o1",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  isArray",
   "  (",
   "  o2",
   "  )",
   "  &&",
   "  areArraysEqual",
   "  (",
   "  o1",
   "  ,",
   "  o2",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 20,
  "changes_set": [
   "  ublic",
   "  ByteBuddyMockMaker",
   "  (",
   "  )",
   "  {",
   "  ettings",
   "  .",
   "  getTypeToMock",
   "  (",
   "  )",
   "  ,",
   "  ettings",
   "  .",
   "  getExtraInterfaces",
   "  (",
   "  )",
   "  ;",
   "  Instantiator",
   "  instantiator",
   "  =",
   "  new",
   "  InstantiatorProvider",
   "  (",
   "  )",
   "  .",
   "  getInstantiator",
   "  (",
   "  settings",
   "  )",
   "  ;",
   "- Instantiator",
   "- instantiator",
   "- =",
   "- new",
   "- InstantiatorProvider",
   "- (",
   "- )",
   "- .",
   "- getInstantiator",
   "- (",
   "- settings",
   "- )",
   "- ;",
   "  mockInstance",
   "  =",
   "  null",
   "  ;",
   "  ry",
   "  {",
   "  mockInstance",
   "  =",
   "- instantiator",
   "+ classInstantiator",
   "  .",
   "- newInstance",
   "+ instantiate",
   "  (",
   "  mockedProxyType",
   "  )",
   "  ;",
   "  mockInstance",
   "  =",
   "  instantiator",
   "  .",
   "  newInstance",
   "  (",
   "  mockedProxyType",
   "  )",
   "  ;",
   "  ockMethodInterceptor",
   "  .",
   "  MockAccess",
   "  mockAccess",
   "  =",
   "  (",
   "  MockMethodInterceptor",
   "  .",
   "  MockAccess",
   "  )",
   "  mockInstance",
   "  ;",
   "  ockAccess",
   "  .",
   "  setMockitoInterceptor",
   "  (",
   "  new",
   "  MockMethodInterceptor",
   "  (",
   "  asInternalMockHandler",
   "  (",
   "  handler",
   "  )",
   "  ,",
   "  settings",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 20,
  "changes_set": [
   "  ublic",
   "  ByteBuddyMockMaker",
   "  (",
   "  )",
   "  {",
   "  class",
   "  to",
   "  mock",
   "  :",
   "  \" + describeClass(mockedProxyType),created class : \"",
   "  +",
   "  describeClass",
   "  (",
   "  settings",
   "  .",
   "  getTypeToMock",
   "  (",
   "  )",
   "  )",
   "  ,",
   "  proxy",
   "  instance",
   "  class",
   "  :",
   "  \" + describeClass(mockInstance),\"",
   "  instance",
   "  creation",
   "  by",
   "  :",
   "- \" + instantiator.getClass().getSimpleName(),\"",
   "+ \" + classInstantiator.getClass().getSimpleName(),\"",
   "  instance",
   "  creation",
   "  by",
   "  :",
   "  \" + instantiator.getClass().getSimpleName(),\"",
   "  ,",
   "  You",
   "  might",
   "  experience",
   "  classloading",
   "  issues",
   "  ,",
   "  please",
   "  ask",
   "  the",
   "  mockito",
   "  mailing",
   "  -",
   "  list",
   "  .",
   "  \",\""
  ]
 },
 {
  "number": 19,
  "changes_set": [
   "  rivate",
   "  boolean",
   "  injectMockCandidates",
   "  (",
   "  Class",
   "  <",
   "  ?",
   "  >",
   "  awaitingInjectionClazz",
   "  ,",
   "  Set",
   "  <",
   "  Objectrivate",
   "  boolean",
   "  injectMockCandidatesOnFields",
   "  (",
   "  Set",
   "  <",
   "  Object",
   "  >",
   "  mocks",
   "  ,",
   "  Object",
   "  instance",
   "  ,",
   "  boolean",
   "  injectionOccurred",
   "  ,",
   "  List",
   "  <",
   "  Field",
   "  >",
   "  orderedInstanceFields",
   "  )",
   "  {",
   "  or",
   "  (",
   "  Iterator",
   "  <",
   "  Field",
   "  >",
   "  it",
   "  =",
   "  orderedInstanceFields",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  ;",
   "  it",
   "  .",
   "  hasNext",
   "  (",
   "  )",
   "  ;",
   "  )",
   "  {",
   "  ield",
   "  field",
   "  =",
   "  it",
   "  .",
   "  next",
   "  (",
   "  )",
   "  ;",
   "  Object",
   "  injected",
   "  =",
   "  mockCandidateFilter",
   "  .",
   "  filterCandidate",
   "  (",
   "  mocks",
   "  ,",
   "  field",
   "  ,",
   "- orderedInstanceFields",
   "- ,",
   "  instance",
   "  )",
   "  .",
   "  thenInject",
   "  (",
   "  )",
   "  ;",
   "  Object",
   "  injected",
   "  =",
   "  mockCandidateFilter",
   "  .",
   "  filterCandidate",
   "  (",
   "  mocks",
   "  ,",
   "  field",
   "  ,",
   "  orderedInstanceFields",
   "  ,",
   "  instance",
   "  )",
   "  .",
   "  thenInject",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  injected",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  njectionOccurred",
   "  |=",
   "  true",
   "  ;",
   "  ocks",
   "  .",
   "  remove",
   "  (",
   "  injected",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 19,
  "changes_set": [
   "  mport",
   "  java",
   "  .",
   "  lang",
   "  .",
   "  reflect",
   "  .",
   "  Field",
   "  ;",
   "  mport",
   "  java",
   "  .",
   "  util",
   "  .",
   "  Collection",
   "  ;",
   "  import",
   "  java",
   "  .",
   "  util",
   "  .",
   "  List",
   "  ;",
   "- import",
   "- java",
   "- .",
   "- util",
   "- .",
   "- List",
   "- ;",
   "  *",
   "  *",
   "  This",
   "  node",
   "  returns",
   "  an",
   "  actual",
   "  injecter",
   "  which",
   "  will",
   "  be",
   "  either",
   "  :"
  ]
 },
 {
  "number": 19,
  "changes_set": [
   "  <",
   "  /",
   "  ul",
   "  >",
   "  /",
   "  ublic",
   "  class",
   "  FinalMockCandidateFilter",
   "  implements",
   "  MockCandidateFilter",
   "  {",
   "  public",
   "  OngoingInjecter",
   "  filterCandidate",
   "  (",
   "  final",
   "  Collection",
   "  <",
   "  Object",
   "  >",
   "  mocks",
   "  ,",
   "  final",
   "  Field",
   "  field",
   "- ,",
   "- List",
   "- <",
   "- Field",
   "- >",
   "- fields",
   "  ,",
   "  final",
   "  Object",
   "  fieldInstance",
   "  )",
   "  {",
   "  public",
   "  OngoingInjecter",
   "  filterCandidate",
   "  (",
   "  final",
   "  Collection",
   "  <",
   "  Object",
   "  >",
   "  mocks",
   "  ,",
   "  final",
   "  Field",
   "  field",
   "  ,",
   "  List",
   "  <",
   "  Field",
   "  >",
   "  fields",
   "  ,",
   "  final",
   "  Object",
   "  fieldInstance",
   "  )",
   "  {",
   "  f",
   "  (",
   "  mocks",
   "  .",
   "  size",
   "  (",
   "  )",
   "  ==",
   "  1",
   "  )",
   "  {",
   "  inal",
   "  Object",
   "  matchingMock",
   "  =",
   "  mocks",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  .",
   "  next",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 19,
  "changes_set": [
   "  mport",
   "  java",
   "  .",
   "  lang",
   "  .",
   "  reflect",
   "  .",
   "  Field",
   "  ;",
   "  mport",
   "  java",
   "  .",
   "  util",
   "  .",
   "  Collection",
   "- ;",
   "- import",
   "- java",
   "- .",
   "- util",
   "- .",
   "- List",
   "  ;",
   "  import",
   "  java",
   "  .",
   "  util",
   "  .",
   "  List",
   "  ;",
   "  ublic",
   "  interface",
   "  MockCandidateFilter",
   "  {",
   "  ngoingInjecter",
   "  filterCandidate",
   "  (",
   "  ollection",
   "  <",
   "  Object",
   "  >",
   "  mocks",
   "  ,",
   "  ield",
   "  fieldToBeInjected",
   "  ,",
   "- List",
   "- <",
   "- Field",
   "- >",
   "- fields",
   "- ,",
   "  Object",
   "- instanceList",
   "+ fieldInstanceList",
   "  <",
   "  Field",
   "  >",
   "  fields",
   "  ,",
   "  Object",
   "  instance",
   "  ;"
  ]
 },
 {
  "number": 19,
  "changes_set": [
   "  ublic",
   "  NameBasedCandidateFilter",
   "  (",
   "  MockCandidateFilter",
   "  next",
   "  )",
   "  {",
   "  ublic",
   "  OngoingInjecter",
   "  filterCandidate",
   "  (",
   "  Collection",
   "  <",
   "  Object",
   "  >",
   "  mocks",
   "  ,",
   "  Field",
   "  field",
   "- ,",
   "- List",
   "- <",
   "- Field",
   "- >",
   "- fields",
   "  ,",
   "  Object",
   "  fieldInstance",
   "  )",
   "  {",
   "  Field",
   "  field",
   "  ,",
   "  List",
   "  <",
   "  Field",
   "  >",
   "  fields",
   "  ,",
   "  Object",
   "  fieldInstance",
   "  )",
   "  {",
   "  ist",
   "  <",
   "  Object",
   "  >",
   "  mockNameMatches",
   "  =",
   "  new",
   "  ArrayList",
   "  <",
   "  Object",
   "  >",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  mocks",
   "  .",
   "  size",
   "  (",
   "  )",
   "  >",
   "  1",
   "  )",
   "  {",
   "  or",
   "  (",
   "  Object",
   "  mock",
   "  :",
   "  mocks",
   "  )",
   "  {"
  ]
 },
 {
  "number": 19,
  "changes_set": [
   "  ublic",
   "  OngoingInjecter",
   "  filterCandidate",
   "  (",
   "  Collection",
   "  <",
   "  Object",
   "  >",
   "  mocks",
   "  ,",
   "  ockNameMatches",
   "  .",
   "  add",
   "  (",
   "  mock",
   "  )",
   "  ;",
   "  return",
   "  next",
   "  .",
   "  filterCandidate",
   "  (",
   "  mockNameMatches",
   "  ,",
   "  field",
   "- ,",
   "- fields",
   "  ,",
   "  return",
   "  next",
   "  .",
   "  filterCandidate",
   "  (",
   "  mockNameMatches",
   "  ,",
   "  field",
   "  ,",
   "  fields",
   "  ,",
   "  ieldInstance",
   "  )",
   "  ;",
   "  *",
   "  In",
   "  this",
   "  case",
   "  we",
   "  have",
   "  to",
   "  check",
   "  whether",
   "  we",
   "  have",
   "  conflicting",
   "  naming"
  ]
 },
 {
  "number": 19,
  "changes_set": [
   "  ublic",
   "  OngoingInjecter",
   "  filterCandidate",
   "  (",
   "  Collection",
   "  <",
   "  Object",
   "  >",
   "  mocks",
   "  ,",
   "  whenever",
   "  we",
   "  find",
   "  a",
   "  field",
   "  that",
   "  does",
   "  match",
   "  its",
   "  name",
   "  with",
   "  the",
   "  mockname",
   "  ,",
   "  we",
   "  should",
   "  take",
   "  that",
   "  field",
   "  instead",
   "  .",
   "  /",
   "  }",
   "  else",
   "  if",
   "  (",
   "  mocks",
   "  .",
   "  size",
   "  (",
   "  )",
   "  ==",
   "  1",
   "  )",
   "  {",
   "- }",
   "- else",
   "- if",
   "- (",
   "- mocks",
   "- .",
   "- size",
   "- (",
   "- )",
   "- ==",
   "- 1",
   "- )",
   "- {",
   "- String",
   "- mockName",
   "- =",
   "- mockUtil",
   "- .",
   "- getMockName",
   "- (",
   "- mocks",
   "- .",
   "- iterator",
   "- (",
   "- )",
   "- .",
   "- next",
   "- (",
   "- )",
   "- )",
   "  String",
   "  mockName",
   "  =",
   "  mockUtil",
   "  .",
   "  getMockName",
   "  (",
   "  mocks",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  .",
   "  next",
   "  (",
   "  )",
   "  )",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  ;",
   "- .",
   "- toString",
   "- (",
   "- )",
   "- ;",
   "- for",
   "- (",
   "- Field",
   "- otherField",
   "- :",
   "- fields",
   "- )",
   "- {",
   "  for",
   "  (",
   "  Field",
   "  otherField",
   "  :",
   "  fields",
   "  )",
   "  {",
   "  if",
   "  (",
   "  !",
   "  otherField",
   "  .",
   "  equals",
   "  (",
   "  field",
   "- )",
   "- if",
   "- (",
   "- !",
   "- otherField",
   "- .",
   "- equals",
   "- (",
   "- field",
   "- )",
   "- &&",
   "- otherField",
   "- .",
   "- getType",
   "- (",
   "- )",
   "- .",
   "- equals",
   "- (",
   "- field",
   "- .",
   "- getType",
   "- (",
   "- )",
   "  )",
   "  &&",
   "  otherField",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  .",
   "  equals",
   "  (",
   "  field",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  )",
   "  &&",
   "  otherField",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  .",
   "  equals",
   "  (",
   "  mockName",
   "  )",
   "  )",
   "  {",
   "- &&",
   "- otherField",
   "- .",
   "- getName",
   "- (",
   "- )",
   "- .",
   "- equals",
   "- (",
   "- mockName",
   "- )",
   "- )",
   "- {",
   "- return",
   "- new",
   "- OngoingInjecter",
   "- (",
   "- )",
   "- {",
   "  return",
   "  new",
   "  OngoingInjecter",
   "  (",
   "  )",
   "  {",
   "  public",
   "  Object",
   "  thenInject",
   "  (",
   "  )",
   "  {",
   "- public",
   "- Object",
   "- thenInject",
   "- (",
   "- )",
   "- {",
   "- return",
   "- null",
   "- ;",
   "  return",
   "  null",
   "  ;",
   "  }",
   "  }",
   "- }",
   "  ;",
   "- }",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  return",
   "  next",
   "  .",
   "  filterCandidate",
   "  (",
   "  mocks",
   "  ,",
   "  field",
   "- ,",
   "- fields",
   "  ,",
   "  fieldInstance",
   "  )",
   "  ;",
   "  return",
   "  next",
   "  .",
   "  filterCandidate",
   "  (",
   "  mocks",
   "  ,",
   "  field",
   "  ,",
   "  fields",
   "  ,",
   "  fieldInstance",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 19,
  "changes_set": [
   "  ublic",
   "  TypeBasedCandidateFilter",
   "  (",
   "  MockCandidateFilter",
   "  next",
   "  )",
   "  {",
   "  his",
   "  .",
   "  next",
   "  =",
   "  next",
   "  ;",
   "  public",
   "  OngoingInjecter",
   "  filterCandidate",
   "  (",
   "  Collection",
   "  <",
   "  Object",
   "  >",
   "  mocks",
   "  ,",
   "  Field",
   "  field",
   "- ,",
   "- List",
   "- <",
   "- Field",
   "- >",
   "- fields",
   "  ,",
   "  Object",
   "  fieldInstance",
   "  )",
   "  {",
   "  public",
   "  OngoingInjecter",
   "  filterCandidate",
   "  (",
   "  Collection",
   "  <",
   "  Object",
   "  >",
   "  mocks",
   "  ,",
   "  Field",
   "  field",
   "  ,",
   "  List",
   "  <",
   "  Field",
   "  >",
   "  fields",
   "  ,",
   "  Object",
   "  fieldInstance",
   "  )",
   "  {",
   "  ist",
   "  <",
   "  Object",
   "  >",
   "  mockTypeMatches",
   "  =",
   "  new",
   "  ArrayList",
   "  <",
   "  Object",
   "  >",
   "  (",
   "  )",
   "  ;",
   "  or",
   "  (",
   "  Object",
   "  mock",
   "  :",
   "  mocks",
   "  )",
   "  {",
   "  f",
   "  (",
   "  field",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  .",
   "  isAssignableFrom",
   "  (",
   "  mock",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  )",
   "  )",
   "  {"
  ]
 },
 {
  "number": 19,
  "changes_set": [
   "  ublic",
   "  OngoingInjecter",
   "  filterCandidate",
   "  (",
   "  Collection",
   "  <",
   "  Object",
   "  >",
   "  mocks",
   "  ,",
   "  Field",
   "  field",
   "  ,",
   "  Obreturn",
   "  next",
   "  .",
   "  filterCandidate",
   "  (",
   "  mockTypeMatches",
   "  ,",
   "  field",
   "  ,",
   "- fields",
   "- ,",
   "  fieldInstance",
   "  )",
   "  ;",
   "  return",
   "  next",
   "  .",
   "  filterCandidate",
   "  (",
   "  mockTypeMatches",
   "  ,",
   "  field",
   "  ,",
   "  fields",
   "  ,",
   "  fieldInstance",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 21,
  "changes_set": [
   "  ublic",
   "  ConstructorInstantiator",
   "  (",
   "  Object",
   "  outerClassInstance",
   "  )",
   "  {",
   "  f",
   "  (",
   "  outerClassInstance",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  eturn",
   "  noArgConstructor",
   "  (",
   "  cls",
   "  )",
   "  ;",
   "  return",
   "+ withOuterClass",
   "+ (",
   "+ cls",
   "+ )",
   "+ ;",
   "+ return",
   "  withParams",
   "  (",
   "  cls",
   "  ,",
   "  outerClassInstance",
   "  )",
   "  ;",
   "- return",
   "- withParams",
   "- (",
   "- cls",
   "- ,",
   "- outerClassInstance",
   "- )",
   "- ;",
   "  private",
   "- static",
   "  <",
   "  T",
   "  >",
   "  T",
   "- withParams",
   "+ withOuterClass",
   "  (",
   "  Class",
   "  <",
   "  T",
   "  >",
   "  cls",
   "- ,",
   "- Object",
   "- ...",
   "- params",
   "  )",
   "  {",
   "  private",
   "  static",
   "  <",
   "  T",
   "  >",
   "  T",
   "  withParams",
   "  (",
   "  Class",
   "  <",
   "  T",
   "  >",
   "  cls",
   "  ,",
   "  Object",
   "  ...",
   "  params",
   "  )",
   "  {",
   "  ry",
   "  {",
   "  /",
   "  this",
   "  is",
   "  kind",
   "  of",
   "  overengineered",
   "  because",
   "  we",
   "  don",
   "  need",
   "  to",
   "  support",
   "  more",
   "  params",
   "  /",
   "  however",
   "  ,",
   "  I",
   "  know",
   "  we",
   "  will",
   "  be",
   "  needing",
   "  it",
   "  :",
   "  )",
   "- for",
   "- (",
   "  Constructor",
   "  <",
   "- ?",
   "+ T",
   "  >",
   "- constructor",
   "- :",
   "+ c",
   "+ =",
   "  cls",
   "  .",
   "- getDeclaredConstructors",
   "+ getDeclaredConstructor",
   "  (",
   "+ outerClassInstance",
   "+ .",
   "+ getClass",
   "+ (",
   "  )",
   "  )",
   "- {",
   "+ ;",
   "+ return",
   "+ c",
   "+ .",
   "+ newInstance",
   "+ (",
   "+ outerClassInstance",
   "+ )",
   "+ ;",
   "  for",
   "  (",
   "  Constructor",
   "  <",
   "  ?",
   "  >",
   "  constructor",
   "  :",
   "  cls",
   "  .",
   "  getDeclaredConstructors",
   "  (",
   "  )",
   "  )",
   "  {",
   "  Class",
   "  <",
   "  ?",
   "  >",
   "  [",
   "  ]",
   "  types",
   "  =",
   "  constructor",
   "  .",
   "  getParameterTypes",
   "  (",
   "  )",
   "  ;",
   "+ if",
   "+ (",
   "+ paramsMatch",
   "+ (",
   "- Class",
   "- <",
   "- ?",
   "- >",
   "- [",
   "- ]",
   "  types",
   "- =",
   "+ ,",
   "+ params",
   "+ )",
   "+ )",
   "+ {",
   "+ return",
   "+ (",
   "+ T",
   "+ )",
   "  constructor",
   "  .",
   "- getParameterTypes",
   "- (",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- paramsMatch",
   "- (",
   "- types",
   "- ,",
   "- params",
   "- )",
   "- )",
   "- {",
   "- if",
   "- (",
   "- paramsMatch",
   "- (",
   "- types",
   "- ,",
   "- params",
   "- )",
   "- )",
   "- {",
   "- return",
   "- (",
   "- T",
   "- )",
   "- constructor",
   "- .",
   "  newInstance",
   "  (",
   "  params",
   "  )",
   "  ;",
   "- return",
   "- (",
   "- T",
   "- )",
   "- constructor",
   "- .",
   "- newInstance",
   "- (",
   "- params",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  catch",
   "  (",
   "  Exception",
   "  e",
   "  )",
   "  {",
   "  hrow",
   "  paramsException",
   "  (",
   "  cls",
   "  ,",
   "  e",
   "  )",
   "  ;",
   "  throw",
   "  paramsException",
   "  (",
   "  cls",
   "  ,",
   "  null",
   "  )",
   "  ;",
   "- throw",
   "- paramsException",
   "- (",
   "- cls",
   "- ,",
   "- null",
   "- )",
   "- ;",
   "  rivate",
   "  static",
   "  <",
   "  T",
   "  >",
   "  InstantationException",
   "  paramsException",
   "  (",
   "  Class",
   "  <",
   "  T",
   "  >",
   "  cls",
   "  ,",
   "  Exception",
   "  e",
   "  )",
   "  {"
  ]
 },
 {
  "number": 21,
  "changes_set": [
   "  ublic",
   "  ConstructorInstantiator",
   "  (",
   "  Object",
   "  outerClassInstance",
   "  )",
   "  {",
   "- cls",
   "- .",
   "- getSimpleName",
   "- (",
   "- )",
   "- +",
   "- \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\"",
   "- ,",
   "- e",
   "- )",
   "- ;",
   "  cls",
   "  .",
   "  getSimpleName",
   "  (",
   "  )",
   "  +",
   "  \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\"",
   "  ,",
   "  e",
   "  )",
   "  ;",
   "  private",
   "  static",
   "  boolean",
   "  paramsMatch",
   "  (",
   "  Class",
   "  <",
   "  ?",
   "  >",
   "  [",
   "  ]",
   "  types",
   "  ,",
   "  Object",
   "  [",
   "  ]",
   "  params",
   "  )",
   "  {",
   "- private",
   "- static",
   "- boolean",
   "- paramsMatch",
   "- (",
   "- Class",
   "- <",
   "- ?",
   "- >",
   "- [",
   "- ]",
   "- types",
   "- ,",
   "- Object",
   "- [",
   "- ]",
   "- params",
   "- )",
   "- {",
   "- if",
   "- (",
   "- params",
   "- .",
   "- length",
   "- !=",
   "- types",
   "- .",
   "- length",
   "- )",
   "- {",
   "  if",
   "  (",
   "  params",
   "  .",
   "  length",
   "  !=",
   "  types",
   "  .",
   "  length",
   "  )",
   "  {",
   "  return",
   "  false",
   "  ;",
   "- return",
   "- false",
   "- ;",
   "  }",
   "- }",
   "- for",
   "- (",
   "- int",
   "- i",
   "- =",
   "- 0",
   "- ;",
   "- i",
   "- <",
   "- params",
   "- .",
   "- length",
   "- ;",
   "- i",
   "- ++",
   "- )",
   "- {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  params",
   "  .",
   "  length",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  if",
   "  (",
   "  !",
   "  types",
   "  [",
   "  i",
   "  ]",
   "  .",
   "  isInstance",
   "  (",
   "  params",
   "  [",
   "  i",
   "  ]",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- !",
   "- types",
   "- [",
   "- i",
   "- ]",
   "- .",
   "- isInstance",
   "- (",
   "- params",
   "- [",
   "- i",
   "- ]",
   "- )",
   "- )",
   "- {",
   "- return",
   "- false",
   "- ;",
   "  return",
   "  false",
   "  ;",
   "  }",
   "  }",
   "- }",
   "- }",
   "  return",
   "  true",
   "  ;",
   "- return",
   "- true",
   "- ;",
   "- }",
   "  }",
   "  rivate",
   "  static",
   "  <",
   "  T",
   "  >",
   "  T",
   "  noArgConstructor",
   "  (",
   "  Class",
   "  <",
   "  T",
   "  >",
   "  cls",
   "  )",
   "  {",
   "  ry",
   "  {"
  ]
 },
 {
  "number": 23,
  "changes_set": [
   "  rivate",
   "  static",
   "  final",
   "  long",
   "  serialVersionUID",
   "  =",
   "  -",
   "  7105341425736035847L",
   "  ;",
   "  private",
   "- transient",
   "  MockitoCore",
   "  mockitoCore",
   "+ =",
   "+ new",
   "+ MockitoCore",
   "+ (",
   "+ )",
   "+ ;",
   "+ private",
   "+ ReturnsEmptyValues",
   "+ delegate",
   "+ =",
   "+ new",
   "+ ReturnsEmptyValues",
   "+ (",
   "+ )",
   "  ;",
   "  private",
   "  transient",
   "  MockitoCore",
   "  mockitoCore",
   "- ;",
   "- private",
   "- transient",
   "- ReturnsEmptyValues",
   "- delegate",
   "  ;",
   "  private",
   "  transient",
   "  ReturnsEmptyValues",
   "  delegate",
   "  ;",
   "  ublic",
   "  Object",
   "  answer",
   "  (",
   "  InvocationOnMock",
   "  invocation",
   "  )",
   "  throws",
   "  Throwable",
   "  {",
   "  enericMetadataSupport",
   "  returnTypeGenericMetadata",
   "  =",
   "  ctualParameterizedType",
   "  (",
   "  invocation",
   "  .",
   "  getMock",
   "  (",
   "  )",
   "  )",
   "  .",
   "  resolveGenericReturnType",
   "  (",
   "  invocation",
   "  .",
   "  getMethod",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  lass",
   "  <",
   "  ?",
   "  >",
   "  rawType",
   "  =",
   "  returnTypeGenericMetadata",
   "  .",
   "  rawType",
   "  (",
   "  )",
   "  ;",
   "  instantiateMockitoCoreIfNeeded",
   "  (",
   "  )",
   "  ;",
   "- instantiateMockitoCoreIfNeeded",
   "- (",
   "- )",
   "- ;",
   "- instantiateDelegateIfNeeded",
   "- (",
   "- )",
   "- ;",
   "  instantiateDelegateIfNeeded",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  !",
   "  mockitoCore",
   "  .",
   "  isTypeMockable",
   "  (",
   "  rawType",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  delegate",
   "  .",
   "  returnValueFor",
   "  (",
   "  rawType",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 23,
  "changes_set": [
   "  ublic",
   "  Object",
   "  answer",
   "  (",
   "  InvocationOnMock",
   "  invocation",
   "  )",
   "  throws",
   "  Throwable",
   "  {",
   "  eturn",
   "  getMock",
   "  (",
   "  invocation",
   "  ,",
   "  returnTypeGenericMetadata",
   "  )",
   "  ;",
   "  private",
   "  synchronized",
   "  void",
   "  instantiateMockitoCoreIfNeeded",
   "  (",
   "  )",
   "  {",
   "- private",
   "- synchronized",
   "- void",
   "- instantiateMockitoCoreIfNeeded",
   "- (",
   "- )",
   "- {",
   "- if",
   "- (",
   "- mockitoCore",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  if",
   "  (",
   "  mockitoCore",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  mockitoCore",
   "  =",
   "  new",
   "  MockitoCore",
   "  (",
   "  )",
   "  ;",
   "- mockitoCore",
   "- =",
   "- new",
   "- MockitoCore",
   "- (",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  private",
   "  synchronized",
   "  void",
   "  instantiateDelegateIfNeeded",
   "  (",
   "- )",
   "- {",
   "- private",
   "- synchronized",
   "- void",
   "- instantiateDelegateIfNeeded",
   "- (",
   "- )",
   "- {",
   "- if",
   "- (",
   "- delegate",
   "- ==",
   "- null",
   "  )",
   "  {",
   "  if",
   "  (",
   "  delegate",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  delegate",
   "  =",
   "  new",
   "  ReturnsEmptyValues",
   "  (",
   "  )",
   "  ;",
   "- delegate",
   "- =",
   "- new",
   "- ReturnsEmptyValues",
   "- (",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  rivate",
   "  Object",
   "  getMock",
   "  (",
   "  InvocationOnMock",
   "  invocation",
   "  ,",
   "  GenericMetadataSupport",
   "  returnTypeGenericMetadata",
   "  )",
   "  throws",
   "  Throwable",
   "  {",
   "  nternalMockHandler",
   "  <",
   "  Object",
   "  >",
   "  handler",
   "  =",
   "  new",
   "  MockUtil",
   "  (",
   "  )",
   "  .",
   "  getMockHandler",
   "  (",
   "  invocation",
   "  .",
   "  getMock",
   "  (",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 23,
  "changes_set": [
   "  rivate",
   "  MockSettings",
   "  withSettingsUsing",
   "  (",
   "  GenericMetadataSupport",
   "  returnTypeGenericMwithSettings",
   "  (",
   "  )",
   "  ;",
   "  eturn",
   "  mockSettings",
   "  .",
   "  serializable",
   "  (",
   "  )",
   "- .",
   "- serializable",
   "- (",
   "- )",
   "  defaultAnswer",
   "  (",
   "  returnsDeepStubsAnswerUsing",
   "  (",
   "  returnTypeGenericMetadata",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 23,
  "changes_set": [
   "  rotected",
   "  GenericMetadataSupport",
   "  actualParameterizedType",
   "  (",
   "  Object",
   "  mock",
   "  )",
   "  {",
   "  rivate",
   "  Object",
   "  recordDeepStubMock",
   "  (",
   "  final",
   "  Object",
   "  mock",
   "  ,",
   "  InvocationContainerImpl",
   "  container",
   "  )",
   "  throws",
   "  Throwable",
   "  {",
   "  container",
   "  .",
   "  addAnswer",
   "  (",
   "  new",
   "- SerializableAnswer",
   "+ Answer",
   "+ <",
   "+ Object",
   "+ >",
   "  (",
   "  )",
   "  {",
   "  container",
   "  .",
   "  addAnswer",
   "  (",
   "  new",
   "  SerializableAnswer",
   "  (",
   "  )",
   "  {",
   "  ublic",
   "  Object",
   "  answer",
   "  (",
   "  InvocationOnMock",
   "  invocation",
   "  )",
   "  throws",
   "  Throwable",
   "  {",
   "  eturn",
   "  mock",
   "  ;"
  ]
 },
 {
  "number": 23,
  "changes_set": [
   "  ublic",
   "  Object",
   "  answer",
   "  (",
   "  InvocationOnMock",
   "  invocation",
   "  )",
   "  throws",
   "  Throwable",
   "  {",
   "  eturn",
   "  mock",
   "  ;",
   "  abstract",
   "  class",
   "  SerializableAnswer",
   "  implements",
   "  Answer",
   "  <",
   "  Object",
   "  >",
   "  ,",
   "  Serializable",
   "  {",
   "- abstract",
   "- class",
   "- SerializableAnswer",
   "- implements",
   "- Answer",
   "- <",
   "- Object",
   "- >",
   "- ,",
   "- Serializable",
   "- {",
   "- }",
   "  }",
   "  rotected",
   "  GenericMetadataSupport",
   "  actualParameterizedType",
   "  (",
   "  Object",
   "  mock",
   "  )",
   "  {"
  ]
 },
 {
  "number": 28,
  "changes_set": [
   "  ublic",
   "  void",
   "  injectMocksOnFields",
   "  (",
   "  Set",
   "  <",
   "  Field",
   "  >",
   "  injectMocksFields",
   "  ,",
   "  Set",
   "  <",
   "  Object",
   "  >",
   "  mocks",
   "  ,",
   "  rivate",
   "  void",
   "  injectMockCandidate",
   "  (",
   "  Class",
   "  <",
   "  ?",
   "  >",
   "  awaitingInjectionClazz",
   "  ,",
   "  Set",
   "  <",
   "  Object",
   "  >",
   "  mocks",
   "  ,",
   "  Object",
   "  fieldInstance",
   "  )",
   "  {",
   "  or",
   "  (",
   "  Field",
   "  field",
   "  :",
   "  orderedInstanceFieldsFrom",
   "  (",
   "  awaitingInjectionClazz",
   "  )",
   "  )",
   "  {",
   "- Object",
   "- injected",
   "- =",
   "  mockCandidateFilter",
   "  .",
   "  filterCandidate",
   "  (",
   "  mocks",
   "  ,",
   "  field",
   "  ,",
   "  fieldInstance",
   "  )",
   "  .",
   "  thenInject",
   "  (",
   "  )",
   "  ;",
   "  Object",
   "  injected",
   "  =",
   "  mockCandidateFilter",
   "  .",
   "  filterCandidate",
   "  (",
   "  mocks",
   "  ,",
   "  field",
   "  ,",
   "  fieldInstance",
   "  )",
   "  .",
   "  thenInject",
   "  (",
   "  )",
   "  ;",
   "  mocks",
   "  .",
   "  remove",
   "  (",
   "  injected",
   "  )",
   "  ;",
   "- mocks",
   "- .",
   "- remove",
   "- (",
   "- injected",
   "- )",
   "- ;"
  ]
 },
 {
  "number": 24,
  "changes_set": [
   "  ublic",
   "  Object",
   "  answer",
   "  (",
   "  InvocationOnMock",
   "  invocation",
   "  )",
   "  {",
   "  /",
   "  see",
   "  issue",
   "  184.",
   "  /",
   "  mocks",
   "  by",
   "  default",
   "  should",
   "  return",
   "  0",
   "  if",
   "  references",
   "  are",
   "  the",
   "  same",
   "  ,",
   "  otherwise",
   "  some",
   "  other",
   "  value",
   "  because",
   "  they",
   "  are",
   "  not",
   "  the",
   "  same",
   "  .",
   "  Hence",
   "  we",
   "  return",
   "  1",
   "  (",
   "  anything",
   "  but",
   "  0",
   "  is",
   "  good",
   "  )",
   "  .",
   "  /",
   "  Only",
   "  for",
   "  compareTo",
   "  (",
   "  )",
   "  method",
   "  by",
   "  the",
   "  Comparable",
   "  interfacereturn",
   "- invocation",
   "- .",
   "- getMock",
   "- (",
   "- )",
   "- ==",
   "- invocation",
   "- .",
   "- getArguments",
   "- (",
   "- )",
   "- [",
   "- 0",
   "- ]",
   "- ?",
   "- 0",
   "- :",
   "  1",
   "  ;",
   "  return",
   "  invocation",
   "  .",
   "  getMock",
   "  (",
   "  )",
   "  ==",
   "  invocation",
   "  .",
   "  getArguments",
   "  (",
   "  )",
   "  [",
   "  0",
   "  ]",
   "  ?",
   "  0",
   "  :",
   "  1",
   "  ;",
   "  lass",
   "  <",
   "  ?",
   "  >",
   "  returnType",
   "  =",
   "  invocation",
   "  .",
   "  getMethod",
   "  (",
   "  )",
   "  .",
   "  getReturnType",
   "  (",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 29,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  matches",
   "  (",
   "  Object",
   "  actual",
   "  )",
   "  {",
   "  ublic",
   "  void",
   "  describeTo",
   "  (",
   "  Description",
   "  description",
   "  )",
   "  {",
   "  escription",
   "  .",
   "  appendText",
   "  (",
   "  \"same(\"",
   "  )",
   "  ;",
   "  ppendQuoting",
   "  (",
   "  description",
   "  )",
   "  ;",
   "  description",
   "  .",
   "  appendText",
   "  (",
   "- wanted",
   "- ==",
   "- null",
   "- ?",
   "- \"null\"",
   "- :",
   "  wanted",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  description",
   "  .",
   "  appendText",
   "  (",
   "  wanted",
   "  ==",
   "  null",
   "  ?",
   "  \"null\"",
   "  :",
   "  wanted",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  ppendQuoting",
   "  (",
   "  description",
   "  )",
   "  ;",
   "  escription",
   "  .",
   "  appendText",
   "  (",
   "  \")\"",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 25,
  "changes_set": [
   "  *",
   "  Copyright",
   "  (",
   "  c",
   "  )",
   "  2007",
   "  Mockito",
   "  contributorsThis",
   "  program",
   "  is",
   "  made",
   "  available",
   "  under",
   "  the",
   "  terms",
   "  of",
   "  the",
   "  MIT",
   "  License",
   "  .",
   "  /",
   "  ackage",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  stubbing",
   "  .",
   "  defaultanswers",
   "  ;",
   "  import",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  MockSettings",
   "  ;",
   "- import",
   "- org",
   "- .",
   "- mockito",
   "- .",
   "- MockSettings",
   "- ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  InternalMockHandler",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  creation",
   "  .",
   "  settings",
   "  .",
   "  CreationSettings",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  stubbing",
   "  .",
   "  InvocationContainerImpl",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  stubbing",
   "  .",
   "  StubbedInvocationMatcher",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  util",
   "  .",
   "  MockCreationValidator",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  util",
   "  .",
   "  MockUtil",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  util",
   "  .",
   "  reflection",
   "  .",
   "  GenericMetadataSupport",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  invocation",
   "  .",
   "  InvocationOnMock",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  stubbing",
   "  .",
   "  Answer",
   "  ;",
   "  mport",
   "  java",
   "  .",
   "  io",
   "  .",
   "  Serializable",
   "  ;",
   "  import",
   "  static",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  Mockito",
   "  .",
   "  mock",
   "- ;",
   "- import",
   "- static",
   "- org",
   "- .",
   "- mockito",
   "- .",
   "- Mockito",
   "- .",
   "- mock",
   "- ;",
   "- import",
   "- static",
   "- org",
   "- .",
   "- mockito",
   "- .",
   "- Mockito",
   "- .",
   "- withSettings",
   "  ;",
   "  import",
   "  static",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  Mockito",
   "  .",
   "  withSettings",
   "  ;",
   "  *",
   "  *",
   "  Returning",
   "  deep",
   "  stub",
   "  implementation",
   "  .",
   "  Will",
   "  return",
   "  previously",
   "  created",
   "  mock",
   "  if",
   "  the",
   "  invocation",
   "  matches",
   "  .",
   "  <",
   "  p",
   "  >",
   "  Supports",
   "  nested",
   "  generic",
   "  information",
   "  ,",
   "  with",
   "  this",
   "  answer",
   "  you",
   "  can",
   "  write",
   "  code",
   "  like",
   "  this",
   "  :",
   "  <",
   "  pre",
   "  class",
   "  =",
   "  \"code\"",
   "  >",
   "  <",
   "  code",
   "  class",
   "  =",
   "  \"java\"",
   "  >",
   "  interface",
   "  GenericsNest",
   "  &",
   "  lt",
   "  ;",
   "  K",
   "  extends",
   "  Comparable",
   "  &",
   "  lt",
   "  ;",
   "  K",
   "  &",
   "  gt",
   "  ;",
   "  &",
   "  Cloneable",
   "  &",
   "  gt",
   "  ;",
   "  extends",
   "  Map",
   "  &",
   "  lt",
   "  ;",
   "  K",
   "  ,",
   "  Set",
   "  &",
   "  lt",
   "  ;",
   "  Number",
   "  &",
   "  gt",
   "  ;",
   "  &",
   "  gt",
   "  ;",
   "  {",
   "  }",
   "  GenericsNest",
   "  &",
   "  lt",
   "  ;",
   "  ?",
   "  &",
   "  gt",
   "  ;",
   "  mock",
   "  =",
   "  mock",
   "  (",
   "  GenericsNest",
   "  .",
   "  class",
   "  ,",
   "  new",
   "  ReturnsGenericDeepStubs",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  Number",
   "  number",
   "  =",
   "  mock",
   "  .",
   "  entrySet",
   "  (",
   "  )",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  .",
   "  next",
   "  (",
   "  )",
   "  .",
   "  getValue",
   "  (",
   "  )",
   "  .",
   "  iterator",
   "  (",
   "  )",
   "  .",
   "  next",
   "  (",
   "  )",
   "  ;",
   "  <",
   "  /",
   "  code",
   "  >",
   "  <",
   "  /",
   "  pre",
   "  >",
   "  <",
   "  /",
   "  p",
   "  >"
  ]
 },
 {
  "number": 25,
  "changes_set": [
   "  ee",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  Answers",
   "  RETURNS_DEEP_STUBS",
   "  /",
   "  ublic",
   "  class",
   "  ReturnsDeepStubs",
   "  implements",
   "  Answer",
   "  <",
   "  Object",
   "  >",
   "  ,",
   "  Serializable",
   "  {",
   "  rivate",
   "  static",
   "  final",
   "  long",
   "  serialVersionUID",
   "  =",
   "  -",
   "  7105341425736035847L",
   "  ;",
   "  rivate",
   "  ReturnsEmptyValues",
   "  delegate",
   "  =",
   "  new",
   "  ReturnsEmptyValues",
   "  (",
   "  )",
   "  ;",
   "  ublic",
   "  Object",
   "  answer",
   "  (",
   "  InvocationOnMock",
   "  invocation",
   "  )",
   "  throws",
   "  Throwable",
   "  {",
   "  enericMetadataSupport",
   "  returnTypeGenericMetadata",
   "  =",
   "  ctualParameterizedType",
   "  (",
   "  invocation",
   "  .",
   "  getMock",
   "  (",
   "  )",
   "  )",
   "  .",
   "  resolveGenericReturnType",
   "  (",
   "  invocation",
   "  .",
   "  getMethod",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  lass",
   "  <",
   "  ?",
   "  >",
   "  rawType",
   "  =",
   "  returnTypeGenericMetadata",
   "  .",
   "  rawType",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  !",
   "  new",
   "  MockCreationValidator",
   "  (",
   "  )",
   "  .",
   "  isTypeMockable",
   "  (",
   "  rawType",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  delegate",
   "  .",
   "  returnValueFor",
   "  (",
   "  rawType",
   "  )",
   "  ;",
   "  return",
   "  getMock",
   "  (",
   "  invocation",
   "- ,",
   "- returnTypeGenericMetadata",
   "  )",
   "  ;",
   "  return",
   "  getMock",
   "  (",
   "  invocation",
   "  ,",
   "  returnTypeGenericMetadata",
   "  )",
   "  ;",
   "  private",
   "  Object",
   "  getMock",
   "  (",
   "  InvocationOnMock",
   "  invocation",
   "- ,",
   "- GenericMetadataSupport",
   "- returnTypeGenericMetadata",
   "  )",
   "  throws",
   "  Throwable",
   "  {",
   "  private",
   "  Object",
   "  getMock",
   "  (",
   "  InvocationOnMock",
   "  invocation",
   "  ,",
   "  GenericMetadataSupport",
   "  returnTypeGenericMetadata",
   "  )",
   "  throws",
   "  Throwable",
   "  {",
   "  nternalMockHandler",
   "  <",
   "  Object",
   "  >",
   "  handler",
   "  =",
   "  new",
   "  MockUtil",
   "  (",
   "  )",
   "  .",
   "  getMockHandler",
   "  (",
   "  invocation",
   "  .",
   "  getMock",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  nvocationContainerImpl",
   "  container",
   "  =",
   "  (",
   "  InvocationContainerImpl",
   "  )",
   "  handler",
   "  .",
   "  getInvocationContainer",
   "  (",
   "  )",
   "  ;",
   "  /",
   "  matches",
   "  invocation",
   "  for",
   "  verificationor",
   "  (",
   "  StubbedInvocationMatcher",
   "  stubbedInvocationMatcher",
   "  :",
   "  container",
   "  .",
   "  getStubbedInvocations",
   "  (",
   "  )",
   "  )",
   "  {",
   "  f",
   "  (",
   "  container",
   "  .",
   "  getInvocationForStubbing",
   "  (",
   "  )",
   "  .",
   "  matches",
   "  (",
   "  stubbedInvocationMatcher",
   "  .",
   "  getInvocation",
   "  (",
   "  )",
   "  )",
   "  )",
   "  {",
   "  eturn",
   "  stubbedInvocationMatcher",
   "  .",
   "  answer",
   "  (",
   "  invocation",
   "  )",
   "  ;",
   "  /",
   "  deep",
   "  stubreturn",
   "  recordDeepStubMock",
   "  (",
   "+ invocation",
   "- createNewDeepStubMock",
   "- (",
   "- returnTypeGenericMetadata",
   "- )",
   "  ,",
   "  container",
   "  )",
   "  ;",
   "  return",
   "  recordDeepStubMock",
   "  (",
   "  createNewDeepStubMock",
   "  (",
   "  returnTypeGenericMetadata",
   "  )",
   "  ,",
   "  container",
   "  )",
   "  ;",
   "  *",
   "  *",
   "  Creates",
   "  a",
   "  mock",
   "  using",
   "  the",
   "  Generics",
   "  Metadata",
   "  ."
  ]
 },
 {
  "number": 25,
  "changes_set": [
   "  eturn",
   "  The",
   "  mock",
   "  /",
   "  private",
   "  Object",
   "  createNewDeepStubMock",
   "  (",
   "  GenericMetadataSupport",
   "  returnTypeGenericMetadata",
   "  )",
   "  {",
   "- private",
   "- Object",
   "- createNewDeepStubMock",
   "- (",
   "- GenericMetadataSupport",
   "- returnTypeGenericMetadata",
   "- )",
   "- {",
   "  return",
   "  mock",
   "  (",
   "- return",
   "- mock",
   "- (",
   "- returnTypeGenericMetadata",
   "- .",
   "- rawType",
   "- (",
   "- )",
   "- ,",
   "  returnTypeGenericMetadata",
   "  .",
   "  rawType",
   "  (",
   "  )",
   "  ,",
   "  withSettingsUsing",
   "  (",
   "  returnTypeGenericMetadata",
   "  )",
   "- withSettingsUsing",
   "- (",
   "- returnTypeGenericMetadata",
   "- )",
   "- )",
   "- ;",
   "  )",
   "  ;",
   "  }",
   "- }",
   "- private",
   "- MockSettings",
   "- withSettingsUsing",
   "- (",
   "- GenericMetadataSupport",
   "- returnTypeGenericMetadata",
   "- )",
   "- {",
   "  private",
   "  MockSettings",
   "  withSettingsUsing",
   "  (",
   "  GenericMetadataSupport",
   "  returnTypeGenericMetadata",
   "  )",
   "  {",
   "  MockSettings",
   "  mockSettings",
   "  =",
   "- MockSettings",
   "- mockSettings",
   "- =",
   "- returnTypeGenericMetadata",
   "- .",
   "- rawExtraInterfaces",
   "- (",
   "- )",
   "- .",
   "- length",
   "- >",
   "- 0",
   "- ?",
   "  returnTypeGenericMetadata",
   "  .",
   "  rawExtraInterfaces",
   "  (",
   "  )",
   "  .",
   "  length",
   "  >",
   "  0",
   "  ?",
   "  withSettings",
   "  (",
   "  )",
   "  .",
   "  extraInterfaces",
   "  (",
   "  returnTypeGenericMetadata",
   "  .",
   "  rawExtraInterfaces",
   "  (",
   "  )",
   "  )",
   "- withSettings",
   "- (",
   "- )",
   "- .",
   "- extraInterfaces",
   "- (",
   "- returnTypeGenericMetadata",
   "- .",
   "- rawExtraInterfaces",
   "- (",
   "- )",
   "- )",
   "- :",
   "- withSettings",
   "- (",
   "- )",
   "- ;",
   "  :",
   "  withSettings",
   "  (",
   "  )",
   "  ;",
   "  return",
   "- mockSettingsreturn",
   "  mockSettings",
   "  .",
   "  defaultAnswer",
   "  (",
   "  returnsDeepStubsAnswerUsing",
   "  (",
   "  returnTypeGenericMetadata",
   "  )",
   "  )",
   "  ;",
   "- .",
   "- defaultAnswer",
   "- (",
   "- returnsDeepStubsAnswerUsing",
   "- (",
   "- returnTypeGenericMetadata",
   "- )",
   "- )",
   "- ;",
   "  }",
   "- }",
   "- private",
   "- ReturnsDeepStubs",
   "- returnsDeepStubsAnswerUsing",
   "- (",
   "- final",
   "- GenericMetadataSupport",
   "- returnTypeGenericMetadata",
   "- )",
   "- {",
   "  private",
   "  ReturnsDeepStubs",
   "  returnsDeepStubsAnswerUsing",
   "  (",
   "  final",
   "  GenericMetadataSupport",
   "  returnTypeGenericMetadata",
   "  )",
   "  {",
   "  return",
   "  new",
   "  ReturnsDeepStubs",
   "  (",
   "  )",
   "  {",
   "- return",
   "- new",
   "- ReturnsDeepStubs",
   "- (",
   "- )",
   "- {"
  ]
 },
 {
  "number": 25,
  "changes_set": [
   "  verrideprotected",
   "- GenericMetadataSupport",
   "- actualParameterizedType",
   "- (",
   "- Object",
   "- mock",
   "- )",
   "- {",
   "- protected",
   "  GenericMetadataSupport",
   "  actualParameterizedType",
   "  (",
   "  Object",
   "  mock",
   "  )",
   "  {",
   "  return",
   "  returnTypeGenericMetadata",
   "  ;",
   "- return",
   "- returnTypeGenericMetadata",
   "- ;",
   "- }",
   "  }",
   "  }",
   "  ;",
   "- }",
   "- ;",
   "- }",
   "  }",
   "  private",
   "  Object",
   "  recordDeepStubMock",
   "  (",
   "+ InvocationOnMock",
   "+ invocation",
   "- final",
   "- Object",
   "- mock",
   "  ,",
   "  InvocationContainerImpl",
   "  container",
   "  )",
   "- throws",
   "- Throwable",
   "  {",
   "+ Class",
   "+ <",
   "+ ?",
   "+ >",
   "+ clz",
   "+ =",
   "+ invocation",
   "+ .",
   "+ getMethod",
   "+ (",
   "+ )",
   "+ .",
   "+ getReturnType",
   "+ (",
   "+ )",
   "+ ;",
   "+ final",
   "+ Object",
   "+ mock",
   "+ =",
   "+ org",
   "+ .",
   "+ mockito",
   "+ .",
   "+ Mockito",
   "+ .",
   "+ mock",
   "+ (",
   "+ clz",
   "+ ,",
   "+ this",
   "+ )",
   "+ ;",
   "  private",
   "  Object",
   "  recordDeepStubMock",
   "  (",
   "  final",
   "  Object",
   "  mock",
   "  ,",
   "  InvocationContainerImpl",
   "  container",
   "  )",
   "  throws",
   "  Throwable",
   "  {",
   "  ontainer",
   "  .",
   "  addAnswer",
   "  (",
   "  new",
   "  Answer",
   "  <",
   "  Object",
   "  >",
   "  (",
   "  )",
   "  {"
  ]
 },
 {
  "number": 27,
  "changes_set": [
   "  ublic",
   "  MockUtil",
   "  (",
   "  )",
   "  {",
   "  ublic",
   "  <",
   "  T",
   "  >",
   "  void",
   "  resetMock",
   "  (",
   "  T",
   "  mock",
   "  )",
   "  {",
   "  ockHandlerInterface",
   "  <",
   "  T",
   "  >",
   "  oldMockHandler",
   "  =",
   "  getMockHandler",
   "  (",
   "  mock",
   "  )",
   "  ;",
   "+ MockHandler",
   "+ <",
   "+ T",
   "+ >",
   "+ newMockHandler",
   "+ =",
   "+ new",
   "+ MockHandler",
   "+ <",
   "+ T",
   "+ >",
   "+ (",
   "+ oldMockHandler",
   "+ )",
   "+ ;",
   "  MethodInterceptorFilter",
   "  newFilter",
   "  =",
   "+ new",
   "- newMethodInterceptorFilter",
   "+ MethodInterceptorFilter",
   "  (",
   "- oldMockHandler",
   "+ newMockHandler",
   "+ ,",
   "+ (",
   "+ MockSettingsImpl",
   "+ )",
   "+ org",
   "  .",
   "- getMockSettings",
   "+ mockito",
   "+ .",
   "+ Mockito",
   "+ .",
   "+ withSettings",
   "  (",
   "+ )",
   "+ .",
   "+ defaultAnswer",
   "+ (",
   "+ org",
   "+ .",
   "+ mockito",
   "+ .",
   "+ Mockito",
   "+ .",
   "+ RETURNS_DEFAULTS",
   "  )",
   "  )",
   "  ;",
   "  MethodInterceptorFilter",
   "  newFilter",
   "  =",
   "  newMethodInterceptorFilter",
   "  (",
   "  oldMockHandler",
   "  .",
   "  getMockSettings",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  (",
   "  Factory",
   "  )",
   "  mock",
   "  )",
   "  .",
   "  setCallback",
   "  (",
   "  0",
   "  ,",
   "  newFilter",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 26,
  "changes_set": [
   "  ublic",
   "  static",
   "  boolean",
   "  isPrimitiveWrapper",
   "  (",
   "  Class",
   "  <",
   "  ?",
   "  >",
   "  type",
   "  )",
   "  {",
   "  rimitiveValues",
   "  .",
   "  put",
   "  (",
   "  int",
   "  .",
   "  class",
   "  ,",
   "  0",
   "  )",
   "  ;",
   "  rimitiveValues",
   "  .",
   "  put",
   "  (",
   "  long",
   "  .",
   "  class",
   "  ,",
   "  0L",
   "  )",
   "  ;",
   "  rimitiveValues",
   "  .",
   "  put",
   "  (",
   "  float",
   "  .",
   "  class",
   "  ,",
   "  0F",
   "  )",
   "  ;",
   "  primitiveValues",
   "  .",
   "  put",
   "  (",
   "  double",
   "  .",
   "  class",
   "  ,",
   "- 0D",
   "+ 0",
   "  )",
   "  ;",
   "  primitiveValues",
   "  .",
   "  put",
   "  (",
   "  double",
   "  .",
   "  class",
   "  ,",
   "  0D",
   "  )",
   "  ;",
   "  No",
   "  newline",
   "  at",
   "  end",
   "  of",
   "  file"
  ]
 },
 {
  "number": 32,
  "changes_set": [
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  exceptions",
   "  .",
   "  base",
   "  .",
   "  MockitoException",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  util",
   "  .",
   "  MockUtil",
   "  ;",
   "  import",
   "  static",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  Mockito",
   "  .",
   "  withSettings",
   "  ;",
   "- import",
   "- static",
   "- org",
   "- .",
   "- mockito",
   "- .",
   "- Mockito",
   "- .",
   "- withSettings",
   "- ;"
  ]
 },
 {
  "number": 32,
  "changes_set": [
   "  ublic",
   "  void",
   "  process",
   "  (",
   "  Class",
   "  <",
   "  ?",
   "  >",
   "  context",
   "  ,",
   "  Object",
   "  testClass",
   "  )",
   "  {",
   "  /",
   "  instance",
   "  has",
   "  been",
   "  spied",
   "  earlierockito",
   "  .",
   "  reset",
   "  (",
   "  instance",
   "  )",
   "  ;",
   "  else",
   "  {",
   "  field",
   "  .",
   "  set",
   "  (",
   "  testClass",
   "  ,",
   "  Mockito",
   "  .",
   "- mock",
   "+ spy",
   "  (",
   "  instance",
   "- .",
   "- getClass",
   "- (",
   "  )",
   "- ,",
   "- withSettings",
   "- (",
   "  )",
   "+ ;",
   "  field",
   "  .",
   "  set",
   "  (",
   "  testClass",
   "  ,",
   "  Mockito",
   "  .",
   "  mock",
   "  (",
   "  instance",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  ,",
   "  withSettings",
   "  (",
   "  )",
   "  .",
   "  spiedInstance",
   "  (",
   "  instance",
   "  )",
   "  .",
   "- spiedInstance",
   "- (",
   "- instance",
   "- )",
   "- .",
   "  defaultAnswer",
   "  (",
   "  Mockito",
   "  .",
   "  CALLS_REAL_METHODS",
   "  )",
   "- .",
   "- defaultAnswer",
   "- (",
   "- Mockito",
   "- .",
   "- CALLS_REAL_METHODS",
   "- )",
   "- .",
   "- name",
   "- (",
   "- field",
   "- .",
   "- getName",
   "- (",
   "- )",
   "- )",
   "- )",
   "- )",
   "- ;",
   "  .",
   "  name",
   "  (",
   "  field",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  )",
   "  )",
   "  )",
   "  ;",
   "  catch",
   "  (",
   "  IllegalAccessException",
   "  e",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  MockitoException",
   "  (",
   "  \"Problems initiating spied field \"",
   "  +",
   "  field",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  ,",
   "  e",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 31,
  "changes_set": [
   "  mport",
   "  java",
   "  .",
   "  io",
   "  .",
   "  Serializable",
   "  ;",
   "  mport",
   "  java",
   "  .",
   "  lang",
   "  .",
   "  reflect",
   "  .",
   "  Method",
   "- ;",
   "- import",
   "- java",
   "- .",
   "- util",
   "- .",
   "- Arrays",
   "  ;",
   "  import",
   "  java",
   "  .",
   "  util",
   "  .",
   "  Arrays",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  Mockito",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  cglib",
   "  .",
   "  proxy",
   "  .",
   "  MethodInterceptor",
   "  ;"
  ]
 },
 {
  "number": 31,
  "changes_set": [
   "  ublic",
   "  Object",
   "  intercept",
   "  (",
   "  Object",
   "  obj",
   "  ,",
   "  Method",
   "  method",
   "  ,",
   "  Object",
   "  [",
   "  ]",
   "  args",
   "  ,",
   "  MethodProxy",
   "  prrivate",
   "  String",
   "  formatMethodCall",
   "  (",
   "  )",
   "  {",
   "+ return",
   "- String",
   "- args",
   "- =",
   "- Arrays",
   "- .",
   "- toString",
   "- (",
   "  invocation",
   "  .",
   "- getArguments",
   "+ getMethod",
   "  (",
   "  )",
   "+ .",
   "+ getName",
   "+ (",
   "  )",
   "+ +",
   "+ \"()\"",
   "  ;",
   "  String",
   "  args",
   "  =",
   "  Arrays",
   "  .",
   "  toString",
   "  (",
   "  invocation",
   "  .",
   "  getArguments",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  return",
   "  invocation",
   "  .",
   "  getMethod",
   "  (",
   "  )",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  +",
   "  \"(\"",
   "  +",
   "  args",
   "  .",
   "  substring",
   "  (",
   "  1",
   "  ,",
   "  args",
   "  .",
   "  length",
   "  (",
   "  )",
   "  -",
   "  1",
   "  )",
   "  +",
   "  \")\"",
   "  ;",
   "- return",
   "- invocation",
   "- .",
   "- getMethod",
   "- (",
   "- )",
   "- .",
   "- getName",
   "- (",
   "- )",
   "- +",
   "- \"(\"",
   "- +",
   "- args",
   "- .",
   "- substring",
   "- (",
   "- 1",
   "- ,",
   "- args",
   "- .",
   "- length",
   "- (",
   "- )",
   "- -",
   "- 1",
   "- )",
   "- +",
   "- \")\"",
   "- ;"
  ]
 },
 {
  "number": 34,
  "changes_set": [
   "  ublic",
   "  String",
   "  toString",
   "  (",
   "  PrintSettings",
   "  printSettings",
   "  )",
   "  {",
   "  ublic",
   "  void",
   "  captureArgumentsFrom",
   "  (",
   "  Invocation",
   "  i",
   "  )",
   "  {",
   "  nt",
   "  k",
   "  =",
   "  0",
   "  ;",
   "  or",
   "  (",
   "  Matcher",
   "  m",
   "  :",
   "  matchers",
   "  )",
   "  {",
   "  if",
   "  (",
   "  m",
   "  instanceof",
   "  CapturesArguments",
   "- &&",
   "- i",
   "- .",
   "- getArguments",
   "- (",
   "- )",
   "- .",
   "- length",
   "- >",
   "- k",
   "  )",
   "  {",
   "  if",
   "  (",
   "  m",
   "  instanceof",
   "  CapturesArguments",
   "  &&",
   "  i",
   "  .",
   "  getArguments",
   "  (",
   "  )",
   "  .",
   "  length",
   "  >",
   "  k",
   "  )",
   "  {",
   "  (",
   "  CapturesArguments",
   "  )",
   "  m",
   "  )",
   "  .",
   "  captureFrom",
   "  (",
   "  i",
   "  .",
   "  getArguments",
   "  (",
   "  )",
   "  [",
   "  k",
   "  ]",
   "  )",
   "  ;",
   "  ++",
   "  ;"
  ]
 },
 {
  "number": 36,
  "changes_set": [
   "  mport",
   "  org",
   "  .",
   "  hamcrest",
   "  .",
   "  Matcher",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  exceptions",
   "  .",
   "  PrintableInvocation",
   "- ;",
   "- import",
   "- org",
   "- .",
   "- mockito",
   "- .",
   "- exceptions",
   "- .",
   "- Reporter",
   "  ;",
   "  import",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  exceptions",
   "  .",
   "  Reporter",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  debugging",
   "  .",
   "  Location",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  invocation",
   "  .",
   "  realmethod",
   "  .",
   "  RealMethod",
   "  ;",
   "  mport",
   "  org",
   "  .",
   "  mockito",
   "  .",
   "  internal",
   "  .",
   "  matchers",
   "  .",
   "  *",
   "  ;"
  ]
 },
 {
  "number": 36,
  "changes_set": [
   "  ublic",
   "  int",
   "  getArgumentsCount",
   "  (",
   "  )",
   "  {",
   "  ublic",
   "  Object",
   "  callRealMethod",
   "  (",
   "  )",
   "  throws",
   "  Throwable",
   "  {",
   "  if",
   "  (",
   "  this",
   "  .",
   "  getMethod",
   "  (",
   "  )",
   "  .",
   "  getDeclaringClass",
   "  (",
   "  )",
   "  .",
   "  isInterface",
   "  (",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- this",
   "- .",
   "- getMethod",
   "- (",
   "- )",
   "- .",
   "- getDeclaringClass",
   "- (",
   "- )",
   "- .",
   "- isInterface",
   "- (",
   "- )",
   "- )",
   "- {",
   "  new",
   "  Reporter",
   "  (",
   "  )",
   "  .",
   "  cannotCallRealMethodOnInterface",
   "  (",
   "  )",
   "  ;",
   "- new",
   "- Reporter",
   "- (",
   "- )",
   "- .",
   "- cannotCallRealMethodOnInterface",
   "- (",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  realMethod",
   "  .",
   "  invoke",
   "  (",
   "  mock",
   "  ,",
   "  rawArguments",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 33,
  "changes_set": [
   "  ublic",
   "  boolean",
   "  hasSameMethod",
   "  (",
   "  Invocation",
   "  candidate",
   "  )",
   "  {",
   "  ethod",
   "  m1",
   "  =",
   "  invocation",
   "  .",
   "  getMethod",
   "  (",
   "  )",
   "  ;",
   "  ethod",
   "  m2",
   "  =",
   "  candidate",
   "  .",
   "  getMethod",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  m1",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  !=",
   "  null",
   "  &&",
   "  m1",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  .",
   "  equals",
   "  (",
   "  m2",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- m1",
   "- .",
   "- getName",
   "- (",
   "- )",
   "- !=",
   "- null",
   "- &&",
   "- m1",
   "- .",
   "- getName",
   "- (",
   "- )",
   "- .",
   "- equals",
   "- (",
   "- m2",
   "- .",
   "- getName",
   "- (",
   "- )",
   "- )",
   "- )",
   "- {",
   "  *",
   "  Avoid",
   "  unnecessary",
   "  cloning",
   "  *",
   "  /",
   "+ return",
   "- Class",
   "- [",
   "- ]",
   "- params1",
   "- =",
   "  m1",
   "  .",
   "- getParameterTypes",
   "+ equals",
   "  (",
   "+ m2",
   "  )",
   "  ;",
   "  Class",
   "  [",
   "  ]",
   "  params1",
   "  =",
   "  m1",
   "- .",
   "- getParameterTypes",
   "- (",
   "- )",
   "- ;",
   "- Class",
   "- [",
   "- ]",
   "- params2",
   "- =",
   "- m2",
   "  .",
   "  getParameterTypes",
   "  (",
   "  )",
   "  ;",
   "  Class",
   "  [",
   "  ]",
   "  params2",
   "  =",
   "  m2",
   "  .",
   "  getParameterTypes",
   "  (",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  params1",
   "  .",
   "  length",
   "  ==",
   "  params2",
   "  .",
   "  length",
   "- )",
   "- {",
   "- if",
   "- (",
   "- params1",
   "- .",
   "- length",
   "- ==",
   "- params2",
   "- .",
   "- length",
   "- )",
   "- {",
   "- for",
   "- (",
   "- int",
   "- i",
   "- =",
   "- 0",
   "- ;",
   "- i",
   "- <",
   "- params1",
   "- .",
   "- length",
   "- ;",
   "- i",
   "- ++",
   "  )",
   "  {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  params1",
   "  .",
   "  length",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  if",
   "  (",
   "  params1",
   "  [",
   "  i",
   "  ]",
   "  !=",
   "  params2",
   "  [",
   "  i",
   "  ]",
   "  )",
   "- if",
   "- (",
   "- params1",
   "- [",
   "- i",
   "- ]",
   "- !=",
   "- params2",
   "- [",
   "- i",
   "- ]",
   "- )",
   "- return",
   "- false",
   "- ;",
   "  return",
   "  false",
   "  ;",
   "  }",
   "- }",
   "- return",
   "- true",
   "- ;",
   "  return",
   "  true",
   "  ;",
   "  }",
   "  }",
   "- }",
   "- }",
   "- return",
   "- false",
   "- ;",
   "  return",
   "  false",
   "  ;",
   "  ublic",
   "  Location",
   "  getLocation",
   "  (",
   "  )",
   "  {"
  ]
 },
 {
  "number": 35,
  "changes_set": [
   "  eturn",
   "  <",
   "  code",
   "  >",
   "  null",
   "  <",
   "  /",
   "  code",
   "  >",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  <",
   "  T",
   "  >",
   "  T",
   "  isA",
   "  (",
   "  Class",
   "  <",
   "  T",
   "  >",
   "  clazz",
   "  )",
   "  {",
   "  return",
   "  reportMatcher",
   "  (",
   "  new",
   "  InstanceOf",
   "  (",
   "  clazz",
   "  )",
   "  )",
   "  .",
   "  <",
   "  T",
   "  >",
   "- returnFor",
   "+ returnNull",
   "  (",
   "- clazz",
   "  )",
   "  ;",
   "  return",
   "  reportMatcher",
   "  (",
   "  new",
   "  InstanceOf",
   "  (",
   "  clazz",
   "  )",
   "  )",
   "  .",
   "  <",
   "  T",
   "  >",
   "  returnFor",
   "  (",
   "  clazz",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 35,
  "changes_set": [
   "  eturn",
   "  <",
   "  code",
   "  >",
   "  null",
   "  <",
   "  /",
   "  code",
   "  >",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  <",
   "  T",
   "  >",
   "  T",
   "  eq",
   "  (",
   "  T",
   "  value",
   "  )",
   "  {",
   "  return",
   "- (",
   "- T",
   "- )",
   "  reportMatcher",
   "  (",
   "  new",
   "  Equals",
   "  (",
   "  value",
   "  )",
   "  )",
   "  .",
   "  <",
   "  T",
   "  >",
   "- returnFor",
   "+ returnNull",
   "  (",
   "- (",
   "- Class",
   "- )",
   "- value",
   "- .",
   "- getClass",
   "- (",
   "- )",
   "  )",
   "  ;",
   "  return",
   "  (",
   "  T",
   "  )",
   "  reportMatcher",
   "  (",
   "  new",
   "  Equals",
   "  (",
   "  value",
   "  )",
   "  )",
   "  .",
   "  <",
   "  T",
   "  >",
   "  returnFor",
   "  (",
   "  (",
   "  Class",
   "  )",
   "  value",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 35,
  "changes_set": [
   "  eturn",
   "  <",
   "  code",
   "  >",
   "  null",
   "  <",
   "  /",
   "  code",
   "  >",
   "  .",
   "  /",
   "  ublic",
   "  static",
   "  <",
   "  T",
   "  >",
   "  T",
   "  same",
   "  (",
   "  T",
   "  value",
   "  )",
   "  {",
   "  return",
   "- (",
   "- T",
   "- )",
   "  reportMatcher",
   "  (",
   "  new",
   "  Same",
   "  (",
   "  value",
   "  )",
   "  )",
   "  .",
   "  <",
   "  T",
   "  >",
   "- returnFor",
   "+ returnNull",
   "  (",
   "- (",
   "- Class",
   "- )",
   "- value",
   "- .",
   "- getClass",
   "- (",
   "- )",
   "  )",
   "  ;",
   "  return",
   "  (",
   "  T",
   "  )",
   "  reportMatcher",
   "  (",
   "  new",
   "  Same",
   "  (",
   "  value",
   "  )",
   "  )",
   "  .",
   "  <",
   "  T",
   "  >",
   "  returnFor",
   "  (",
   "  (",
   "  Class",
   "  )",
   "  value",
   "  .",
   "  getClass",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 30,
  "changes_set": [
   "  ublic",
   "  void",
   "  misplacedArgumentMatcher",
   "  (",
   "  Location",
   "  location",
   "  )",
   "  {",
   "  )",
   "  ;",
   "  public",
   "  void",
   "  smartNullPointerException",
   "  (",
   "- Object",
   "- obj",
   "- ,",
   "  Location",
   "  location",
   "  )",
   "  {",
   "  public",
   "  void",
   "  smartNullPointerException",
   "  (",
   "  Object",
   "  obj",
   "  ,",
   "  Location",
   "  location",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  SmartNullPointerException",
   "  (",
   "  join",
   "  (",
   "  You",
   "  have",
   "  a",
   "  NullPointerException",
   "  here",
   "  :",
   "- \",ew Location(),obj,obj,Because this method was *not* stubbed correctly:\"",
   "+ \",ew Location(),obj,Because this method was *not* stubbed correctly:\"",
   "  ,",
   "  ocation",
   "  ,"
  ]
 },
 {
  "number": 30,
  "changes_set": [
   "  ublic",
   "  Object",
   "  intercept",
   "  (",
   "  Object",
   "  obj",
   "  ,",
   "  Method",
   "  method",
   "  ,",
   "  Object",
   "  [",
   "  ]",
   "  args",
   "  ,",
   "  MethodProxy",
   "  preturn",
   "  \"SmartNull returned by unstubbed \"",
   "  +",
   "  formatMethodCall",
   "  (",
   "  )",
   "  +",
   "  \" method on mock\"",
   "  ;",
   "  new",
   "  Reporter",
   "  (",
   "  )",
   "  .",
   "  smartNullPointerException",
   "  (",
   "- obj",
   "- ,",
   "  location",
   "  )",
   "  ;",
   "  new",
   "  Reporter",
   "  (",
   "  )",
   "  .",
   "  smartNullPointerException",
   "  (",
   "  obj",
   "  ,",
   "  location",
   "  )",
   "  ;",
   "  eturn",
   "  null",
   "  ;"
  ]
 },
 {
  "number": 38,
  "changes_set": [
   "  rivate",
   "  boolean",
   "  safelyMatches",
   "  (",
   "  Matcher",
   "  m",
   "  ,",
   "  Object",
   "  arg",
   "  )",
   "  {",
   "  rivate",
   "  boolean",
   "  toStringEquals",
   "  (",
   "  Matcher",
   "  m",
   "  ,",
   "  Object",
   "  arg",
   "  )",
   "  {",
   "  return",
   "  StringDescription",
   "  .",
   "  toString",
   "  (",
   "  m",
   "  )",
   "  .",
   "  equals",
   "  (",
   "  arg",
   "- ==",
   "- null",
   "- ?",
   "- \"null\"",
   "- :",
   "- arg",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  return",
   "  StringDescription",
   "  .",
   "  toString",
   "  (",
   "  m",
   "  )",
   "  .",
   "  equals",
   "  (",
   "  arg",
   "  ==",
   "  null",
   "  ?",
   "  \"null\"",
   "  :",
   "  arg",
   "  .",
   "  toString",
   "  (",
   "  )",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 5,
  "changes_set": [
   "  ublic",
   "  Period",
   "  normalizedStandard",
   "  (",
   "  PeriodType",
   "  type",
   "  )",
   "  {",
   "  nt",
   "  years",
   "  =",
   "  getYears",
   "  (",
   "  )",
   "  ;",
   "  nt",
   "  months",
   "  =",
   "  getMonths",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  years",
   "  !=",
   "  0",
   "  ||",
   "  months",
   "  !=",
   "  0",
   "  )",
   "  {",
   "+ years",
   "- long",
   "- totalMonths",
   "  =",
   "+ FieldUtils",
   "+ .",
   "+ safeAdd",
   "+ (",
   "  years",
   "+ ,",
   "- *",
   "- 12L",
   "- +",
   "  months",
   "+ /",
   "+ 12",
   "+ )",
   "+ ;",
   "+ months",
   "+ =",
   "+ months",
   "+ %",
   "+ 12",
   "+ ;",
   "+ if",
   "+ (",
   "+ years",
   "+ !=",
   "+ 0",
   "+ )",
   "+ {",
   "+ result",
   "+ =",
   "+ result",
   "+ .",
   "+ withYears",
   "+ (",
   "+ years",
   "+ )",
   "  ;",
   "  long",
   "  totalMonths",
   "  =",
   "  years",
   "  *",
   "  12L",
   "  +",
   "  months",
   "  ;",
   "- if",
   "- (",
   "- type",
   "- .",
   "- isSupported",
   "- (",
   "- DurationFieldType",
   "- .",
   "- YEARS_TYPE",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  type",
   "  .",
   "  isSupported",
   "  (",
   "  DurationFieldType",
   "  .",
   "  YEARS_TYPE",
   "  )",
   "  )",
   "  {",
   "  int",
   "  normalizedYears",
   "  =",
   "  FieldUtils",
   "  .",
   "  safeToInt",
   "  (",
   "  totalMonths",
   "  /",
   "  12",
   "  )",
   "  ;",
   "- int",
   "- normalizedYears",
   "- =",
   "- FieldUtils",
   "- .",
   "- safeToInt",
   "- (",
   "- totalMonths",
   "- /",
   "- 12",
   "- )",
   "- ;",
   "- result",
   "- =",
   "- result",
   "- .",
   "- withYears",
   "- (",
   "- normalizedYears",
   "- )",
   "- ;",
   "  result",
   "  =",
   "  result",
   "  .",
   "  withYears",
   "  (",
   "  normalizedYears",
   "  )",
   "  ;",
   "  totalMonths",
   "  =",
   "  totalMonths",
   "  -",
   "  (",
   "  normalizedYears",
   "  *",
   "  12",
   "  )",
   "  ;",
   "- totalMonths",
   "+ if",
   "+ (",
   "+ months",
   "+ !=",
   "+ 0",
   "+ )",
   "+ {",
   "+ result",
   "  =",
   "- totalMonths",
   "- -",
   "+ result",
   "+ .",
   "+ withMonths",
   "  (",
   "+ months",
   "- normalizedYears",
   "- *",
   "- 12",
   "  )",
   "  ;",
   "- if",
   "- (",
   "- type",
   "- .",
   "- isSupported",
   "- (",
   "- DurationFieldType",
   "- .",
   "- MONTHS_TYPE",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  type",
   "  .",
   "  isSupported",
   "  (",
   "  DurationFieldType",
   "  .",
   "  MONTHS_TYPE",
   "  )",
   "  )",
   "  {",
   "  int",
   "  normalizedMonths",
   "  =",
   "  FieldUtils",
   "  .",
   "  safeToInt",
   "  (",
   "  totalMonths",
   "  )",
   "  ;",
   "- int",
   "- normalizedMonths",
   "- =",
   "- FieldUtils",
   "- .",
   "- safeToInt",
   "- (",
   "- totalMonths",
   "- )",
   "- ;",
   "- result",
   "- =",
   "- result",
   "- .",
   "- withMonths",
   "- (",
   "- normalizedMonths",
   "- )",
   "- ;",
   "  result",
   "  =",
   "  result",
   "  .",
   "  withMonths",
   "  (",
   "  normalizedMonths",
   "  )",
   "  ;",
   "  totalMonths",
   "  =",
   "  totalMonths",
   "  -",
   "  normalizedMonths",
   "  ;",
   "- totalMonths",
   "- =",
   "- totalMonths",
   "- -",
   "- normalizedMonths",
   "- ;",
   "  }",
   "- }",
   "- if",
   "- (",
   "- totalMonths",
   "- !=",
   "- 0",
   "- )",
   "- {",
   "  if",
   "  (",
   "  totalMonths",
   "  !=",
   "  0",
   "  )",
   "  {",
   "  throw",
   "  new",
   "  UnsupportedOperationException",
   "  (",
   "  \"Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: \"",
   "  +",
   "  toString",
   "  (",
   "  )",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- UnsupportedOperationException",
   "- (",
   "- \"Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: \"",
   "- +",
   "- toString",
   "- (",
   "- )",
   "- )",
   "- ;",
   "  eturn",
   "  result",
   "  ;"
  ]
 },
 {
  "number": 3,
  "changes_set": [
   "  ublic",
   "  void",
   "  add",
   "  (",
   "  DurationFieldType",
   "  type",
   "  ,",
   "  int",
   "  amount",
   "  )",
   "  {",
   "  f",
   "  (",
   "  type",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Field must not be null\"",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  amount",
   "  !=",
   "  0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- amount",
   "- !=",
   "- 0",
   "- )",
   "- {",
   "  etMillis",
   "  (",
   "  type",
   "  .",
   "  getField",
   "  (",
   "  getChronology",
   "  (",
   "  )",
   "  )",
   "  .",
   "  add",
   "  (",
   "  getMillis",
   "  (",
   "  )",
   "  ,",
   "  amount",
   "  )",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  /",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -"
  ]
 },
 {
  "number": 3,
  "changes_set": [
   "  hrows",
   "  IllegalArgumentException",
   "  if",
   "  the",
   "  value",
   "  is",
   "  invalid",
   "  /",
   "  ublic",
   "  void",
   "  addYears",
   "  (",
   "  final",
   "  int",
   "  years",
   "- )",
   "- {",
   "- if",
   "- (",
   "- years",
   "- !=",
   "- 0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  years",
   "  !=",
   "  0",
   "  )",
   "  {",
   "  etMillis",
   "  (",
   "  getChronology",
   "  (",
   "  )",
   "  .",
   "  years",
   "  (",
   "  )",
   "  .",
   "  add",
   "  (",
   "  getMillis",
   "  (",
   "  )",
   "  ,",
   "  years",
   "  )",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  /",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -"
  ]
 },
 {
  "number": 3,
  "changes_set": [
   "  hrows",
   "  IllegalArgumentException",
   "  if",
   "  the",
   "  value",
   "  is",
   "  invalid",
   "  /",
   "  ublic",
   "  void",
   "  addWeekyears",
   "  (",
   "  final",
   "  int",
   "  weekyears",
   "- )",
   "- {",
   "- if",
   "- (",
   "- weekyears",
   "- !=",
   "- 0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  weekyears",
   "  !=",
   "  0",
   "  )",
   "  {",
   "  etMillis",
   "  (",
   "  getChronology",
   "  (",
   "  )",
   "  .",
   "  weekyears",
   "  (",
   "  )",
   "  .",
   "  add",
   "  (",
   "  getMillis",
   "  (",
   "  )",
   "  ,",
   "  weekyears",
   "  )",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  /",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -"
  ]
 },
 {
  "number": 3,
  "changes_set": [
   "  hrows",
   "  IllegalArgumentException",
   "  if",
   "  the",
   "  value",
   "  is",
   "  invalid",
   "  /",
   "  ublic",
   "  void",
   "  addMonths",
   "  (",
   "  final",
   "  int",
   "  months",
   "- )",
   "- {",
   "- if",
   "- (",
   "- months",
   "- !=",
   "- 0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  months",
   "  !=",
   "  0",
   "  )",
   "  {",
   "  etMillis",
   "  (",
   "  getChronology",
   "  (",
   "  )",
   "  .",
   "  months",
   "  (",
   "  )",
   "  .",
   "  add",
   "  (",
   "  getMillis",
   "  (",
   "  )",
   "  ,",
   "  months",
   "  )",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  /",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -"
  ]
 },
 {
  "number": 3,
  "changes_set": [
   "  hrows",
   "  IllegalArgumentException",
   "  if",
   "  the",
   "  value",
   "  is",
   "  invalid",
   "  /",
   "  ublic",
   "  void",
   "  addWeeks",
   "  (",
   "  final",
   "  int",
   "  weeks",
   "- )",
   "- {",
   "- if",
   "- (",
   "- weeks",
   "- !=",
   "- 0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  weeks",
   "  !=",
   "  0",
   "  )",
   "  {",
   "  etMillis",
   "  (",
   "  getChronology",
   "  (",
   "  )",
   "  .",
   "  weeks",
   "  (",
   "  )",
   "  .",
   "  add",
   "  (",
   "  getMillis",
   "  (",
   "  )",
   "  ,",
   "  weeks",
   "  )",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  /",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -"
  ]
 },
 {
  "number": 3,
  "changes_set": [
   "  hrows",
   "  IllegalArgumentException",
   "  if",
   "  the",
   "  value",
   "  is",
   "  invalid",
   "  /",
   "  ublic",
   "  void",
   "  addDays",
   "  (",
   "  final",
   "  int",
   "  days",
   "- )",
   "- {",
   "- if",
   "- (",
   "- days",
   "- !=",
   "- 0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  days",
   "  !=",
   "  0",
   "  )",
   "  {",
   "  etMillis",
   "  (",
   "  getChronology",
   "  (",
   "  )",
   "  .",
   "  days",
   "  (",
   "  )",
   "  .",
   "  add",
   "  (",
   "  getMillis",
   "  (",
   "  )",
   "  ,",
   "  days",
   "  )",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  /",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -"
  ]
 },
 {
  "number": 3,
  "changes_set": [
   "  hrows",
   "  IllegalArgumentException",
   "  if",
   "  the",
   "  value",
   "  is",
   "  invalid",
   "  /",
   "  ublic",
   "  void",
   "  addHours",
   "  (",
   "  final",
   "  int",
   "  hours",
   "- )",
   "- {",
   "- if",
   "- (",
   "- hours",
   "- !=",
   "- 0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  hours",
   "  !=",
   "  0",
   "  )",
   "  {",
   "  etMillis",
   "  (",
   "  getChronology",
   "  (",
   "  )",
   "  .",
   "  hours",
   "  (",
   "  )",
   "  .",
   "  add",
   "  (",
   "  getMillis",
   "  (",
   "  )",
   "  ,",
   "  hours",
   "  )",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  /",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -"
  ]
 },
 {
  "number": 3,
  "changes_set": [
   "  hrows",
   "  IllegalArgumentException",
   "  if",
   "  the",
   "  value",
   "  is",
   "  invalid",
   "  /",
   "  ublic",
   "  void",
   "  addMinutes",
   "  (",
   "  final",
   "  int",
   "  minutes",
   "- )",
   "- {",
   "- if",
   "- (",
   "- minutes",
   "- !=",
   "- 0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  minutes",
   "  !=",
   "  0",
   "  )",
   "  {",
   "  etMillis",
   "  (",
   "  getChronology",
   "  (",
   "  )",
   "  .",
   "  minutes",
   "  (",
   "  )",
   "  .",
   "  add",
   "  (",
   "  getMillis",
   "  (",
   "  )",
   "  ,",
   "  minutes",
   "  )",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  /",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -"
  ]
 },
 {
  "number": 3,
  "changes_set": [
   "  hrows",
   "  IllegalArgumentException",
   "  if",
   "  the",
   "  value",
   "  is",
   "  invalid",
   "  /",
   "  ublic",
   "  void",
   "  addSeconds",
   "  (",
   "  final",
   "  int",
   "  seconds",
   "- )",
   "- {",
   "- if",
   "- (",
   "- seconds",
   "- !=",
   "- 0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  seconds",
   "  !=",
   "  0",
   "  )",
   "  {",
   "  etMillis",
   "  (",
   "  getChronology",
   "  (",
   "  )",
   "  .",
   "  seconds",
   "  (",
   "  )",
   "  .",
   "  add",
   "  (",
   "  getMillis",
   "  (",
   "  )",
   "  ,",
   "  seconds",
   "  )",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  /",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -"
  ]
 },
 {
  "number": 3,
  "changes_set": [
   "  hrows",
   "  IllegalArgumentException",
   "  if",
   "  the",
   "  value",
   "  is",
   "  invalid",
   "  /",
   "  ublic",
   "  void",
   "  addMillis",
   "  (",
   "  final",
   "  int",
   "  millis",
   "- )",
   "- {",
   "- if",
   "- (",
   "- millis",
   "- !=",
   "- 0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  millis",
   "  !=",
   "  0",
   "  )",
   "  {",
   "  etMillis",
   "  (",
   "  getChronology",
   "  (",
   "  )",
   "  .",
   "  millis",
   "  (",
   "  )",
   "  .",
   "  add",
   "  (",
   "  getMillis",
   "  (",
   "  )",
   "  ,",
   "  millis",
   "  )",
   "  )",
   "  ;",
   "- }",
   "  }",
   "  /",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  --",
   "  -"
  ]
 },
 {
  "number": 1,
  "changes_set": [
   "  ublic",
   "  Partial",
   "  (",
   "  DateTimeFieldType",
   "  [",
   "  ]",
   "  types",
   "  ,",
   "  int",
   "  [",
   "  ]",
   "  values",
   "  ,",
   "  Chronology",
   "  chronology",
   "  )",
   "  {",
   "  ateTimeFieldType",
   "  loopType",
   "  =",
   "  types",
   "  [",
   "  i",
   "  ]",
   "  ;",
   "  urationField",
   "  loopUnitField",
   "  =",
   "  loopType",
   "  .",
   "  getDurationType",
   "  (",
   "  )",
   "  .",
   "  getField",
   "  (",
   "  iChronology",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  i",
   "  >",
   "  0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  loopUnitField",
   "  .",
   "  isSupported",
   "  (",
   "  )",
   "  ==",
   "  false",
   "  )",
   "  {",
   "  if",
   "  (",
   "- loopUnitField",
   "+ lastUnitField",
   "  .",
   "  isSupported",
   "  (",
   "  )",
   "- ==",
   "- false",
   "- )",
   "- {",
   "- if",
   "- (",
   "- lastUnitField",
   "- .",
   "- isSupported",
   "- (",
   "- )",
   "- )",
   "- {",
   "- if",
   "- (",
   "- lastUnitField",
   "- .",
   "- isSupported",
   "- (",
   "- )",
   "  )",
   "  {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Types array must be in order largest-smallest: \"",
   "  +",
   "+ types",
   "+ [",
   "+ i",
   "+ -",
   "+ 1",
   "+ ]",
   "+ .",
   "+ getName",
   "+ (",
   "+ )",
   "+ +",
   "+ \" < \"",
   "+ +",
   "+ loopType",
   "+ .",
   "+ getName",
   "+ (",
   "+ )",
   "+ )",
   "+ ;",
   "+ }",
   "+ else",
   "+ {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "- \"Types array must be in order largest-smallest: \"",
   "- +",
   "- types",
   "- [",
   "- i",
   "- -",
   "- 1",
   "- ]",
   "- .",
   "- getName",
   "- (",
   "- )",
   "- +",
   "- \" < \"",
   "- +",
   "- loopType",
   "- .",
   "- getName",
   "- (",
   "- )",
   "- )",
   "- ;",
   "- types",
   "- [",
   "- i",
   "- -",
   "- 1",
   "- ]",
   "- .",
   "- getName",
   "- (",
   "- )",
   "- +",
   "- \" < \"",
   "- +",
   "- loopType",
   "- .",
   "- getName",
   "- (",
   "- )",
   "- )",
   "- ;",
   "- }",
   "- else",
   "- {",
   "- }",
   "- else",
   "- {",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "  \"Types array must not contain duplicate unsupported: \"",
   "  +",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"Types array must not contain duplicate unsupported: \"",
   "- +",
   "  types",
   "  [",
   "  i",
   "  -",
   "  1",
   "  ]",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  +",
   "  \" and \"",
   "  +",
   "  loopType",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  )",
   "  ;",
   "- types",
   "- [",
   "- i",
   "- -",
   "- 1",
   "- ]",
   "- .",
   "- getName",
   "- (",
   "- )",
   "- +",
   "- \" and \"",
   "- +",
   "- loopType",
   "- .",
   "- getName",
   "- (",
   "- )",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  nt",
   "  compare",
   "  =",
   "  lastUnitField",
   "  .",
   "  compareTo",
   "  (",
   "  loopUnitField",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  compare",
   "  <",
   "  0",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Types array must be in order largest-smallest: \"",
   "  +",
   "  ypes",
   "  [",
   "  i",
   "  -",
   "  1",
   "  ]",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  +",
   "  \" < \"",
   "  +",
   "  loopType",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  }",
   "  else",
   "  if",
   "  (",
   "  compare",
   "  ==",
   "  0",
   "+ )",
   "+ {",
   "+ }",
   "+ else",
   "+ if",
   "+ (",
   "+ compare",
   "+ ==",
   "+ 0",
   "  &&",
   "  lastUnitField",
   "  .",
   "  equals",
   "  (",
   "  loopUnitField",
   "  )",
   "  )",
   "  {",
   "- }",
   "- else",
   "- if",
   "- (",
   "- compare",
   "- ==",
   "- 0",
   "- &&",
   "- lastUnitField",
   "- .",
   "- equals",
   "- (",
   "- loopUnitField",
   "- )",
   "- )",
   "- {",
   "  f",
   "  (",
   "  types",
   "  [",
   "  i",
   "  -",
   "  1",
   "  ]",
   "  .",
   "  getRangeDurationType",
   "  (",
   "  )",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  f",
   "  (",
   "  loopType",
   "  .",
   "  getRangeDurationType",
   "  (",
   "  )",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Types array must not contain duplicate: \"",
   "  +"
  ]
 },
 {
  "number": 1,
  "changes_set": [
   "  eturn",
   "  zero",
   "  always",
   "  /",
   "  ublic",
   "  int",
   "  compareTo",
   "  (",
   "  DurationField",
   "  durationField",
   "  )",
   "  {",
   "+ if",
   "+ (",
   "+ durationField",
   "+ .",
   "+ isSupported",
   "+ (",
   "+ )",
   "+ )",
   "+ {",
   "+ return",
   "+ 1",
   "+ ;",
   "+ }",
   "  eturn",
   "  0",
   "  ;"
  ]
 },
 {
  "number": 4,
  "changes_set": [
   "  ublic",
   "  Partial",
   "  with",
   "  (",
   "  DateTimeFieldType",
   "  fieldType",
   "  ,",
   "  int",
   "  value",
   "  )",
   "  {",
   "  ystem",
   "  .",
   "  arraycopy",
   "  (",
   "  iValues",
   "  ,",
   "  i",
   "  ,",
   "  newValues",
   "  ,",
   "  i",
   "  +",
   "  1",
   "  ,",
   "  newValues",
   "  .",
   "  length",
   "  -",
   "  i",
   "  -",
   "  1",
   "  )",
   "  ;",
   "  /",
   "  use",
   "  public",
   "  constructor",
   "  to",
   "  ensure",
   "  full",
   "  validation",
   "  /",
   "  this",
   "  isn",
   "  overly",
   "  efficient",
   "  ,",
   "  but",
   "  is",
   "  safePartial",
   "  newPartial",
   "  =",
   "  new",
   "  Partial",
   "  (",
   "+ iChronology",
   "+ ,",
   "  newTypes",
   "  ,",
   "  newValues",
   "- ,",
   "- iChronology",
   "  )",
   "  ;",
   "  Partial",
   "  newPartial",
   "  =",
   "  new",
   "  Partial",
   "  (",
   "  newTypes",
   "  ,",
   "  newValues",
   "  ,",
   "  iChronology",
   "  )",
   "  ;",
   "  Chronology",
   "  .",
   "  validate",
   "  (",
   "  newPartial",
   "  ,",
   "  newValues",
   "  )",
   "  ;",
   "  eturn",
   "  newPartial",
   "  ;"
  ]
 },
 {
  "number": 37,
  "changes_set": [
   "  ublic",
   "  void",
   "  validate",
   "  (",
   "  Answer",
   "  <",
   "  ?",
   "  >",
   "  answer",
   "  ,",
   "  Invocation",
   "  invocation",
   "  )",
   "  {",
   "  alidateDoNothing",
   "  (",
   "  (",
   "  DoesNothing",
   "  )",
   "  answer",
   "  ,",
   "  invocation",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  answer",
   "  instanceof",
   "  CallsRealMethods",
   "  )",
   "  {",
   "- if",
   "- (",
   "- answer",
   "- instanceof",
   "- CallsRealMethods",
   "- )",
   "- {",
   "- validateMockingConcreteClass",
   "- (",
   "- (",
   "- CallsRealMethods",
   "- )",
   "- answer",
   "- ,",
   "- invocation",
   "- )",
   "- ;",
   "  validateMockingConcreteClass",
   "  (",
   "  (",
   "  CallsRealMethods",
   "  )",
   "  answer",
   "  ,",
   "  invocation",
   "  )",
   "  ;",
   "  }",
   "- }",
   "- private",
   "- void",
   "- validateMockingConcreteClass",
   "- (",
   "- CallsRealMethods",
   "- answer",
   "- ,",
   "- Invocation",
   "- invocation",
   "- )",
   "- {",
   "  private",
   "  void",
   "  validateMockingConcreteClass",
   "  (",
   "  CallsRealMethods",
   "  answer",
   "  ,",
   "  Invocation",
   "  invocation",
   "  )",
   "  {",
   "  if",
   "  (",
   "  invocation",
   "  .",
   "  getMethod",
   "  (",
   "  )",
   "  .",
   "  getDeclaringClass",
   "  (",
   "  )",
   "  .",
   "  isInterface",
   "  (",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- invocation",
   "- .",
   "- getMethod",
   "- (",
   "- )",
   "- .",
   "- getDeclaringClass",
   "- (",
   "- )",
   "- .",
   "- isInterface",
   "- (",
   "- )",
   "- )",
   "- {",
   "  reporter",
   "  .",
   "  cannotCallRealMethodOnInterface",
   "  (",
   "  )",
   "  ;",
   "- reporter",
   "- .",
   "- cannotCallRealMethodOnInterface",
   "- (",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  rivate",
   "  void",
   "  validateDoNothing",
   "  (",
   "  DoesNothing",
   "  answer",
   "  ,",
   "  Invocation",
   "  invocation",
   "  )",
   "  {",
   "  f",
   "  (",
   "  !",
   "  invocation",
   "  .",
   "  isVoid",
   "  (",
   "  )",
   "  )",
   "  {"
  ]
 },
 {
  "number": 2,
  "changes_set": [
   "  ublic",
   "  Partial",
   "  (",
   "  DateTimeFieldType",
   "  [",
   "  ]",
   "  types",
   "  ,",
   "  int",
   "  [",
   "  ]",
   "  values",
   "  ,",
   "  Chronology",
   "  chronology",
   "  )",
   "  {",
   "  urationField",
   "  loopUnitField",
   "  =",
   "  loopType",
   "  .",
   "  getDurationType",
   "  (",
   "  )",
   "  .",
   "  getField",
   "  (",
   "  iChronology",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  i",
   "  >",
   "  0",
   "  )",
   "  {",
   "  nt",
   "  compare",
   "  =",
   "  lastUnitField",
   "  .",
   "  compareTo",
   "  (",
   "  loopUnitField",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  compare",
   "  <",
   "  0",
   "+ ||",
   "+ (",
   "+ compare",
   "+ !=",
   "+ 0",
   "+ &&",
   "+ loopUnitField",
   "+ .",
   "+ isSupported",
   "+ (",
   "+ )",
   "+ ==",
   "+ false",
   "+ )",
   "  )",
   "  {",
   "  if",
   "  (",
   "  compare",
   "  <",
   "  0",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Types array must be in order largest-smallest: \"",
   "  +",
   "  ypes",
   "  [",
   "  i",
   "  -",
   "  1",
   "  ]",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  +",
   "  \" < \"",
   "  +",
   "  loopType",
   "  .",
   "  getName",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  else",
   "  if",
   "  (",
   "  compare",
   "  ==",
   "  0",
   "  )",
   "  {"
  ]
 },
 {
  "number": 2,
  "changes_set": [
   "  ublic",
   "  Partial",
   "  with",
   "  (",
   "  DateTimeFieldType",
   "  fieldType",
   "  ,",
   "  int",
   "  value",
   "  )",
   "  {",
   "  f",
   "  (",
   "  compare",
   "  >",
   "  0",
   "  )",
   "  {",
   "  reak",
   "  ;",
   "  else",
   "  if",
   "  (",
   "  compare",
   "  ==",
   "  0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  fieldType",
   "  .",
   "  getRangeDurationType",
   "  (",
   "  )",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- fieldType",
   "- .",
   "- getRangeDurationType",
   "- (",
   "- )",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  break",
   "  ;",
   "- break",
   "- ;",
   "- }",
   "  }",
   "  urationField",
   "  rangeField",
   "  =",
   "  fieldType",
   "  .",
   "  getRangeDurationType",
   "  (",
   "  )",
   "  .",
   "  getField",
   "  (",
   "  iChronology",
   "  )",
   "  ;",
   "  urationField",
   "  loopRangeField",
   "  =",
   "  loopType",
   "  .",
   "  getRangeDurationType",
   "  (",
   "  )",
   "  .",
   "  getField",
   "  (",
   "  iChronology",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  rangeField",
   "  .",
   "  compareTo",
   "  (",
   "  loopRangeField",
   "  )",
   "  >",
   "  0",
   "  )",
   "  {"
  ]
 },
 {
  "number": 2,
  "changes_set": [
   "  eturn",
   "  zero",
   "  always",
   "  /",
   "  ublic",
   "  int",
   "  compareTo",
   "  (",
   "  DurationField",
   "  durationField",
   "  )",
   "  {",
   "  if",
   "  (",
   "  durationField",
   "  .",
   "  isSupported",
   "  (",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- durationField",
   "- .",
   "- isSupported",
   "- (",
   "- )",
   "- )",
   "- {",
   "- return",
   "- 1",
   "- ;",
   "  return",
   "  1",
   "  ;",
   "  }",
   "- }",
   "  eturn",
   "  0",
   "  ;"
  ]
 },
 {
  "number": 8,
  "changes_set": [
   "  ublic",
   "  static",
   "  DateTimeZone",
   "  forOffsetHoursMinutes",
   "  (",
   "  int",
   "  hoursOffset",
   "  ,",
   "  int",
   "  minutesOfff",
   "  (",
   "  hoursOffset",
   "  <",
   "  -",
   "  23",
   "  ||",
   "  hoursOffset",
   "  >",
   "  23",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Hours out of range: \"",
   "  +",
   "  hoursOffset",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  minutesOffset",
   "  <",
   "+ 0",
   "- -",
   "- 59",
   "  ||",
   "  minutesOffset",
   "  >",
   "  59",
   "  )",
   "  {",
   "  if",
   "  (",
   "  minutesOffset",
   "  <",
   "  -",
   "  59",
   "  ||",
   "  minutesOffset",
   "  >",
   "  59",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Minutes out of range: \"",
   "  +",
   "  minutesOffset",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  hoursOffset",
   "  >",
   "  0",
   "  &&",
   "  minutesOffset",
   "  <",
   "  0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- hoursOffset",
   "- >",
   "- 0",
   "- &&",
   "- minutesOffset",
   "- <",
   "- 0",
   "- )",
   "- {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Positive hours must not have negative minutes: \"",
   "  +",
   "  minutesOffset",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"Positive hours must not have negative minutes: \"",
   "- +",
   "- minutesOffset",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  nt",
   "  offset",
   "  =",
   "  0",
   "  ;",
   "  ry",
   "  {",
   "  nt",
   "  hoursInMinutes",
   "  =",
   "  hoursOffset",
   "  *",
   "  60",
   "  ;",
   "  f",
   "  (",
   "  hoursInMinutes",
   "  <",
   "  0",
   "  )",
   "  {",
   "  minutesOffset",
   "  =",
   "  hoursInMinutes",
   "  -",
   "- Math",
   "- .",
   "- abs",
   "- (",
   "  minutesOffset",
   "- )",
   "  ;",
   "  minutesOffset",
   "  =",
   "  hoursInMinutes",
   "  -",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  minutesOffset",
   "  )",
   "  ;",
   "  else",
   "  {",
   "  inutesOffset",
   "  =",
   "  hoursInMinutes",
   "  +",
   "  minutesOffset",
   "  ;"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  ublic",
   "  static",
   "  synchronized",
   "  GJChronology",
   "  getInstance",
   "  (",
   "  utoverInstant",
   "  =",
   "  DEFAULT_CUTOVER",
   "  ;",
   "  else",
   "  {",
   "  utoverInstant",
   "  =",
   "  gregorianCutover",
   "  .",
   "  toInstant",
   "  (",
   "  )",
   "  ;",
   "  LocalDate",
   "  cutoverDate",
   "  =",
   "  new",
   "  LocalDate",
   "  (",
   "  cutoverInstant",
   "  .",
   "  getMillis",
   "  (",
   "  )",
   "  ,",
   "  GregorianChronology",
   "  .",
   "  getInstance",
   "  (",
   "  zone",
   "  )",
   "  )",
   "  ;",
   "- LocalDate",
   "- cutoverDate",
   "- =",
   "- new",
   "- LocalDate",
   "- (",
   "- cutoverInstant",
   "- .",
   "- getMillis",
   "- (",
   "- )",
   "- ,",
   "- GregorianChronology",
   "- .",
   "- getInstance",
   "- (",
   "- zone",
   "- )",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- cutoverDate",
   "- .",
   "- getYear",
   "- (",
   "- )",
   "- <=",
   "- 0",
   "- )",
   "- {",
   "  if",
   "  (",
   "  cutoverDate",
   "  .",
   "  getYear",
   "  (",
   "  )",
   "  <=",
   "  0",
   "  )",
   "  {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Cutover too early. Must be on or after 0001-01-01.\"",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"Cutover too early. Must be on or after 0001-01-01.\"",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  JChronology",
   "  chrono",
   "  ;"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  ublic",
   "  long",
   "  add",
   "  (",
   "  long",
   "  instant",
   "  ,",
   "  int",
   "  value",
   "  )",
   "  {",
   "  f",
   "  (",
   "  instant",
   "  <",
   "  iCutover",
   "  )",
   "  {",
   "  /",
   "  Only",
   "  adjust",
   "  if",
   "  gap",
   "  fully",
   "  crossed",
   "  .",
   "  f",
   "  (",
   "  instant",
   "  +",
   "  iGapDuration",
   "  <",
   "  iCutover",
   "  )",
   "  {",
   "  if",
   "  (",
   "  iConvertByWeekyear",
   "  )",
   "  {",
   "- if",
   "- (",
   "- iConvertByWeekyear",
   "- )",
   "- {",
   "  int",
   "  wyear",
   "  =",
   "  iGregorianChronology",
   "  .",
   "  weekyear",
   "  (",
   "  )",
   "  .",
   "  get",
   "  (",
   "  instant",
   "  )",
   "  ;",
   "- int",
   "- wyear",
   "- =",
   "- iGregorianChronology",
   "- .",
   "- weekyear",
   "- (",
   "- )",
   "- .",
   "- get",
   "- (",
   "- instant",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- wyear",
   "- <=",
   "- 0",
   "- )",
   "- {",
   "  if",
   "  (",
   "  wyear",
   "  <=",
   "  0",
   "  )",
   "  {",
   "  instant",
   "  =",
   "  iGregorianChronology",
   "  .",
   "  weekyear",
   "  (",
   "  )",
   "  .",
   "  add",
   "  (",
   "  instant",
   "  ,",
   "  -",
   "  1",
   "  )",
   "  ;",
   "- instant",
   "- =",
   "- iGregorianChronology",
   "- .",
   "- weekyear",
   "- (",
   "- )",
   "- .",
   "- add",
   "- (",
   "- instant",
   "- ,",
   "- -",
   "- 1",
   "- )",
   "- ;",
   "  }",
   "- }",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  int",
   "  year",
   "  =",
   "  iGregorianChronology",
   "  .",
   "  year",
   "  (",
   "  )",
   "  .",
   "  get",
   "  (",
   "  instant",
   "  )",
   "  ;",
   "- int",
   "- year",
   "- =",
   "- iGregorianChronology",
   "- .",
   "- year",
   "- (",
   "- )",
   "- .",
   "- get",
   "- (",
   "- instant",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- year",
   "- <=",
   "- 0",
   "- )",
   "- {",
   "  if",
   "  (",
   "  year",
   "  <=",
   "  0",
   "  )",
   "  {",
   "  instant",
   "  =",
   "  iGregorianChronology",
   "  .",
   "  year",
   "  (",
   "  )",
   "  .",
   "  add",
   "  (",
   "  instant",
   "  ,",
   "  -",
   "  1",
   "  )",
   "  ;",
   "- instant",
   "- =",
   "- iGregorianChronology",
   "- .",
   "- year",
   "- (",
   "- )",
   "- .",
   "- add",
   "- (",
   "- instant",
   "- ,",
   "- -",
   "- 1",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  nstant",
   "  =",
   "  gregorianToJulian",
   "  (",
   "  instant",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 6,
  "changes_set": [
   "  ublic",
   "  long",
   "  add",
   "  (",
   "  long",
   "  instant",
   "  ,",
   "  long",
   "  value",
   "  )",
   "  {",
   "  f",
   "  (",
   "  instant",
   "  <",
   "  iCutover",
   "  )",
   "  {",
   "  /",
   "  Only",
   "  adjust",
   "  if",
   "  gap",
   "  fully",
   "  crossed",
   "  .",
   "  f",
   "  (",
   "  instant",
   "  +",
   "  iGapDuration",
   "  <",
   "  iCutover",
   "  )",
   "  {",
   "  if",
   "  (",
   "  iConvertByWeekyear",
   "  )",
   "  {",
   "- if",
   "- (",
   "- iConvertByWeekyear",
   "- )",
   "- {",
   "  int",
   "  wyear",
   "  =",
   "  iGregorianChronology",
   "  .",
   "  weekyear",
   "  (",
   "  )",
   "  .",
   "  get",
   "  (",
   "  instant",
   "  )",
   "  ;",
   "- int",
   "- wyear",
   "- =",
   "- iGregorianChronology",
   "- .",
   "- weekyear",
   "- (",
   "- )",
   "- .",
   "- get",
   "- (",
   "- instant",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- wyear",
   "- <=",
   "- 0",
   "- )",
   "- {",
   "  if",
   "  (",
   "  wyear",
   "  <=",
   "  0",
   "  )",
   "  {",
   "  instant",
   "  =",
   "  iGregorianChronology",
   "  .",
   "  weekyear",
   "  (",
   "  )",
   "  .",
   "  add",
   "  (",
   "  instant",
   "  ,",
   "  -",
   "  1",
   "  )",
   "  ;",
   "- instant",
   "- =",
   "- iGregorianChronology",
   "- .",
   "- weekyear",
   "- (",
   "- )",
   "- .",
   "- add",
   "- (",
   "- instant",
   "- ,",
   "- -",
   "- 1",
   "- )",
   "- ;",
   "  }",
   "- }",
   "- }",
   "- else",
   "- {",
   "  }",
   "  else",
   "  {",
   "  int",
   "  year",
   "  =",
   "  iGregorianChronology",
   "  .",
   "  year",
   "  (",
   "  )",
   "  .",
   "  get",
   "  (",
   "  instant",
   "  )",
   "  ;",
   "- int",
   "- year",
   "- =",
   "- iGregorianChronology",
   "- .",
   "- year",
   "- (",
   "- )",
   "- .",
   "- get",
   "- (",
   "- instant",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- year",
   "- <=",
   "- 0",
   "- )",
   "- {",
   "  if",
   "  (",
   "  year",
   "  <=",
   "  0",
   "  )",
   "  {",
   "  instant",
   "  =",
   "  iGregorianChronology",
   "  .",
   "  year",
   "  (",
   "  )",
   "  .",
   "  add",
   "  (",
   "  instant",
   "  ,",
   "  -",
   "  1",
   "  )",
   "  ;",
   "- instant",
   "- =",
   "- iGregorianChronology",
   "- .",
   "- year",
   "- (",
   "- )",
   "- .",
   "- add",
   "- (",
   "- instant",
   "- ,",
   "- -",
   "- 1",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  nstant",
   "  =",
   "  gregorianToJulian",
   "  (",
   "  instant",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 7,
  "changes_set": [
   "  ublic",
   "  int",
   "  parseInto",
   "  (",
   "  ReadWritableInstant",
   "  instant",
   "  ,",
   "  String",
   "  text",
   "  ,",
   "  int",
   "  position",
   "  )",
   "  {",
   "  ong",
   "  instantMillis",
   "  =",
   "  instant",
   "  .",
   "  getMillis",
   "  (",
   "  )",
   "  ;",
   "  hronology",
   "  chrono",
   "  =",
   "  instant",
   "  .",
   "  getChronology",
   "  (",
   "  )",
   "  ;",
   "  int",
   "  defaultYear",
   "  =",
   "  DateTimeUtils",
   "  .",
   "  getChronology",
   "  (",
   "  chrono",
   "  )",
   "  .",
   "  year",
   "  (",
   "  )",
   "  .",
   "  get",
   "  (",
   "  instantMillis",
   "  )",
   "  ;",
   "- int",
   "- defaultYear",
   "- =",
   "- DateTimeUtils",
   "- .",
   "- getChronology",
   "- (",
   "- chrono",
   "- )",
   "- .",
   "- year",
   "- (",
   "- )",
   "- .",
   "- get",
   "- (",
   "- instantMillis",
   "- )",
   "- ;",
   "  ong",
   "  instantLocal",
   "  =",
   "  instantMillis",
   "  +",
   "  chrono",
   "  .",
   "  getZone",
   "  (",
   "  )",
   "  .",
   "  getOffset",
   "  (",
   "  instantMillis",
   "  )",
   "  ;",
   "  hrono",
   "  =",
   "  selectChronology",
   "  (",
   "  chrono",
   "  )",
   "  ;",
   "+ int",
   "+ defaultYear",
   "+ =",
   "+ chrono",
   "+ .",
   "+ year",
   "+ (",
   "+ )",
   "+ .",
   "+ get",
   "+ (",
   "+ instantLocal",
   "+ )",
   "+ ;",
   "  ateTimeParserBucket",
   "  bucket",
   "  =",
   "  new",
   "  DateTimeParserBucket",
   "  (",
   "  nstantLocal",
   "  ,",
   "  chrono",
   "  ,",
   "  iLocale",
   "  ,",
   "  iPivotYear",
   "  ,",
   "  defaultYear",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 9,
  "changes_set": [
   "  ublic",
   "  static",
   "  DateTimeZone",
   "  forOffsetHoursMinutes",
   "  (",
   "  int",
   "  hoursOffset",
   "  ,",
   "  int",
   "  minutesOfff",
   "  (",
   "  hoursOffset",
   "  ==",
   "  0",
   "  &&",
   "  minutesOffset",
   "  ==",
   "  0",
   "  )",
   "  {",
   "  eturn",
   "  DateTimeZone",
   "  .",
   "  UTC",
   "  ;",
   "  if",
   "  (",
   "  hoursOffset",
   "  <",
   "  -",
   "  23",
   "  ||",
   "  hoursOffset",
   "  >",
   "  23",
   "  )",
   "  {",
   "- if",
   "- (",
   "- hoursOffset",
   "- <",
   "- -",
   "- 23",
   "- ||",
   "- hoursOffset",
   "- >",
   "- 23",
   "- )",
   "- {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Hours out of range: \"",
   "  +",
   "  hoursOffset",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"Hours out of range: \"",
   "- +",
   "- hoursOffset",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  f",
   "  (",
   "  minutesOffset",
   "  <",
   "  0",
   "  ||",
   "  minutesOffset",
   "  >",
   "  59",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Minutes out of range: \"",
   "  +",
   "  minutesOffset",
   "  )",
   "  ;",
   "  nt",
   "  offset",
   "  =",
   "  0",
   "  ;",
   "  ry",
   "  {",
   "  int",
   "  hoursInMinutes",
   "  =",
   "+ FieldUtils",
   "+ .",
   "+ safeMultiply",
   "+ (",
   "  hoursOffset",
   "- *",
   "+ ,",
   "  60",
   "+ )",
   "  ;",
   "  int",
   "  hoursInMinutes",
   "  =",
   "  hoursOffset",
   "  *",
   "  60",
   "  ;",
   "  f",
   "  (",
   "  hoursInMinutes",
   "  <",
   "  0",
   "  )",
   "  {",
   "  minutesOffset",
   "  =",
   "+ FieldUtils",
   "+ .",
   "+ safeAdd",
   "+ (",
   "  hoursInMinutes",
   "+ ,",
   "  -",
   "  minutesOffset",
   "+ )",
   "  ;",
   "  minutesOffset",
   "  =",
   "  hoursInMinutes",
   "  -",
   "  minutesOffset",
   "  ;",
   "  else",
   "  {",
   "  minutesOffset",
   "  =",
   "+ FieldUtils",
   "+ .",
   "+ safeAdd",
   "+ (",
   "  hoursInMinutes",
   "- +",
   "+ ,",
   "  minutesOffset",
   "+ )",
   "  ;",
   "  minutesOffset",
   "  =",
   "  hoursInMinutes",
   "  +",
   "  minutesOffset",
   "  ;",
   "  ffset",
   "  =",
   "  FieldUtils",
   "  .",
   "  safeMultiply",
   "  (",
   "  minutesOffset",
   "  ,",
   "  DateTimeConstants",
   "  .",
   "  MILLIS_PER_MINUTE",
   "  )",
   "  ;",
   "  catch",
   "  (",
   "  ArithmeticException",
   "  ex",
   "  )",
   "  {"
  ]
 },
 {
  "number": 9,
  "changes_set": [
   "  eturn",
   "  the",
   "  DateTimeZone",
   "  object",
   "  for",
   "  the",
   "  offset",
   "  /",
   "  ublic",
   "  static",
   "  DateTimeZone",
   "  forOffsetMillis",
   "  (",
   "  int",
   "  millisOffset",
   "  )",
   "  {",
   "  if",
   "  (",
   "  millisOffset",
   "  <",
   "  -",
   "  MAX_MILLIS",
   "  ||",
   "  millisOffset",
   "  >",
   "  MAX_MILLIS",
   "  )",
   "  {",
   "- if",
   "- (",
   "- millisOffset",
   "- <",
   "- -",
   "- MAX_MILLIS",
   "- ||",
   "- millisOffset",
   "- >",
   "- MAX_MILLIS",
   "- )",
   "- {",
   "  throw",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"Millis out of range: \"",
   "  +",
   "  millisOffset",
   "  )",
   "  ;",
   "- throw",
   "- new",
   "- IllegalArgumentException",
   "- (",
   "- \"Millis out of range: \"",
   "- +",
   "- millisOffset",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  tring",
   "  id",
   "  =",
   "  printOffset",
   "  (",
   "  millisOffset",
   "  )",
   "  ;",
   "  eturn",
   "  fixedOffsetZone",
   "  (",
   "  id",
   "  ,",
   "  millisOffset",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 10,
  "changes_set": [
   "  *",
   "  *",
   "  Serialization",
   "  version",
   "  .",
   "  *",
   "  /",
   "  rivate",
   "  static",
   "  final",
   "  long",
   "  serialVersionUID",
   "  =",
   "  9386874258972L",
   "  ;",
   "  *",
   "  *",
   "  The",
   "  start",
   "  of",
   "  1972.",
   "  *",
   "  /",
   "  private",
   "  static",
   "  final",
   "  long",
   "  START_1972",
   "  =",
   "  2L",
   "  *",
   "  365L",
   "  *",
   "  86400L",
   "  *",
   "  1000L",
   "  ;",
   "- private",
   "- static",
   "- final",
   "- long",
   "- START_1972",
   "- =",
   "- 2L",
   "- *",
   "- 365L",
   "- *",
   "- 86400L",
   "- *",
   "- 1000L",
   "- ;",
   "  *",
   "  *",
   "  The",
   "  period",
   "  in",
   "  the",
   "  units",
   "  of",
   "  this",
   "  period",
   "  .",
   "  *",
   "  /",
   "  rivate",
   "  volatile",
   "  int",
   "  iPeriod",
   "  ;"
  ]
 },
 {
  "number": 10,
  "changes_set": [
   "  rotected",
   "  static",
   "  int",
   "  between",
   "  (",
   "  ReadablePartial",
   "  start",
   "  ,",
   "  ReadablePartial",
   "  end",
   "  ,",
   "  Readablhrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"ReadablePartial objects must be contiguous\"",
   "  )",
   "  ;",
   "  hronology",
   "  chrono",
   "  =",
   "  DateTimeUtils",
   "  .",
   "  getChronology",
   "  (",
   "  start",
   "  .",
   "  getChronology",
   "  (",
   "  )",
   "  )",
   "  .",
   "  withUTC",
   "  (",
   "  )",
   "  ;",
   "  int",
   "  [",
   "  ]",
   "  values",
   "  =",
   "  chrono",
   "  .",
   "  get",
   "  (",
   "  zeroInstance",
   "  ,",
   "  chrono",
   "  .",
   "  set",
   "  (",
   "  start",
   "  ,",
   "- START_1972",
   "+ 0L",
   "  )",
   "  ,",
   "  chrono",
   "  .",
   "  set",
   "  (",
   "  end",
   "  ,",
   "- START_1972",
   "+ 0L",
   "  )",
   "  )",
   "  ;",
   "  int",
   "  [",
   "  ]",
   "  values",
   "  =",
   "  chrono",
   "  .",
   "  get",
   "  (",
   "  zeroInstance",
   "  ,",
   "  chrono",
   "  .",
   "  set",
   "  (",
   "  start",
   "  ,",
   "  START_1972",
   "  )",
   "  ,",
   "  chrono",
   "  .",
   "  set",
   "  (",
   "  end",
   "  ,",
   "  START_1972",
   "  )",
   "  )",
   "  ;",
   "  eturn",
   "  values",
   "  [",
   "  0",
   "  ]",
   "  ;"
  ]
 },
 {
  "number": 12,
  "changes_set": [
   "  ublic",
   "  static",
   "  LocalDate",
   "  fromCalendarFields",
   "  (",
   "  Calendar",
   "  calendar",
   "  )",
   "  {",
   "  f",
   "  (",
   "  calendar",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"The calendar must not be null\"",
   "  )",
   "  ;",
   "  int",
   "  era",
   "  =",
   "  calendar",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  ERA",
   "  )",
   "  ;",
   "- int",
   "- era",
   "- =",
   "- calendar",
   "- .",
   "- get",
   "- (",
   "- Calendar",
   "- .",
   "- ERA",
   "- )",
   "- ;",
   "  nt",
   "  yearOfEra",
   "  =",
   "  calendar",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  YEAR",
   "  )",
   "  ;",
   "  eturn",
   "  new",
   "  LocalDate",
   "  (",
   "- (",
   "- era",
   "- ==",
   "- GregorianCalendar",
   "- .",
   "- AD",
   "- ?",
   "  yearOfEra",
   "- :",
   "- 1",
   "- -",
   "- yearOfEra",
   "- )",
   "  ,",
   "  (",
   "  era",
   "  ==",
   "  GregorianCalendar",
   "  .",
   "  AD",
   "  ?",
   "  yearOfEra",
   "  :",
   "  1",
   "  -",
   "  yearOfEra",
   "  )",
   "  ,",
   "  alendar",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  MONTH",
   "  )",
   "  +",
   "  1",
   "  ,",
   "  alendar",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  DAY_OF_MONTH",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 12,
  "changes_set": [
   "  ublic",
   "  static",
   "  LocalDate",
   "  fromDateFields",
   "  (",
   "  Date",
   "  date",
   "  )",
   "  {",
   "  f",
   "  (",
   "  date",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"The date must not be null\"",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  date",
   "  .",
   "  getTime",
   "  (",
   "  )",
   "  <",
   "  0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- date",
   "- .",
   "- getTime",
   "- (",
   "- )",
   "- <",
   "- 0",
   "- )",
   "- {",
   "  /",
   "  handle",
   "  years",
   "  in",
   "  era",
   "  BCGregorianCalendar",
   "  cal",
   "  =",
   "  new",
   "  GregorianCalendar",
   "  (",
   "- )",
   "- ;",
   "- GregorianCalendar",
   "- cal",
   "- =",
   "- new",
   "- GregorianCalendar",
   "- (",
   "- )",
   "- ;",
   "- cal",
   "- .",
   "- setTime",
   "- (",
   "- date",
   "  )",
   "  ;",
   "  cal",
   "  .",
   "  setTime",
   "  (",
   "  date",
   "  )",
   "  ;",
   "  return",
   "  fromCalendarFields",
   "  (",
   "  cal",
   "  )",
   "  ;",
   "- return",
   "- fromCalendarFields",
   "- (",
   "- cal",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  new",
   "  LocalDate",
   "  (",
   "  ate",
   "  .",
   "  getYear",
   "  (",
   "  )",
   "  +",
   "  1900",
   "  ,",
   "  ate",
   "  .",
   "  getMonth",
   "  (",
   "  )",
   "  +",
   "  1",
   "  ,"
  ]
 },
 {
  "number": 12,
  "changes_set": [
   "  ublic",
   "  static",
   "  LocalDateTime",
   "  fromCalendarFields",
   "  (",
   "  Calendar",
   "  calendar",
   "  )",
   "  {",
   "  f",
   "  (",
   "  calendar",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"The calendar must not be null\"",
   "  )",
   "  ;",
   "  int",
   "  era",
   "  =",
   "  calendar",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  ERA",
   "  )",
   "  ;",
   "- int",
   "- era",
   "- =",
   "- calendar",
   "- .",
   "- get",
   "- (",
   "- Calendar",
   "- .",
   "- ERA",
   "- )",
   "- ;",
   "  nt",
   "  yearOfEra",
   "  =",
   "  calendar",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  YEAR",
   "  )",
   "  ;",
   "  eturn",
   "  new",
   "  LocalDateTime",
   "  (",
   "- (",
   "- era",
   "- ==",
   "- GregorianCalendar",
   "- .",
   "- AD",
   "- ?",
   "  yearOfEra",
   "- :",
   "- 1",
   "- -",
   "- yearOfEra",
   "- )",
   "  ,",
   "  (",
   "  era",
   "  ==",
   "  GregorianCalendar",
   "  .",
   "  AD",
   "  ?",
   "  yearOfEra",
   "  :",
   "  1",
   "  -",
   "  yearOfEra",
   "  )",
   "  ,",
   "  alendar",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  MONTH",
   "  )",
   "  +",
   "  1",
   "  ,",
   "  alendar",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  DAY_OF_MONTH",
   "  )",
   "  ,",
   "  alendar",
   "  .",
   "  get",
   "  (",
   "  Calendar",
   "  .",
   "  HOUR_OF_DAY",
   "  )",
   "  ,"
  ]
 },
 {
  "number": 12,
  "changes_set": [
   "  ublic",
   "  static",
   "  LocalDateTime",
   "  fromDateFields",
   "  (",
   "  Date",
   "  date",
   "  )",
   "  {",
   "  f",
   "  (",
   "  date",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalArgumentException",
   "  (",
   "  \"The date must not be null\"",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  date",
   "  .",
   "  getTime",
   "  (",
   "  )",
   "  <",
   "  0",
   "  )",
   "  {",
   "- if",
   "- (",
   "- date",
   "- .",
   "- getTime",
   "- (",
   "- )",
   "- <",
   "- 0",
   "- )",
   "- {",
   "  /",
   "  handle",
   "  years",
   "  in",
   "  era",
   "  BCGregorianCalendar",
   "  cal",
   "  =",
   "  new",
   "  GregorianCalendar",
   "  (",
   "- )",
   "- ;",
   "- GregorianCalendar",
   "- cal",
   "- =",
   "- new",
   "- GregorianCalendar",
   "- (",
   "- )",
   "- ;",
   "- cal",
   "- .",
   "- setTime",
   "- (",
   "- date",
   "  )",
   "  ;",
   "  cal",
   "  .",
   "  setTime",
   "  (",
   "  date",
   "  )",
   "  ;",
   "  return",
   "  fromCalendarFields",
   "  (",
   "  cal",
   "  )",
   "  ;",
   "- return",
   "- fromCalendarFields",
   "- (",
   "- cal",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  new",
   "  LocalDateTime",
   "  (",
   "  ate",
   "  .",
   "  getYear",
   "  (",
   "  )",
   "  +",
   "  1900",
   "  ,",
   "  ate",
   "  .",
   "  getMonth",
   "  (",
   "  )",
   "  +",
   "  1",
   "  ,"
  ]
 },
 {
  "number": 11,
  "changes_set": [
   "  tatic",
   "  Chronology",
   "  cLenientISO",
   "  ;",
   "  static",
   "  ThreadLocal",
   "  <",
   "  Boolean",
   "  >",
   "  cVerbose",
   "  =",
   "  new",
   "  ThreadLocal",
   "  <",
   "  Boolean",
   "  >",
   "  (",
   "  )",
   "+ ;",
   "+ static",
   "  {",
   "+ cVerbose",
   "+ .",
   "+ set",
   "+ (",
   "+ Boolean",
   "+ .",
   "+ FALSE",
   "+ )",
   "+ ;",
   "+ }",
   "  static",
   "  ThreadLocal",
   "  <",
   "  Boolean",
   "  >",
   "  cVerbose",
   "  =",
   "  new",
   "  ThreadLocal",
   "  <",
   "  Boolean",
   "  >",
   "  (",
   "  )",
   "  {",
   "  protected",
   "  Boolean",
   "  initialValue",
   "  (",
   "  )",
   "  {",
   "- protected",
   "- Boolean",
   "- initialValue",
   "- (",
   "- )",
   "- {",
   "- return",
   "- Boolean",
   "- .",
   "- FALSE",
   "- ;",
   "  return",
   "  Boolean",
   "  .",
   "  FALSE",
   "  ;",
   "  }",
   "- }",
   "- }",
   "- ;",
   "  }",
   "  ;",
   "  *",
   "  *",
   "  Gets",
   "  a",
   "  flag",
   "  indicating",
   "  that",
   "  verbose",
   "  logging",
   "  is",
   "  required",
   "  ."
  ]
 },
 {
  "number": 14,
  "changes_set": [
   "  ublic",
   "  long",
   "  add",
   "  (",
   "  long",
   "  instant",
   "  ,",
   "  long",
   "  months",
   "  )",
   "  {",
   "  f",
   "  (",
   "  valueToAdd",
   "  ==",
   "  0",
   "  )",
   "  {",
   "  eturn",
   "  values",
   "  ;",
   "- if",
   "- (",
   "- partial",
   "- .",
   "- size",
   "- (",
   "- )",
   "- >",
   "- 0",
   "- &&",
   "- partial",
   "- .",
   "- getFieldType",
   "- (",
   "- 0",
   "- )",
   "- .",
   "- equals",
   "- (",
   "- DateTimeFieldType",
   "- .",
   "- monthOfYear",
   "- (",
   "- )",
   "- )",
   "- &&",
   "- fieldIndex",
   "- ==",
   "- 0",
   "- )",
   "- {",
   "  if",
   "  (",
   "  partial",
   "  .",
   "  size",
   "  (",
   "  )",
   "  >",
   "  0",
   "  &&",
   "  partial",
   "  .",
   "  getFieldType",
   "  (",
   "  0",
   "  )",
   "  .",
   "  equals",
   "  (",
   "  DateTimeFieldType",
   "  .",
   "  monthOfYear",
   "  (",
   "  )",
   "  )",
   "  &&",
   "  fieldIndex",
   "  ==",
   "  0",
   "  )",
   "  {",
   "  /",
   "  month",
   "  is",
   "  largest",
   "  field",
   "  and",
   "  being",
   "  added",
   "  to",
   "  ,",
   "  such",
   "  as",
   "  month",
   "  -",
   "  dayint",
   "  curMonth0",
   "  =",
   "  partial",
   "  .",
   "  getValue",
   "  (",
   "  0",
   "  )",
   "  -",
   "  1",
   "  ;",
   "  int",
   "- curMonth0",
   "- =",
   "- partial",
   "- .",
   "- getValue",
   "- (",
   "- 0",
   "- )",
   "- -",
   "- 1",
   "- ;",
   "- int",
   "- newMonth",
   "- =",
   "- (",
   "- (",
   "- curMonth0",
   "- +",
   "- (",
   "- valueToAdd",
   "- %",
   "- 12",
   "- )",
   "- +",
   "- 12",
   "- )",
   "- %",
   "- 12",
   "- )",
   "- +",
   "- 1",
   "- ;",
   "- int",
   "  newMonth",
   "  =",
   "  (",
   "  (",
   "  curMonth0",
   "  +",
   "  (",
   "  valueToAdd",
   "  %",
   "  12",
   "  )",
   "  +",
   "  12",
   "  )",
   "  %",
   "  12",
   "  )",
   "  +",
   "  1",
   "  ;",
   "  return",
   "  set",
   "  (",
   "  partial",
   "  ,",
   "  0",
   "  ,",
   "  values",
   "  ,",
   "  newMonth",
   "  )",
   "  ;",
   "- return",
   "- set",
   "- (",
   "- partial",
   "- ,",
   "- 0",
   "- ,",
   "- values",
   "- ,",
   "- newMonth",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  f",
   "  (",
   "  DateTimeUtils",
   "  .",
   "  isContiguous",
   "  (",
   "  partial",
   "  )",
   "  )",
   "  {",
   "  ong",
   "  instant",
   "  =",
   "  0L",
   "  ;",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ,",
   "  isize",
   "  =",
   "  partial",
   "  .",
   "  size",
   "  (",
   "  )",
   "  ;",
   "  i",
   "  <",
   "  isize",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {"
  ]
 },
 {
  "number": 13,
  "changes_set": [
   "  ublic",
   "  int",
   "  calculatePrintedLength",
   "  (",
   "  ReadablePeriod",
   "  period",
   "  ,",
   "  Locale",
   "  locale",
   "  )",
   "  {",
   "  f",
   "  (",
   "  iFieldType",
   "  >=",
   "  SECONDS_MILLIS",
   "  )",
   "  {",
   "  /",
   "  valueLong",
   "  contains",
   "  the",
   "  seconds",
   "  and",
   "  millis",
   "  fields",
   "  /",
   "  the",
   "  minimum",
   "  output",
   "  is",
   "  0.000",
   "  ,",
   "  which",
   "  is",
   "  4",
   "  or",
   "  5",
   "  digits",
   "  with",
   "  a",
   "  negativesum",
   "  =",
   "- (",
   "- valueLong",
   "- <",
   "- 0",
   "- ?",
   "- Math",
   "- .",
   "- max",
   "- (",
   "- sum",
   "- ,",
   "- 5",
   "- )",
   "- :",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  sum",
   "  ,",
   "  4",
   "- )",
   "  )",
   "  ;",
   "  sum",
   "  =",
   "  (",
   "  valueLong",
   "  <",
   "  0",
   "  ?",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  sum",
   "  ,",
   "  5",
   "  )",
   "  :",
   "  Math",
   "  .",
   "  max",
   "  (",
   "  sum",
   "  ,",
   "  4",
   "  )",
   "  )",
   "  ;",
   "  /",
   "  plus",
   "  one",
   "  for",
   "  the",
   "  decimal",
   "  pointum",
   "  ++",
   "  ;",
   "  f",
   "  (",
   "  iFieldType",
   "  ==",
   "  SECONDS_OPTIONAL_MILLIS",
   "  &&"
  ]
 },
 {
  "number": 13,
  "changes_set": [
   "  ublic",
   "  void",
   "  printTo",
   "  (",
   "  StringBuffer",
   "  buf",
   "  ,",
   "  ReadablePeriod",
   "  period",
   "  ,",
   "  Locale",
   "  locale",
   "  )",
   "  {",
   "  f",
   "  (",
   "  iPrefix",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  Prefix",
   "  .",
   "  printTo",
   "  (",
   "  buf",
   "  ,",
   "  value",
   "  )",
   "  ;",
   "  int",
   "  bufLen",
   "  =",
   "  buf",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "- int",
   "- bufLen",
   "- =",
   "- buf",
   "- .",
   "- length",
   "- (",
   "- )",
   "- ;",
   "  nt",
   "  minDigits",
   "  =",
   "  iMinPrintedDigits",
   "  ;",
   "  f",
   "  (",
   "  minDigits",
   "  <=",
   "  1",
   "  )",
   "  {",
   "  ormatUtils",
   "  .",
   "  appendUnpaddedInteger",
   "  (",
   "  buf",
   "  ,",
   "  value",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 13,
  "changes_set": [
   "  ublic",
   "  void",
   "  printTo",
   "  (",
   "  StringBuffer",
   "  buf",
   "  ,",
   "  ReadablePeriod",
   "  period",
   "  ,",
   "  Locale",
   "  locale",
   "  )",
   "  {",
   "  f",
   "  (",
   "  iFieldType",
   "  >=",
   "  SECONDS_MILLIS",
   "  )",
   "  {",
   "  nt",
   "  dp",
   "  =",
   "  (",
   "  int",
   "  )",
   "  (",
   "  Math",
   "  .",
   "  abs",
   "  (",
   "  valueLong",
   "  )",
   "  %",
   "  DateTimeConstants",
   "  .",
   "  MILLIS_PER_SECOND",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  iFieldType",
   "  ==",
   "  SECONDS_MILLIS",
   "  ||",
   "  dp",
   "  >",
   "  0",
   "  )",
   "  {",
   "  if",
   "  (",
   "  valueLong",
   "  <",
   "  0",
   "  &&",
   "  valueLong",
   "  >",
   "  -",
   "  DateTimeConstants",
   "  .",
   "  MILLIS_PER_SECOND",
   "  )",
   "  {",
   "- if",
   "- (",
   "- valueLong",
   "- <",
   "- 0",
   "- &&",
   "- valueLong",
   "- >",
   "- -",
   "- DateTimeConstants",
   "- .",
   "- MILLIS_PER_SECOND",
   "- )",
   "- {",
   "  buf",
   "  .",
   "  insert",
   "  (",
   "  bufLen",
   "  ,",
   "  '-'",
   "  )",
   "  ;",
   "- buf",
   "- .",
   "- insert",
   "- (",
   "- bufLen",
   "- ,",
   "- '-'",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  uf",
   "  .",
   "  append",
   "  (",
   "  '.'",
   "  )",
   "  ;",
   "  ormatUtils",
   "  .",
   "  appendPaddedInteger",
   "  (",
   "  buf",
   "  ,",
   "  dp",
   "  ,",
   "  3",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 15,
  "changes_set": [
   "  ublic",
   "  static",
   "  int",
   "  safeMultiply",
   "  (",
   "  int",
   "  val1",
   "  ,",
   "  int",
   "  val2",
   "  )",
   "  {",
   "  ublic",
   "  static",
   "  long",
   "  safeMultiply",
   "  (",
   "  long",
   "  val1",
   "  ,",
   "  int",
   "  val2",
   "  )",
   "  {",
   "  witch",
   "  (",
   "  val2",
   "  )",
   "  {",
   "  ase",
   "  -",
   "  1",
   "  :",
   "  if",
   "  (",
   "  val1",
   "  ==",
   "  Long",
   "  .",
   "  MIN_VALUE",
   "  )",
   "  {",
   "- if",
   "- (",
   "- val1",
   "- ==",
   "- Long",
   "- .",
   "- MIN_VALUE",
   "- )",
   "- {",
   "- throw",
   "- new",
   "- ArithmeticException",
   "- (",
   "- \"Multiplication overflows a long: \"",
   "- +",
   "- val1",
   "- +",
   "- \" * \"",
   "- +",
   "- val2",
   "- )",
   "- ;",
   "  throw",
   "  new",
   "  ArithmeticException",
   "  (",
   "  \"Multiplication overflows a long: \"",
   "  +",
   "  val1",
   "  +",
   "  \" * \"",
   "  +",
   "  val2",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  eturn",
   "  -",
   "  val1",
   "  ;",
   "  ase",
   "  0",
   "  :",
   "  eturn",
   "  0L",
   "  ;"
  ]
 },
 {
  "number": 17,
  "changes_set": [
   "  ublic",
   "  long",
   "  adjustOffset",
   "  (",
   "  long",
   "  instant",
   "  ,",
   "  boolean",
   "  earlierOrLater",
   "  )",
   "  {",
   "  /",
   "  a",
   "  bit",
   "  messy",
   "  ,",
   "  but",
   "  will",
   "  work",
   "  in",
   "  all",
   "  non",
   "  -",
   "  pathological",
   "  cases",
   "  /",
   "  evaluate",
   "  3",
   "  hours",
   "  before",
   "  and",
   "  after",
   "  to",
   "  work",
   "  out",
   "  if",
   "  anything",
   "  is",
   "  happeninglong",
   "  instantBefore",
   "  =",
   "+ convertUTCToLocal",
   "+ (",
   "  instant",
   "  -",
   "  3",
   "  *",
   "  DateTimeConstants",
   "  .",
   "  MILLIS_PER_HOUR",
   "+ )",
   "  ;",
   "+ long",
   "+ instantAfter",
   "+ =",
   "+ convertUTCToLocal",
   "+ (",
   "+ instant",
   "+ +",
   "+ 3",
   "+ *",
   "+ DateTimeConstants",
   "+ .",
   "+ MILLIS_PER_HOUR",
   "+ )",
   "+ ;",
   "+ if",
   "+ (",
   "+ instantBefore",
   "+ ==",
   "+ instantAfter",
   "+ )",
   "+ {",
   "  long",
   "  instantBefore",
   "  =",
   "  instant",
   "  -",
   "- 3",
   "- *",
   "- DateTimeConstants",
   "- .",
   "- MILLIS_PER_HOUR",
   "- ;",
   "- long",
   "- instantAfter",
   "- =",
   "- instant",
   "- +",
   "  3",
   "  *",
   "  DateTimeConstants",
   "  .",
   "  MILLIS_PER_HOUR",
   "  ;",
   "  long",
   "  instantAfter",
   "  =",
   "  instant",
   "  +",
   "  3",
   "  *",
   "  DateTimeConstants",
   "  .",
   "  MILLIS_PER_HOUR",
   "  ;",
   "  long",
   "  offsetBefore",
   "  =",
   "  getOffset",
   "  (",
   "  instantBefore",
   "  )",
   "  ;",
   "  long",
   "- offsetBefore",
   "- =",
   "- getOffset",
   "- (",
   "- instantBefore",
   "- )",
   "- ;",
   "- long",
   "- offsetAfter",
   "- =",
   "- getOffset",
   "- (",
   "- instantAfter",
   "- )",
   "- ;",
   "- long",
   "  offsetAfter",
   "  =",
   "  getOffset",
   "  (",
   "  instantAfter",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  offsetBefore",
   "  <=",
   "  offsetAfter",
   "  )",
   "  {",
   "- if",
   "- (",
   "- offsetBefore",
   "- <=",
   "- offsetAfter",
   "- )",
   "- {",
   "  eturn",
   "  instant",
   "  ;"
  ]
 },
 {
  "number": 16,
  "changes_set": [
   "  ublic",
   "  int",
   "  parseInto",
   "  (",
   "  ReadWritableInstant",
   "  instant",
   "  ,",
   "  String",
   "  text",
   "  ,",
   "  int",
   "  position",
   "  )",
   "  {",
   "  hrono",
   "  =",
   "  selectChronology",
   "  (",
   "  chrono",
   "  )",
   "  ;",
   "  ateTimeParserBucket",
   "  bucket",
   "  =",
   "  new",
   "  DateTimeParserBucket",
   "  (",
   "  instantLocal",
   "  ,",
   "  chrono",
   "  ,",
   "  iLocale",
   "  ,",
   "  iPivotYear",
   "  ,",
   "+ iDefaultYear",
   "- chrono",
   "- .",
   "- year",
   "- (",
   "- )",
   "- .",
   "- get",
   "- (",
   "- instantLocal",
   "- )",
   "  )",
   "  ;",
   "  instantLocal",
   "  ,",
   "  chrono",
   "  ,",
   "  iLocale",
   "  ,",
   "  iPivotYear",
   "  ,",
   "  chrono",
   "  .",
   "  year",
   "  (",
   "  )",
   "  .",
   "  get",
   "  (",
   "  instantLocal",
   "  )",
   "  )",
   "  ;",
   "  nt",
   "  newPos",
   "  =",
   "  parser",
   "  .",
   "  parseInto",
   "  (",
   "  bucket",
   "  ,",
   "  text",
   "  ,",
   "  position",
   "  )",
   "  ;",
   "  nstant",
   "  .",
   "  setMillis",
   "  (",
   "  bucket",
   "  .",
   "  computeMillis",
   "  (",
   "  false",
   "  ,",
   "  text",
   "  )",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  iOffsetParsed",
   "  &&",
   "  bucket",
   "  .",
   "  getOffsetInteger",
   "  (",
   "  )",
   "  !=",
   "  null",
   "  )",
   "  {"
  ]
 },
 {
  "number": 20,
  "changes_set": [
   "  ublic",
   "  int",
   "  estimateParsedLength",
   "  (",
   "  )",
   "  {",
   "  ublic",
   "  int",
   "  parseInto",
   "  (",
   "  DateTimeParserBucket",
   "  bucket",
   "  ,",
   "  String",
   "  text",
   "  ,",
   "  int",
   "  position",
   "  )",
   "  {",
   "  tring",
   "  str",
   "  =",
   "  text",
   "  .",
   "  substring",
   "  (",
   "  position",
   "  )",
   "  ;",
   "  String",
   "  best",
   "  =",
   "  null",
   "  ;",
   "- String",
   "- best",
   "- =",
   "- null",
   "- ;",
   "  or",
   "  (",
   "  String",
   "  id",
   "  :",
   "  ALL_IDS",
   "  )",
   "  {",
   "  f",
   "  (",
   "  str",
   "  .",
   "  startsWith",
   "  (",
   "  id",
   "  )",
   "  )",
   "  {",
   "- if",
   "+ bucket",
   "+ .",
   "+ setZone",
   "  (",
   "- best",
   "- ==",
   "- null",
   "- ||",
   "+ DateTimeZone",
   "+ .",
   "+ forID",
   "+ (",
   "+ id",
   "+ )",
   "+ )",
   "+ ;",
   "+ return",
   "+ position",
   "+ +",
   "  id",
   "  .",
   "  length",
   "  (",
   "  )",
   "+ ;",
   "- >",
   "- best",
   "- .",
   "- length",
   "- (",
   "- )",
   "- )",
   "- {",
   "  if",
   "  (",
   "  best",
   "  ==",
   "  null",
   "  ||",
   "  id",
   "  .",
   "  length",
   "  (",
   "  )",
   "  >",
   "  best",
   "  .",
   "  length",
   "  (",
   "  )",
   "  )",
   "  {",
   "  best",
   "  =",
   "  id",
   "  ;",
   "- best",
   "- =",
   "- id",
   "- ;",
   "- }",
   "  }",
   "  if",
   "  (",
   "  best",
   "  !=",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- best",
   "- !=",
   "- null",
   "- )",
   "- {",
   "- bucket",
   "- .",
   "- setZone",
   "- (",
   "- DateTimeZone",
   "- .",
   "- forID",
   "- (",
   "- best",
   "- )",
   "- )",
   "- ;",
   "  bucket",
   "  .",
   "  setZone",
   "  (",
   "  DateTimeZone",
   "  .",
   "  forID",
   "  (",
   "  best",
   "  )",
   "  )",
   "  ;",
   "  return",
   "  position",
   "  +",
   "  best",
   "  .",
   "  length",
   "  (",
   "  )",
   "  ;",
   "- return",
   "- position",
   "- +",
   "- best",
   "- .",
   "- length",
   "- (",
   "- )",
   "- ;",
   "- }",
   "  }",
   "  eturn",
   "  ~",
   "  position",
   "  ;"
  ]
 },
 {
  "number": 18,
  "changes_set": [
   "  ublic",
   "  long",
   "  getDateTimeMillis",
   "  (",
   "  int",
   "  year",
   "  ,",
   "  int",
   "  monthOfYear",
   "  ,",
   "  int",
   "  dayOfMonth",
   "  ,",
   "  /",
   "  Assume",
   "  date",
   "  is",
   "  Gregorian",
   "  .",
   "  ong",
   "  instant",
   "  ;",
   "- try",
   "- {",
   "  try",
   "  {",
   "  nstant",
   "  =",
   "  iGregorianChronology",
   "  .",
   "  getDateTimeMillisyear",
   "  ,",
   "  monthOfYear",
   "  ,",
   "  dayOfMonth",
   "  ,",
   "  ourOfDay",
   "  ,",
   "  minuteOfHour",
   "  ,",
   "  secondOfMinute",
   "  ,",
   "  millisOfSecond",
   "  )",
   "  ;",
   "  }",
   "  catch",
   "  (",
   "  IllegalFieldValueException",
   "  ex",
   "  )",
   "  {",
   "- }",
   "- catch",
   "- (",
   "- IllegalFieldValueException",
   "- ex",
   "- )",
   "- {",
   "- if",
   "- (",
   "- monthOfYear",
   "- !=",
   "- 2",
   "- ||",
   "- dayOfMonth",
   "- !=",
   "- 29",
   "- )",
   "- {",
   "  if",
   "  (",
   "  monthOfYear",
   "  !=",
   "  2",
   "  ||",
   "  dayOfMonth",
   "  !=",
   "  29",
   "  )",
   "  {",
   "  throw",
   "  ex",
   "  ;",
   "- throw",
   "- ex",
   "- ;",
   "- }",
   "  }",
   "  instant",
   "  =",
   "  iGregorianChronology",
   "  .",
   "- getDateTimeMillisinstant",
   "- =",
   "- iGregorianChronology",
   "- .",
   "  getDateTimeMillis",
   "- (",
   "- year",
   "- ,",
   "- monthOfYear",
   "- ,",
   "- 28",
   "- ,",
   "  (",
   "  year",
   "  ,",
   "  monthOfYear",
   "  ,",
   "  28",
   "  ,",
   "  hourOfDay",
   "  ,",
   "  minuteOfHour",
   "  ,",
   "  secondOfMinute",
   "  ,",
   "  millisOfSecond",
   "  )",
   "  ;",
   "- hourOfDay",
   "- ,",
   "- minuteOfHour",
   "- ,",
   "- secondOfMinute",
   "- ,",
   "- millisOfSecond",
   "- )",
   "- ;",
   "- if",
   "- (",
   "- instant",
   "- >=",
   "- iCutoverMillis",
   "- )",
   "- {",
   "  if",
   "  (",
   "  instant",
   "  >=",
   "  iCutoverMillis",
   "  )",
   "  {",
   "  throw",
   "  ex",
   "  ;",
   "- throw",
   "- ex",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  f",
   "  (",
   "  instant",
   "  <",
   "  iCutoverMillis",
   "  )",
   "  {",
   "  /",
   "  Maybe",
   "  it",
   "  Julian",
   "  .",
   "  nstant",
   "  =",
   "  iJulianChronology",
   "  .",
   "  getDateTimeMillis"
  ]
 },
 {
  "number": 19,
  "changes_set": [
   "  ublic",
   "  int",
   "  getOffsetFromLocal",
   "  (",
   "  long",
   "  instantLocal",
   "  )",
   "  {",
   "  eturn",
   "  offsetLocal",
   "  ;",
   "  }",
   "  else",
   "  if",
   "  (",
   "  offsetLocal",
   "- >=",
   "+ >",
   "  0",
   "  )",
   "  {",
   "  }",
   "  else",
   "  if",
   "  (",
   "  offsetLocal",
   "  >=",
   "  0",
   "  )",
   "  {",
   "  ong",
   "  prev",
   "  =",
   "  previousTransition",
   "  (",
   "  instantAdjusted",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  prev",
   "  <",
   "  instantAdjusted",
   "  )",
   "  {",
   "  nt",
   "  offsetPrev",
   "  =",
   "  getOffset",
   "  (",
   "  prev",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 21,
  "changes_set": [
   "  ublic",
   "  String",
   "  getName",
   "  (",
   "  Locale",
   "  locale",
   "  ,",
   "  String",
   "  id",
   "  ,",
   "  String",
   "  nameKey",
   "  )",
   "  {",
   "  f",
   "  (",
   "  byNameKeyCache",
   "  ==",
   "  null",
   "  )",
   "  {",
   "  yIdCache",
   "  .",
   "  put",
   "  (",
   "  id",
   "  ,",
   "  byNameKeyCache",
   "  =",
   "  createCache",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  String",
   "  [",
   "  ]",
   "  [",
   "  ]",
   "  zoneStringsEn",
   "  =",
   "  DateTimeUtils",
   "  .",
   "  getDateFormatSymbols",
   "  (",
   "  Locale",
   "  .",
   "  ENGLISH",
   "  )",
   "  .",
   "  getZoneStrings",
   "  (",
   "  )",
   "  ;",
   "  String",
   "  [",
   "  ]",
   "- [",
   "- ]",
   "- zoneStringsEn",
   "- =",
   "- DateTimeUtils",
   "- .",
   "- getDateFormatSymbols",
   "- (",
   "- Locale",
   "- .",
   "- ENGLISH",
   "- )",
   "- .",
   "- getZoneStrings",
   "- (",
   "- )",
   "- ;",
   "- String",
   "- [",
   "- ]",
   "  setEn",
   "  =",
   "  null",
   "  ;",
   "- String",
   "- [",
   "- ]",
   "- setEn",
   "- =",
   "- null",
   "- ;",
   "- for",
   "- (",
   "- String",
   "- [",
   "- ]",
   "- strings",
   "- :",
   "- zoneStringsEn",
   "- )",
   "- {",
   "  for",
   "  (",
   "  String",
   "  [",
   "  ]",
   "  strings",
   "  :",
   "  zoneStringsEn",
   "  )",
   "  {",
   "  if",
   "  (",
   "  strings",
   "  !=",
   "  null",
   "  &&",
   "  strings",
   "  .",
   "  length",
   "  ==",
   "  5",
   "  &&",
   "  id",
   "  .",
   "  equals",
   "  (",
   "  strings",
   "  [",
   "  0",
   "  ]",
   "  )",
   "  )",
   "  {",
   "- if",
   "+ setEn",
   "+ =",
   "+ strings",
   "+ ;",
   "+ break",
   "+ ;",
   "+ }",
   "+ }",
   "+ tring",
   "+ [",
   "+ ]",
   "+ [",
   "+ ]",
   "+ zoneStringsLoc",
   "+ =",
   "+ DateTimeUtils",
   "+ .",
   "+ getDateFormatSymbols",
   "+ (",
   "+ locale",
   "+ )",
   "+ .",
   "+ getZoneStrings",
   "+ (",
   "+ )",
   "+ ;",
   "+ tring",
   "+ [",
   "+ ]",
   "+ setLoc",
   "+ =",
   "+ null",
   "+ ;",
   "+ or",
   "+ (",
   "+ String",
   "+ [",
   "+ ]",
   "+ strings",
   "+ :",
   "+ zoneStringsLoc",
   "+ )",
   "+ {",
   "+ f",
   "  (",
   "  strings",
   "  !=",
   "  null",
   "  &&",
   "  strings",
   "  .",
   "  length",
   "  ==",
   "  5",
   "  &&",
   "  id",
   "  .",
   "  equals",
   "  (",
   "  strings",
   "  [",
   "  0",
   "  ]",
   "  )",
   "  )",
   "  {",
   "+ etLoc",
   "- setEn",
   "- =",
   "- strings",
   "- ;",
   "- setEn",
   "  =",
   "  strings",
   "  ;",
   "  break",
   "  ;",
   "- break",
   "- ;",
   "  }",
   "  }",
   "- }",
   "- }",
   "+ byNameKeyCache",
   "+ .",
   "+ put",
   "+ (",
   "+ setLoc",
   "+ [",
   "+ 2",
   "+ ]",
   "+ ,",
   "+ new",
   "- tring",
   "+ String",
   "  [",
   "  ]",
   "- [",
   "- ]",
   "- zoneStringsLoc",
   "- =",
   "- DateTimeUtils",
   "- .",
   "- getDateFormatSymbols",
   "- (",
   "- locale",
   "- )",
   "- .",
   "- getZoneStrings",
   "- (",
   "- )",
   "- ;",
   "- tring",
   "- [",
   "- ]",
   "- setLoc",
   "- =",
   "- null",
   "- ;",
   "- or",
   "- (",
   "- String",
   "- [",
   "- ]",
   "- strings",
   "- :",
   "- zoneStringsLoc",
   "- )",
   "  {",
   "- f",
   "+ setLoc",
   "+ [",
   "+ 2",
   "+ ]",
   "+ ,",
   "+ setLoc",
   "+ [",
   "+ 1",
   "+ ]",
   "+ }",
   "+ )",
   "+ ;",
   "+ if",
   "  (",
   "- strings",
   "+ setEn",
   "  !=",
   "  null",
   "  &&",
   "- strings",
   "- .",
   "- length",
   "- ==",
   "- 5",
   "- &&",
   "- id",
   "- .",
   "- equals",
   "- (",
   "- strings",
   "- [",
   "- 0",
   "- ]",
   "- )",
   "- )",
   "- {",
   "- etLoc",
   "+ setLoc",
   "- =",
   "- strings",
   "- ;",
   "- break",
   "- ;",
   "- break",
   "- ;",
   "- }",
   "- }",
   "- }",
   "- }",
   "- if",
   "- (",
   "- setEn",
   "  !=",
   "  null",
   "- &&",
   "- setLoc",
   "- !=",
   "- null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- setEn",
   "- !=",
   "- null",
   "- &&",
   "- setLoc",
   "- !=",
   "- null",
   "- )",
   "- {",
   "- byNameKeyCache",
   "- .",
   "- put",
   "- (",
   "- setEn",
   "- [",
   "- 2",
   "- ]",
   "- ,",
   "- new",
   "- String",
   "- [",
   "- ]",
   "- {",
   "- setLoc",
   "- [",
   "- 2",
   "- ]",
   "- ,",
   "- setLoc",
   "- [",
   "- 1",
   "- ]",
   "- }",
   "- )",
   "- ;",
   "  byNameKeyCache",
   "  .",
   "  put",
   "  (",
   "  setEn",
   "  [",
   "  2",
   "  ]",
   "  ,",
   "  new",
   "  String",
   "  [",
   "  ]",
   "  {",
   "  setLoc",
   "  [",
   "  2",
   "  ]",
   "  ,",
   "  setLoc",
   "  [",
   "  1",
   "  ]",
   "  }",
   "  )",
   "  ;",
   "  /",
   "  need",
   "  to",
   "  handle",
   "  case",
   "  where",
   "  summer",
   "  and",
   "  winter",
   "  have",
   "  the",
   "  same",
   "  /",
   "  abbreviation",
   "  ,",
   "  such",
   "  as",
   "  EST",
   "  in",
   "  Australia",
   "  [",
   "  1716305",
   "  ]",
   "  /",
   "  we",
   "  handle",
   "  this",
   "  by",
   "  appending",
   "  \"-Summer\"",
   "  ,",
   "  cf",
   "  ZoneInfoCompilerif",
   "  (",
   "- setEn",
   "+ setLoc",
   "  [",
   "  2",
   "  ]",
   "  .",
   "  equals",
   "  (",
   "- setEn",
   "+ setLoc",
   "  [",
   "  4",
   "  ]",
   "  )",
   "  )",
   "  {",
   "- if",
   "- (",
   "- setEn",
   "- [",
   "- 2",
   "- ]",
   "- .",
   "- equals",
   "- (",
   "- setEn",
   "- [",
   "- 4",
   "- ]",
   "- )",
   "- )",
   "- {",
   "  byNameKeyCache",
   "  .",
   "  put",
   "  (",
   "- setEn",
   "+ setLoc",
   "  [",
   "  4",
   "  ]",
   "  +",
   "  \"-Summer\"",
   "  ,",
   "  new",
   "  String",
   "  [",
   "  ]",
   "  {",
   "  setLoc",
   "  [",
   "  4",
   "  ]",
   "  ,",
   "  setLoc",
   "  [",
   "  3",
   "  ]",
   "  }",
   "  )",
   "  ;",
   "+ if",
   "+ (",
   "+ setEn",
   "+ [",
   "+ 2",
   "+ ]",
   "+ .",
   "+ equals",
   "+ (",
   "+ setEn",
   "+ [",
   "+ 4",
   "+ ]",
   "+ )",
   "+ )",
   "+ {",
   "  byNameKeyCache",
   "  .",
   "  put",
   "  (",
   "  setEn",
   "  [",
   "  4",
   "  ]",
   "  +",
   "  \"-Summer\"",
   "  ,",
   "  new",
   "  String",
   "  [",
   "  ]",
   "  {",
   "  setLoc",
   "  [",
   "  4",
   "  ]",
   "  ,",
   "  setLoc",
   "  [",
   "  3",
   "  ]",
   "  }",
   "  )",
   "  ;",
   "  else",
   "  {",
   "  byNameKeyCache",
   "  .",
   "  put",
   "  (",
   "- setEn",
   "+ setLoc",
   "  [",
   "  4",
   "  ]",
   "  ,",
   "  new",
   "  String",
   "  [",
   "  ]",
   "  {",
   "  setLoc",
   "  [",
   "  4",
   "  ]",
   "  ,",
   "  setLoc",
   "  [",
   "  3",
   "  ]",
   "  }",
   "  )",
   "  ;",
   "+ }",
   "+ break",
   "+ ;",
   "  byNameKeyCache",
   "  .",
   "  put",
   "  (",
   "  setEn",
   "  [",
   "  4",
   "  ]",
   "  ,",
   "  new",
   "  String",
   "  [",
   "  ]",
   "  {",
   "  setLoc",
   "  [",
   "  4",
   "  ]",
   "  ,",
   "  setLoc",
   "  [",
   "  3",
   "  ]",
   "  }",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 22,
  "changes_set": [
   "  aram",
   "  duration",
   "  the",
   "  duration",
   "  ,",
   "  in",
   "  milliseconds",
   "  /",
   "  rotected",
   "  BasePeriod",
   "  (",
   "  long",
   "  duration",
   "  )",
   "  {",
   "- super",
   "+ this",
   "  (",
   "+ duration",
   "+ ,",
   "+ null",
   "+ ,",
   "+ null",
   "  )",
   "  ;",
   "  super",
   "  (",
   "  )",
   "  ;",
   "  /",
   "  bug",
   "  [",
   "  3264409",
   "  ]",
   "  iType",
   "  =",
   "  PeriodType",
   "  .",
   "  time",
   "  (",
   "- )",
   "- ;",
   "- iType",
   "- =",
   "- PeriodType",
   "- .",
   "- time",
   "- (",
   "- )",
   "- ;",
   "- int",
   "- [",
   "- ]",
   "- values",
   "- =",
   "- ISOChronology",
   "- .",
   "- getInstanceUTC",
   "- (",
   "- )",
   "- .",
   "- get",
   "- (",
   "- this",
   "- ,",
   "- duration",
   "  )",
   "  ;",
   "  int",
   "  [",
   "  ]",
   "  values",
   "  =",
   "  ISOChronology",
   "  .",
   "  getInstanceUTC",
   "  (",
   "  )",
   "  .",
   "  get",
   "  (",
   "  this",
   "  ,",
   "  duration",
   "  )",
   "  ;",
   "  iType",
   "  =",
   "  PeriodType",
   "  .",
   "  standard",
   "  (",
   "  )",
   "  ;",
   "- iType",
   "- =",
   "- PeriodType",
   "- .",
   "- standard",
   "- (",
   "- )",
   "- ;",
   "- iValues",
   "- =",
   "- new",
   "- int",
   "- [",
   "- 8",
   "- ]",
   "- ;",
   "  iValues",
   "  =",
   "  new",
   "  int",
   "  [",
   "  8",
   "  ]",
   "  ;",
   "  System",
   "  .",
   "  arraycopy",
   "  (",
   "  values",
   "  ,",
   "  0",
   "  ,",
   "  iValues",
   "  ,",
   "  4",
   "  ,",
   "  4",
   "  )",
   "  ;",
   "- System",
   "- .",
   "- arraycopy",
   "- (",
   "- values",
   "- ,",
   "- 0",
   "- ,",
   "- iValues",
   "- ,",
   "- 4",
   "- ,",
   "- 4",
   "- )",
   "- ;",
   "  *",
   "  *"
  ]
 },
 {
  "number": 23,
  "changes_set": [
   "  rivate",
   "  static",
   "  synchronized",
   "  String",
   "  getConvertedId",
   "  (",
   "  String",
   "  id",
   "  )",
   "  {",
   "  /",
   "  Backwards",
   "  compatibility",
   "  with",
   "  TimeZone",
   "  .",
   "  ap",
   "  =",
   "  new",
   "  HashMap",
   "  <",
   "  String",
   "  ,",
   "  String",
   "  >",
   "  (",
   "  )",
   "  ;",
   "  ap",
   "  .",
   "  put",
   "  (",
   "  \"GMT\"",
   "  ,",
   "  \"UTC\"",
   "  )",
   "  ;",
   "  map",
   "  .",
   "  put",
   "  (",
   "  \"WET\"",
   "  ,",
   "  \"WET\"",
   "  )",
   "  ;",
   "  map",
   "  .",
   "  put",
   "  (",
   "- \"WET\"",
   "- ,",
   "- \"WET\"",
   "- )",
   "- ;",
   "- map",
   "- .",
   "- put",
   "- (",
   "  \"CET\"",
   "- ,",
   "- \"CET\"",
   "- )",
   "- ;",
   "- map",
   "- .",
   "- put",
   "- (",
   "- \"CET\"",
   "- ,",
   "- \"CET\"",
   "- )",
   "- ;",
   "- map",
   "- .",
   "- put",
   "- (",
   "- \"MET\"",
   "  ,",
   "  \"CET\"",
   "  )",
   "  ;",
   "  map",
   "  .",
   "  put",
   "  (",
   "  \"MET\"",
   "  ,",
   "  \"CET\"",
   "  )",
   "  ;",
   "  map",
   "  .",
   "  put",
   "  (",
   "  \"ECT\"",
   "  ,",
   "  \"CET\"",
   "- )",
   "- ;",
   "- map",
   "- .",
   "- put",
   "- (",
   "- \"ECT\"",
   "- ,",
   "- \"CET\"",
   "- )",
   "- ;",
   "- map",
   "- .",
   "- put",
   "- (",
   "- \"EET\"",
   "- ,",
   "- \"EET\"",
   "  )",
   "  ;",
   "  map",
   "  .",
   "  put",
   "  (",
   "  \"EET\"",
   "  ,",
   "  \"EET\"",
   "  )",
   "  ;",
   "  ap",
   "  .",
   "  put",
   "  (",
   "  \"MIT\"",
   "  ,",
   "  \"Pacific/Apia\"",
   "  )",
   "  ;",
   "  ap",
   "  .",
   "  put",
   "  (",
   "  \"HST\"",
   "  ,",
   "  \"Pacific/Honolulu\"",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 25,
  "changes_set": [
   "  ublic",
   "  int",
   "  getOffsetFromLocal",
   "  (",
   "  long",
   "  instantLocal",
   "  )",
   "  {",
   "  eturn",
   "  offsetLocal",
   "  ;",
   "  }",
   "  else",
   "  if",
   "  (",
   "  offsetLocal",
   "  >",
   "  0",
   "  )",
   "  {",
   "- }",
   "- else",
   "- if",
   "- (",
   "- offsetLocal",
   "- >",
   "- 0",
   "- )",
   "- {",
   "- long",
   "- prev",
   "- =",
   "- previousTransition",
   "- (",
   "- instantAdjusted",
   "- )",
   "- ;",
   "  long",
   "  prev",
   "  =",
   "  previousTransition",
   "  (",
   "  instantAdjusted",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  prev",
   "  <",
   "  instantAdjusted",
   "  )",
   "  {",
   "- if",
   "- (",
   "- prev",
   "- <",
   "- instantAdjusted",
   "- )",
   "- {",
   "  int",
   "  offsetPrev",
   "  =",
   "  getOffset",
   "  (",
   "  prev",
   "  )",
   "- ;",
   "- int",
   "- offsetPrev",
   "- =",
   "- getOffset",
   "- (",
   "- prev",
   "- )",
   "- ;",
   "- int",
   "- diff",
   "- =",
   "- offsetPrev",
   "- -",
   "- offsetLocal",
   "  ;",
   "  int",
   "  diff",
   "  =",
   "  offsetPrev",
   "  -",
   "  offsetLocal",
   "  ;",
   "  if",
   "  (",
   "  instantAdjusted",
   "  -",
   "  prev",
   "  <=",
   "  diff",
   "  )",
   "  {",
   "- if",
   "- (",
   "- instantAdjusted",
   "- -",
   "- prev",
   "- <=",
   "- diff",
   "- )",
   "- {",
   "- return",
   "- offsetPrev",
   "- ;",
   "  return",
   "  offsetPrev",
   "  ;",
   "  }",
   "  }",
   "- }",
   "- }",
   "  eturn",
   "  offsetAdjusted",
   "  ;"
  ]
 },
 {
  "number": 26,
  "changes_set": [
   "  ublic",
   "  long",
   "  add",
   "  (",
   "  long",
   "  instant",
   "  ,",
   "  int",
   "  value",
   "  )",
   "  {",
   "  else",
   "  {",
   "  ong",
   "  localInstant",
   "  =",
   "  iZone",
   "  .",
   "  convertUTCToLocal",
   "  (",
   "  instant",
   "  )",
   "  ;",
   "  ocalInstant",
   "  =",
   "  iField",
   "  .",
   "  add",
   "  (",
   "  localInstant",
   "  ,",
   "  value",
   "  )",
   "  ;",
   "  return",
   "  iZone",
   "  .",
   "  convertLocalToUTC",
   "  (",
   "  localInstant",
   "  ,",
   "  false",
   "- ,",
   "- instant",
   "  )",
   "  ;",
   "  return",
   "  iZone",
   "  .",
   "  convertLocalToUTC",
   "  (",
   "  localInstant",
   "  ,",
   "  false",
   "  ,",
   "  instant",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 26,
  "changes_set": [
   "  ublic",
   "  long",
   "  add",
   "  (",
   "  long",
   "  instant",
   "  ,",
   "  long",
   "  value",
   "  )",
   "  {",
   "  else",
   "  {",
   "  ong",
   "  localInstant",
   "  =",
   "  iZone",
   "  .",
   "  convertUTCToLocal",
   "  (",
   "  instant",
   "  )",
   "  ;",
   "  ocalInstant",
   "  =",
   "  iField",
   "  .",
   "  add",
   "  (",
   "  localInstant",
   "  ,",
   "  value",
   "  )",
   "  ;",
   "  return",
   "  iZone",
   "  .",
   "  convertLocalToUTC",
   "  (",
   "  localInstant",
   "  ,",
   "  false",
   "- ,",
   "- instant",
   "  )",
   "  ;",
   "  return",
   "  iZone",
   "  .",
   "  convertLocalToUTC",
   "  (",
   "  localInstant",
   "  ,",
   "  false",
   "  ,",
   "  instant",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 26,
  "changes_set": [
   "  ublic",
   "  long",
   "  addWrapField",
   "  (",
   "  long",
   "  instant",
   "  ,",
   "  int",
   "  value",
   "  )",
   "  {",
   "  else",
   "  {",
   "  ong",
   "  localInstant",
   "  =",
   "  iZone",
   "  .",
   "  convertUTCToLocal",
   "  (",
   "  instant",
   "  )",
   "  ;",
   "  ocalInstant",
   "  =",
   "  iField",
   "  .",
   "  addWrapField",
   "  (",
   "  localInstant",
   "  ,",
   "  value",
   "  )",
   "  ;",
   "  return",
   "  iZone",
   "  .",
   "  convertLocalToUTC",
   "  (",
   "  localInstant",
   "  ,",
   "  false",
   "- ,",
   "- instant",
   "  )",
   "  ;",
   "  return",
   "  iZone",
   "  .",
   "  convertLocalToUTC",
   "  (",
   "  localInstant",
   "  ,",
   "  false",
   "  ,",
   "  instant",
   "  )",
   "  ;",
   "  ublic",
   "  long",
   "  set",
   "  (",
   "  long",
   "  instant",
   "  ,",
   "  int",
   "  value",
   "  )",
   "  {",
   "  ong",
   "  localInstant",
   "  =",
   "  iZone",
   "  .",
   "  convertUTCToLocal",
   "  (",
   "  instant",
   "  )",
   "  ;",
   "  ocalInstant",
   "  =",
   "  iField",
   "  .",
   "  set",
   "  (",
   "  localInstant",
   "  ,",
   "  value",
   "  )",
   "  ;",
   "  long",
   "  result",
   "  =",
   "  iZone",
   "  .",
   "  convertLocalToUTC",
   "  (",
   "  localInstant",
   "  ,",
   "  false",
   "- ,",
   "- instant",
   "  )",
   "  ;",
   "  long",
   "  result",
   "  =",
   "  iZone",
   "  .",
   "  convertLocalToUTC",
   "  (",
   "  localInstant",
   "  ,",
   "  false",
   "  ,",
   "  instant",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  get",
   "  (",
   "  result",
   "  )",
   "  !=",
   "  value",
   "  )",
   "  {",
   "  hrow",
   "  new",
   "  IllegalFieldValueException",
   "  (",
   "  iField",
   "  .",
   "  getType",
   "  (",
   "  )",
   "  ,",
   "  new",
   "  Integer",
   "  (",
   "  value",
   "  )",
   "  ,",
   "  Illegal",
   "  instant",
   "  due",
   "  to",
   "  time",
   "  zone",
   "  offset",
   "  transition",
   "  :"
  ]
 },
 {
  "number": 26,
  "changes_set": [
   "  ublic",
   "  long",
   "  set",
   "  (",
   "  long",
   "  instant",
   "  ,",
   "  String",
   "  text",
   "  ,",
   "  Locale",
   "  locale",
   "  )",
   "  {",
   "  /",
   "  cannot",
   "  verify",
   "  that",
   "  new",
   "  value",
   "  stuck",
   "  because",
   "  set",
   "  may",
   "  be",
   "  lenientong",
   "  localInstant",
   "  =",
   "  iZone",
   "  .",
   "  convertUTCToLocal",
   "  (",
   "  instant",
   "  )",
   "  ;",
   "  ocalInstant",
   "  =",
   "  iField",
   "  .",
   "  set",
   "  (",
   "  localInstant",
   "  ,",
   "  text",
   "  ,",
   "  locale",
   "  )",
   "  ;",
   "  return",
   "  iZone",
   "  .",
   "  convertLocalToUTC",
   "  (",
   "  localInstant",
   "  ,",
   "  false",
   "- ,",
   "- instant",
   "  )",
   "  ;",
   "  return",
   "  iZone",
   "  .",
   "  convertLocalToUTC",
   "  (",
   "  localInstant",
   "  ,",
   "  false",
   "  ,",
   "  instant",
   "  )",
   "  ;",
   "  ublic",
   "  int",
   "  getDifference",
   "  (",
   "  long",
   "  minuendInstant",
   "  ,",
   "  long",
   "  subtrahendInstant",
   "  )",
   "  {"
  ]
 },
 {
  "number": 26,
  "changes_set": [
   "  ublic",
   "  long",
   "  roundFloor",
   "  (",
   "  long",
   "  instant",
   "  )",
   "  {",
   "  else",
   "  {",
   "  ong",
   "  localInstant",
   "  =",
   "  iZone",
   "  .",
   "  convertUTCToLocal",
   "  (",
   "  instant",
   "  )",
   "  ;",
   "  ocalInstant",
   "  =",
   "  iField",
   "  .",
   "  roundFloor",
   "  (",
   "  localInstant",
   "  )",
   "  ;",
   "  return",
   "  iZone",
   "  .",
   "  convertLocalToUTC",
   "  (",
   "  localInstant",
   "  ,",
   "  false",
   "- ,",
   "- instant",
   "  )",
   "  ;",
   "  return",
   "  iZone",
   "  .",
   "  convertLocalToUTC",
   "  (",
   "  localInstant",
   "  ,",
   "  false",
   "  ,",
   "  instant",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 26,
  "changes_set": [
   "  ublic",
   "  long",
   "  roundCeiling",
   "  (",
   "  long",
   "  instant",
   "  )",
   "  {",
   "  else",
   "  {",
   "  ong",
   "  localInstant",
   "  =",
   "  iZone",
   "  .",
   "  convertUTCToLocal",
   "  (",
   "  instant",
   "  )",
   "  ;",
   "  ocalInstant",
   "  =",
   "  iField",
   "  .",
   "  roundCeiling",
   "  (",
   "  localInstant",
   "  )",
   "  ;",
   "  return",
   "  iZone",
   "  .",
   "  convertLocalToUTC",
   "  (",
   "  localInstant",
   "  ,",
   "  false",
   "- ,",
   "- instant",
   "  )",
   "  ;",
   "  return",
   "  iZone",
   "  .",
   "  convertLocalToUTC",
   "  (",
   "  localInstant",
   "  ,",
   "  false",
   "  ,",
   "  instant",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 24,
  "changes_set": [
   "  ublic",
   "  long",
   "  computeMillis",
   "  (",
   "  boolean",
   "  resetFields",
   "  ,",
   "  String",
   "  text",
   "  )",
   "  {",
   "  or",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  count",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  illis",
   "  =",
   "  savedFields",
   "  [",
   "  i",
   "  ]",
   "  .",
   "  set",
   "  (",
   "  millis",
   "  ,",
   "  resetFields",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  resetFields",
   "  )",
   "  {",
   "- if",
   "- (",
   "- resetFields",
   "- )",
   "- {",
   "- for",
   "- (",
   "- int",
   "- i",
   "- =",
   "- 0",
   "- ;",
   "- i",
   "- <",
   "- count",
   "- ;",
   "- i",
   "- ++",
   "- )",
   "- {",
   "  for",
   "  (",
   "  int",
   "  i",
   "  =",
   "  0",
   "  ;",
   "  i",
   "  <",
   "  count",
   "  ;",
   "  i",
   "  ++",
   "  )",
   "  {",
   "  millis",
   "  =",
   "  savedFields",
   "  [",
   "  i",
   "  ]",
   "  .",
   "  set",
   "  (",
   "  millis",
   "  ,",
   "  i",
   "  ==",
   "  (",
   "  count",
   "  -",
   "  1",
   "  )",
   "  )",
   "  ;",
   "- millis",
   "- =",
   "- savedFields",
   "- [",
   "- i",
   "- ]",
   "- .",
   "- set",
   "- (",
   "- millis",
   "- ,",
   "- i",
   "- ==",
   "- (",
   "- count",
   "- -",
   "- 1",
   "- )",
   "- )",
   "- ;",
   "- }",
   "- }",
   "  }",
   "  }",
   "  catch",
   "  (",
   "  IllegalFieldValueException",
   "  e",
   "  )",
   "  {",
   "  f",
   "  (",
   "  text",
   "  !=",
   "  null",
   "  )",
   "  {",
   "  .",
   "  prependMessage",
   "  (",
   "  \"Cannot parse \\\"\"",
   "  +",
   "  text",
   "  +",
   "  '\"'",
   "  )",
   "  ;"
  ]
 },
 {
  "number": 27,
  "changes_set": [
   "  rivate",
   "  static",
   "  PeriodFormatter",
   "  toFormatter",
   "  (",
   "  List",
   "  <",
   "  Object",
   "  >",
   "  elementPairs",
   "  ,",
   "  boolean",
   "  nont",
   "  size",
   "  =",
   "  elementPairs",
   "  .",
   "  size",
   "  (",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  size",
   "  >=",
   "  2",
   "  &&",
   "  elementPairs",
   "  .",
   "  get",
   "  (",
   "  0",
   "  )",
   "  instanceof",
   "  Separator",
   "  )",
   "  {",
   "  eparator",
   "  sep",
   "  =",
   "  (",
   "  Separator",
   "  )",
   "  elementPairs",
   "  .",
   "  get",
   "  (",
   "  0",
   "  )",
   "  ;",
   "  if",
   "  (",
   "  sep",
   "  .",
   "  iAfterParser",
   "  ==",
   "  null",
   "  &&",
   "  sep",
   "  .",
   "  iAfterPrinter",
   "  ==",
   "  null",
   "  )",
   "  {",
   "- if",
   "- (",
   "- sep",
   "- .",
   "- iAfterParser",
   "- ==",
   "- null",
   "- &&",
   "- sep",
   "- .",
   "- iAfterPrinter",
   "- ==",
   "- null",
   "- )",
   "- {",
   "  eriodFormatter",
   "  f",
   "  =",
   "  toFormatter",
   "  (",
   "  elementPairs",
   "  .",
   "  subList",
   "  (",
   "  2",
   "  ,",
   "  size",
   "  )",
   "  ,",
   "  notPrinter",
   "  ,",
   "  notParser",
   "  )",
   "  ;",
   "  ep",
   "  =",
   "  sep",
   "  .",
   "  finish",
   "  (",
   "  f",
   "  .",
   "  getPrinter",
   "  (",
   "  )",
   "  ,",
   "  f",
   "  .",
   "  getParser",
   "  (",
   "  )",
   "  )",
   "  ;",
   "  eturn",
   "  new",
   "  PeriodFormatter",
   "  (",
   "  sep",
   "  ,",
   "  sep",
   "  )",
   "  ;",
   "  }",
   "- }",
   "  bject",
   "  [",
   "  ]",
   "  comp",
   "  =",
   "  createComposite",
   "  (",
   "  elementPairs",
   "  )",
   "  ;",
   "  f",
   "  (",
   "  notPrinter",
   "  )",
   "  {"
  ]
 }
]