public -1 boolean -1 equals(type -1 object) -1 { -1 if(!(condition)) -1 { -1 return -1 false; -1 } -1 ---return -1 ---super.equals(object); -1 ++++ -1 +++type -1 +++object -1 +++= -1 +++(type)object; -1 ++++ -1 +++int -1 +++primitive -1 +++= -1 +++size(); -1 ++++ -1 +++for(+++loop) -1 +++{ -1 ++++ -1 +++if(condition) -1 +++{ -1 ++++ -1 +++return -1 +++false; -1 ++++ -1 +++} -1 ++++ -1 +++} -1 ++++ -1 +++return -1 +++true; -1 } -1 -2
public -1 method() -1 { -1 public -1 String -1 method(parameters) -1 { -1 ---return -1 ---constant -1 ---+ -1 ---object -1 ++++ -1 +++return -1 +++constant -1 ++++ -1 +++type.method(callparameters) -1 + -1 constant; -1 } -1 -2
public -1 type -1 method(parameters) -1 primitive -1 = -1 -(primitive -1 + -1 1); -1 } -1 ---if(condition) -1 ---{ -1 +++if(condition) -1 +++{ -1 primitive -1 = -1 true; -1 } -1 if(condition) -1 { -1 -2
---this(object, -1 ---enum.value, -1 ---type.method()); -1 +++this(object, -1 +++object, -1 +++type.method()); -1 } -1 -2
private -1 void -1 method(parameters) -1 { -1 } -1 if(condition) -1 { -1 ---long -1 ---primitive -1 ---= -1 ---method(callparameters).method().method() -1 +++long -1 +++primitive -1 +++= -1 +++method(callparameters).method().method() -1 .method(); -1 ---long -1 ---primitive -1 ---= -1 ---method(callparameters).method().method() -1 ++++ -1 +++long -1 +++e -1 +++= -1 +++method(callparameters).method().method() -1 .method(); -1 long -1 primitive -1 = -1 primitive -1 + -1 (primitive -1 - -1 primitive) -1 / -1 constant; -1 if(condition) -1 { -1 -2
public -1 type -1 method(parameters) -1 { -1 if(NULL_CHECK) -1 { -1 throw -1 new -1 exception(object); -1 } -1 +++if(condition) -1 +++{ -1 +++method(callparameters); -1 +++return -1 +++null; -1 ++++ -1 +++} -1 type -1 object -1 = -1 null; -1 int -1 primitive -1 = -1 indexOf(object); -1 ---if -1 ---(primitive -1 --->= -1 ---constant -1 ---&& -1 ---!object.primitive) -1 ---{ -1 ++++ -1 +++if(condition) -1 +++{ -1 type -1 object -1 = -1 (type)object.object.get(primitive); -1 try -1 { -1 object -1 = -1 (type)object.clone(); -1 -2
public -1 type -1 method(parameters) -1 throw -1 new -1 exception(object); -1 } -1 type -1 object -1 = -1 (type) -1 super.clone(); -1 ++++ -1 +++object.primitive -1 +++= -1 +++Double.NaN; -1 ++++ -1 +++object.primitive -1 +++= -1 +++Double.NaN; -1 object.primitive -1 = -1 new -1 java.util.ArrayList(); -1 if(condition) -1 { -1 for(loop) -1 { -1 -2
public -1 type -1 method(parameters) -1 { -1 } -1 } -1 ++++ -1 +++if(NULL_CHECK) -1 +++{ -1 type -1 object -1 = -1 object.method(); -1 Iterator -1 object -1 = -1 object.iterator(); -1 while -1 (object.hasNext()) -1 {-1 public -1 type -1 method(parameters) -1 { -1 object.add(a); -1 } -1 } -1 ++++ -1 +++} -1 } -1 } -1 -2
public -1 static -1 type -1 method(parameters) -1 { -1 for(loop) -1 { -1 int -1 primitive -1 = -1 object.method(callparameter); -1 for(loop) -1 { -1 +++double -1 +++primitive -1 +++= -1 +++object.method(callparameters, -1 +++callparameters); -1 +++if(NOT_A_NUMBER )-1 +++{ -1 +++primitive -1 +++= -1 +++Math.min(callparameters, -1 +++callparameters); -1 +++primitive -1 +++= -1 +++Math.max(callparameters, -1 +++callparameters); -1 +++} -1 if(NOT_A_NUMBER)) -1 { -1 primitive -1 = -1 Math.min(callparameters); -1 +++primitive -1 +++= -1 +++Math.max(callparameters, -1 +++callparameters); -1 } -1 if(NOT_A_NUMBER) -1 { -1 +++primitive -1 +++= -1 +++Math.min(callparameters, -1 +++callparameters); -1 primitive -1 = -1 Math.max(callparameters); -1 } -1 } -1 -2
public -1 static -1 type -1 method(parameters) -1 { -1 for(loop) -1 { -1 int -1 primitive -1 = -1 object.method(callparameters); -1 for(loop) -1 { -1 +++double -1 +++primitive -1 +++= -1 +++object.method(callparameters, -1 +++callparameters); -1 double -1 primitive -1 = -1 object.method(callparameters); -1 double -1 primitive -1 = -1 object.method(callparameters); -1 +++if(NOT_A_NUMBER)) -1 +++{ -1 +++primitive -1 +++= -1 +++Math.min(callparameters, -1 +++callparameters); -1 +++primitive -1 +++= -1 +++Math.max(callparameters, -1 +++callparameters); -1 +++} -1 if(NOT_A_NUMBER) -1 { -1 primitive -1 = -1 Math.min(callparameters); -1 +++maximum -1 +++= -1 +++Math.max(callparameters, -1 +++callparameters); -1 } -1 if(NOT_A_NUMBER) -1 { -1 +++primitive -1 +++= -1 +++Math.min(callparameters, -1 +++callparameters); -1 primitive -1 = -1 Math.max(callparameters); -1 } -1 } -1 -2
---if(NULL_CHECK) -1 ---{ -1 +++if(NULL_CHECK) -1 +++{ -1 return -1 primitive; -1 } -1 -2
public -1 method(parameters) -1 { -1 super(); -1 ---object.object -1 ---= -1 ---object; -1 +++method(callparameters); -1 type -1 object -1 = -1 new -1 type(); -1 object.object -1 = -1 new -1 type(object); -1 object.object.method(); -1 -2
public -1 static -1 boolean -1 equal(parameters) -1 { -1 return -1 false; -1 } -1 Iterator -1 iterator -1 = -1 object.getIterator(callparameters); -1 ---Iterator -1 ---Iterator -1 ---= -1 ---object.getIterator(callparameters); -1 +++Iterator -1 +++iterator -1 +++= -1 +++pbject.getIterator(callparameters); -1 double[] -1 primitive_array -1 = -1 new -1 type[constant]; -1 double[] -1 primitive_array -1 = -1 new -1 type[constant]; -1 boolean -1 done -1 = -1 iterator1.isDone() -1 && -1 iterator2.isDone(); -1 -2
protected -1 type -1 method(parameters) -1 { -1 h[3] -1 = -1 h[2]; -1 if(NULL_CHECK) -1 { -1 type -1 object -1 = -1 new -1 type(callparameters, ---callparameters, -1 +++callparameters); -1 -2
---if(condition) -1 ---{ -1 method(); -1 ---} -1 } -1  -1 public -1 void -1 method(parameters) -1 { -1 int -1 primitive -1 = -1 method(parameters); -1 if(condition) -1 { -1 ---return; -1 ++++ -1 +++throw -1 +++new -1 +++exception(object); -1 } -1 method(index); -1 } -1  -2 
public -1 void -1 method(parameters) -1 { -1 public -1 void -1 method(parameters) -1 { -1 +++if(NULL_CHECK) -1 +++{ -1 +++throw -1 +++new -1 +++exception(object); -1 +++} -1 +++if(condition) -1 +++{ -1 +++throw -1 +++new -1 +++exception(object); -1 +++} -1 Iterator -1 iterator -1 = -1 object.iterator(); -1 while(iterator.hasNext()) -1 { -1 +++type -1 +++object -1 = -1 +++(type)object; -1 +++int -1 +++primitive -1 +++= -1 +++object.method(callparameters); -1 +++if(condition) -1 +++{ -1 object.method(callparameters); -1 +++} -1 } -1 object.object.method(callparameters); -1 } -1 -2
public -1 boolean -1 equals(type -1 object) -1 { -1 if(!(condition)) -1 { -1 return -1 false; -1 } -1 ---return -1 ---super.equals(object); -1 ++++ -1 +++type -1 +++object -1 +++= -1 +++(type)object; -1 ++++ -1 +++int -1 +++primitive -1 +++= -1 +++size(); -1 ++++ -1 +++for(+++loop) -1 +++{ -1 ++++ -1 +++if(condition) -1 +++{ -1 ++++ -1 +++return -1 +++false; -1 ++++ -1 +++} -1 ++++ -1 +++} -1 ++++ -1 +++return -1 +++true; -1 } -1 -2
public -1 method() -1 { -1 public -1 String -1 method(parameters) -1 { -1 ---return -1 ---constant -1 ---+ -1 ---object -1 ++++ -1 +++return -1 +++constant -1 ++++ -1 +++type.method(callparameters) -1 + -1 constant; -1 } -1 -2
public -1 type -1 method(parameters) -1 primitive -1 = -1 -(primitive -1 + -1 1); -1 } -1 ---if(condition) -1 ---{ -1 +++if(condition) -1 +++{ -1 primitive -1 = -1 true; -1 } -1 if(condition) -1 { -1 -2
---this(object, -1 ---enum.value, -1 ---type.method()); -1 +++this(object, -1 +++object, -1 +++type.method()); -1 } -1 -2
private -1 void -1 method(parameters) -1 { -1 } -1 if(condition) -1 { -1 ---long -1 ---primitive -1 ---= -1 ---method(callparameters).method().method() -1 +++long -1 +++primitive -1 +++= -1 +++method(callparameters).method().method() -1 .method(); -1 ---long -1 ---primitive -1 ---= -1 ---method(callparameters).method().method() -1 ++++ -1 +++long -1 +++e -1 +++= -1 +++method(callparameters).method().method() -1 .method(); -1 long -1 primitive -1 = -1 primitive -1 + -1 (primitive -1 - -1 primitive) -1 / -1 constant; -1 if(condition) -1 { -1 -2
public -1 type -1 method(parameters) -1 { -1 if(NULL_CHECK) -1 { -1 throw -1 new -1 exception(object); -1 } -1 +++if(condition) -1 +++{ -1 +++method(callparameters); -1 +++return -1 +++null; -1 ++++ -1 +++} -1 type -1 object -1 = -1 null; -1 int -1 primitive -1 = -1 indexOf(object); -1 ---if -1 ---(primitive -1 --->= -1 ---constant -1 ---&& -1 ---!object.primitive) -1 ---{ -1 ++++ -1 +++if(condition) -1 +++{ -1 type -1 object -1 = -1 (type)object.object.get(primitive); -1 try -1 { -1 object -1 = -1 (type)object.clone(); -1 -2
public -1 type -1 method(parameters) -1 throw -1 new -1 exception(object); -1 } -1 type -1 object -1 = -1 (type) -1 super.clone(); -1 ++++ -1 +++object.primitive -1 +++= -1 +++Double.NaN; -1 ++++ -1 +++object.primitive -1 +++= -1 +++Double.NaN; -1 object.primitive -1 = -1 new -1 java.util.ArrayList(); -1 if(condition) -1 { -1 for(loop) -1 { -1 -2
public -1 type -1 method(parameters) -1 { -1 } -1 } -1 ++++ -1 +++if(NULL_CHECK) -1 +++{ -1 type -1 object -1 = -1 object.method(); -1 Iterator -1 object -1 = -1 object.iterator(); -1 while -1 (object.hasNext()) -1 {-1 public -1 type -1 method(parameters) -1 { -1 object.add(a); -1 } -1 } -1 ++++ -1 +++} -1 } -1 } -1 -2
public -1 static -1 type -1 method(parameters) -1 { -1 for(loop) -1 { -1 int -1 primitive -1 = -1 object.method(callparameter); -1 for(loop) -1 { -1 +++double -1 +++primitive -1 +++= -1 +++object.method(callparameters, -1 +++callparameters); -1 +++if(NOT_A_NUMBER )-1 +++{ -1 +++primitive -1 +++= -1 +++Math.min(callparameters, -1 +++callparameters); -1 +++primitive -1 +++= -1 +++Math.max(callparameters, -1 +++callparameters); -1 +++} -1 if(NOT_A_NUMBER)) -1 { -1 primitive -1 = -1 Math.min(callparameters); -1 +++primitive -1 +++= -1 +++Math.max(callparameters, -1 +++callparameters); -1 } -1 if(NOT_A_NUMBER) -1 { -1 +++primitive -1 +++= -1 +++Math.min(callparameters, -1 +++callparameters); -1 primitive -1 = -1 Math.max(callparameters); -1 } -1 } -1 -2
public -1 static -1 type -1 method(parameters) -1 { -1 for(loop) -1 { -1 int -1 primitive -1 = -1 object.method(callparameters); -1 for(loop) -1 { -1 +++double -1 +++primitive -1 +++= -1 +++object.method(callparameters, -1 +++callparameters); -1 double -1 primitive -1 = -1 object.method(callparameters); -1 double -1 primitive -1 = -1 object.method(callparameters); -1 +++if(NOT_A_NUMBER)) -1 +++{ -1 +++primitive -1 +++= -1 +++Math.min(callparameters, -1 +++callparameters); -1 +++primitive -1 +++= -1 +++Math.max(callparameters, -1 +++callparameters); -1 +++} -1 if(NOT_A_NUMBER) -1 { -1 primitive -1 = -1 Math.min(callparameters); -1 +++maximum -1 +++= -1 +++Math.max(callparameters, -1 +++callparameters); -1 } -1 if(NOT_A_NUMBER) -1 { -1 +++primitive -1 +++= -1 +++Math.min(callparameters, -1 +++callparameters); -1 primitive -1 = -1 Math.max(callparameters); -1 } -1 } -1 -2
---if(NULL_CHECK) -1 ---{ -1 +++if(NULL_CHECK) -1 +++{ -1 return -1 primitive; -1 } -1 -2
public -1 method(parameters) -1 { -1 super(); -1 ---object.object -1 ---= -1 ---object; -1 +++method(callparameters); -1 type -1 object -1 = -1 new -1 type(); -1 object.object -1 = -1 new -1 type(object); -1 object.object.method(); -1 -2
public -1 static -1 boolean -1 equal(parameters) -1 { -1 return -1 false; -1 } -1 Iterator -1 iterator -1 = -1 object.getIterator(callparameters); -1 ---Iterator -1 ---Iterator -1 ---= -1 ---object.getIterator(callparameters); -1 +++Iterator -1 +++iterator -1 +++= -1 +++pbject.getIterator(callparameters); -1 double[] -1 primitive_array -1 = -1 new -1 type[constant]; -1 double[] -1 primitive_array -1 = -1 new -1 type[constant]; -1 boolean -1 done -1 = -1 iterator1.isDone() -1 && -1 iterator2.isDone(); -1 -2
protected -1 type -1 method(parameters) -1 { -1 h[3] -1 = -1 h[2]; -1 if(NULL_CHECK) -1 { -1 type -1 object -1 = -1 new -1 type(callparameters, ---callparameters, -1 +++callparameters); -1 -2
---if(condition) -1 ---{ -1 method(); -1 ---} -1 } -1  -1 public -1 void -1 method(parameters) -1 { -1 int -1 primitive -1 = -1 method(parameters); -1 if(condition) -1 { -1 ---return; -1 ++++ -1 +++throw -1 +++new -1 +++exception(object); -1 } -1 method(index); -1 } -1  -2 
public -1 void -1 method(parameters) -1 { -1 public -1 void -1 method(parameters) -1 { -1 +++if(NULL_CHECK) -1 +++{ -1 +++throw -1 +++new -1 +++exception(object); -1 +++} -1 +++if(condition) -1 +++{ -1 +++throw -1 +++new -1 +++exception(object); -1 +++} -1 Iterator -1 iterator -1 = -1 object.iterator(); -1 while(iterator.hasNext()) -1 { -1 +++type -1 +++object -1 = -1 +++(type)object; -1 +++int -1 +++primitive -1 +++= -1 +++object.method(callparameters); -1 +++if(condition) -1 +++{ -1 object.method(callparameters); -1 +++} -1 } -1 object.object.method(callparameters); -1 } -1 -2